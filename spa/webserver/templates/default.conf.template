# front end spa
server {
    # hide server version
    server_tokens off;
    # since this is default server, any request which comes to nginx ends up here
    # listen       80 default_server; 
    listen       80 default_server; 
    server_name  iwaodev.com;    
    return 301 https://iwaodev.com$request_uri;
}

server {
    # since this is default server, any request which comes to nginx ends up here
    # listen       80 default_server; 
    listen       443 ssl; 
    server_name  iwaodev.com;    

    # ssl
    ssl_certificate /etc/letsencrypt/live/iwaodev.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/iwaodev.com/privkey.pem; # managed by Certbot

    # enable gzip compression  
    gzip on;  
  
    # tell proxies to cache both gzipped and regular versions of a resource
    gzip_vary on;
  
    # informs nginx to not compress anything smaller than the defined size
    gzip_min_length 500;       

    # 
    # enables or disables gzipping of responses for proxied requests depending on the request and response. 
    # 
    # the fact that the request is proxied is determined by the presence of the 'Via' request header field. 
    # 
    # why this directive is necessary??
    #  - it is reasonable to compress responses only to requests that will not be cached on the proxy server.  
    #  - for this purpose the gzip_proxied directive has parameters that instruct nginx to check the Cache-Control header field in a response and compress the response if the value is no-cache, no-store, or private. 
    #  - In addition, you must include the expired parameter to check the value of the Expires header field. 
    #  - these paramters are set in the following example, along with the auth parameter, which checks for the presence of the Authorization header field (an authorized response is specific to the end user and is not typically cached) 
    gzip_proxied expired no-cache no-store private auth; 
    
    # enables the types of files that can be compressed 
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript application/json;
    
    # disable comporession for Internet Explorer versions 1-6
    gzip_disable "MSIE [1-6]\.";    
    
    access_log  /var/log/nginx/iwaodev.com.access.log  main;
    error_log /var/log/nginx/iwaodev.com.error.log info;

    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options nosniff always;

    # hide server version
    server_tokens off;

    # CACHE CONTROL 
    location ~* \.(?:ico|css|js|gif|jpe?g|png|svg)$ {
        root   /var/www;       
  
        expires 30d;           
        add_header Vary Accept-Encoding;
        access_log off;
    }

    location / {           

      root   /var/www;     
      # this is required because manually write for url cause 404 at react app
      try_files $uri /index.html;     
    }
}

# backend api
server {
    # hide server version
    server_tokens off;

    # disable the max image upload size
    client_max_body_size 0;

    # since this is default server, any request which comes to nginx ends up here
    # listen       80 default_server; 
    listen       80; 
    server_name  api.iwaodev.com;    
    return 301 https://api.iwaodev.com$request_uri;
}

server {

    listen       443 ssl; 
    server_name  api.iwaodev.com;    

    # ssl
    ssl_certificate /etc/letsencrypt/live/api.iwaodev.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.iwaodev.com/privkey.pem; # managed by Certbot
    
    access_log  /var/log/nginx/api.iwaodev.com.access.log  main;
    error_log /var/log/nginx/api.iwaodev.com.error.log info;

    # disable the max image upload size
    client_max_body_size 0;

    # hide server version
    server_tokens off;
  
    location / {           
      proxy_pass http://${API_HOST}:${API_PORT};
      proxy_set_header Host $host;
      proxy_pass_request_headers on;
    }
}

