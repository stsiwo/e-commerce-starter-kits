{"version":3,"sources":["webpack://spa/./src/app/index.tsx","webpack://spa/./src/utils.ts","webpack://spa/./src/domain/user/types.ts","webpack://spa/./src/domain/product/types.ts","webpack://spa/./src/domain/wishlist/types.ts","webpack://spa/./src/domain/order/types.ts","webpack://spa/./src/ui/css/theme.ts","webpack://spa/./src/domain/review/type.ts","webpack://spa/./src/states/state.ts","webpack://spa/./src/domain/user/index.ts","webpack://spa/./src/domain/order/index.ts","webpack://spa/./src/selectors/selector.ts","webpack://spa/./src/ui/hooks/validation/index.tsx","webpack://spa/./src/ui/hooks/validation/rules.ts","webpack://spa/./src/reducers/slices/app/index.ts","webpack://spa/./src/ui/components/common/UserAccountBasicManagement/index.tsx","webpack://spa/./src/ui/components/common/UserAccountPhoneManagement/index.tsx","webpack://spa/./src/ui/components/common/UserAccountAddressManagement/index.tsx","webpack://spa/./src/ui/components/common/UserAccountAvatarManagement/index.tsx","webpack://spa/./src/ui/components/pages/Account/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminAccount/AdminAccountBasicManagement/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminAccount/AdminAccountAvatarManagement/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminAccount/AdminAccountCompanyManagement/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminAccount/index.tsx","webpack://spa/./src/reducers/slices/domain/category.ts","webpack://spa/./src/ui/components/pages/Admin/AdminCategory/AdminCategoryForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCategory/AdminCategoryFormDialog/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCategory/AdminCategoryGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCategory/index.tsx","webpack://spa/./src/configs/axiosConfig.ts","webpack://spa/./src/reducers/slices/domain/user.ts","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerForm/AdminCustomerAddressForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerForm/AdminCustomerBasicForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerForm/AdminCustomerPhoneForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerForm/AdminCustomerAvatarForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerFormDrawer/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerSearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerSearchController/TabPanel/UserDateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerSearchController/TabPanel/UserSortTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerSearchController/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/AdminCustomerGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminCustomer/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminLogin/index.tsx","webpack://spa/./src/reducers/slices/domain/order.ts","webpack://spa/./src/ui/components/common/OrderEventUpdateFormDialog/index.tsx","webpack://spa/./src/ui/components/common/OrderTimeline/index.tsx","webpack://spa/./src/ui/components/common/GridData/ColorCell/index.tsx","webpack://spa/./src/ui/components/common/GridData/SizeCell/index.tsx","webpack://spa/./src/ui/components/common/ProductCard/ProductHorizontalCard.tsx","webpack://spa/./src/ui/components/common/UserCard/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderForm/AddressCard/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderForm/PhoneCard/index.tsx","webpack://spa/./src/ui/components/common/OrderDetail/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderFormDrawer/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderSearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderSearchController/TabPanel/OrderDateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderSearchController/TabPanel/OrderSortTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderSearchController/TabPanel/OrderStatusFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderSearchController/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/AdminOrderGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminOrder/index.tsx","webpack://spa/./src/reducers/slices/domain/product.ts","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/AdminProductForm/ProductImagesForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/AdminProductForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/AdminProductFormDialog/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/CategoryFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/DiscountFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/PriceFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/ReleaseDateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/ReviewFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/TabPanel/SortTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/ADminProductSearchController/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/AdminProductGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProduct/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProductVariant/AdminProductVariantForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProductVariant/AdminProductVariantFormDialog/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProductVariant/AdminProductVariantGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminProductVariant/index.tsx","webpack://spa/./src/reducers/slices/domain/review.ts","webpack://spa/./src/domain/review/index.ts","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewForm/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewFormDialog/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/TabPanel/DateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/TabPanel/ReviewPointFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/TabPanel/SortTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/TabPanel/VerifiedFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewSearchController/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/AdminReviewGridView/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminReview/index.tsx","webpack://spa/./src/reducers/slices/app/fetchStatus/auth.ts","webpack://spa/./src/ui/components/common/Checkout/CustomerBasicForm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/CustomerContactForm/CustomerAddressesForm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/CustomerContactForm/CustomerPhonesForm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/CustomerContactForm/index.tsx","webpack://spa/./src/configs/stripeConfig.ts","webpack://spa/./src/reducers/slices/domain/cartItem.ts","webpack://spa/./src/reducers/slices/common/index.ts","webpack://spa/./src/ui/components/common/Checkout/Payment/StripePaymentForm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/Payment/index.tsx","webpack://spa/./src/domain/cart/index.ts","webpack://spa/./src/ui/components/common/CartItemTotal/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/CartItemConfirmCard/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/CustomerBasicConfirm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/AddressConfirmCard/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/PhoneConfirmCard/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/CustomerContactConfirm/index.tsx","webpack://spa/./src/ui/components/common/Checkout/FinalConfirmForm/index.tsx","webpack://spa/./src/ui/components/common/CartItem/index.tsx","webpack://spa/./src/ui/components/common/Checkout/OrderItemForm/index.tsx","webpack://spa/./src/ui/components/pages/Checkout/index.tsx","webpack://spa/./src/ui/components/common/Hero/index.tsx","webpack://spa/./src/ui/components/common/ProductCard/index.tsx","webpack://spa/./src/ui/components/common/BrandNewProduct/index.tsx","webpack://spa/./src/ui/components/common/CategoryCard/index.tsx","webpack://spa/./src/ui/components/common/CategoryList/index.tsx","webpack://spa/./src/ui/components/common/ForgotPasswordDialog/index.tsx","webpack://spa/./src/ui/components/pages/Login/index.tsx","webpack://spa/./src/ui/components/common/Carousel/index.tsx","webpack://spa/./src/ui/components/common/ColorRadio/index.tsx","webpack://spa/./src/domain/product/index.ts","webpack://spa/./src/reducers/slices/domain/wishlistItem.ts","webpack://spa/./src/ui/components/pages/Product/ProductDetail/index.tsx","webpack://spa/./src/ui/components/pages/Product/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/CategoryFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/DiscountFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/PriceFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/ReleaseDateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/ReviewFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/TabPanel/SortTabPanel/index.tsx","webpack://spa/./src/ui/components/common/SearchController/index.tsx","webpack://spa/./src/ui/components/common/CornerRibbon/index.tsx","webpack://spa/./src/ui/components/common/ProductCard/ProductCardV2.tsx","webpack://spa/./src/ui/components/common/SearchResult/index.tsx","webpack://spa/./src/ui/components/pages/ProductSearch/index.tsx","webpack://spa/./src/ui/components/pages/Signup/index.tsx","webpack://spa/./src/ui/components/common/WishlistItem/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/DiscountFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/PriceFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/ReleaseDateFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/ReviewFilterTabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/TabPanel/SortTabPanel/index.tsx","webpack://spa/./src/ui/components/common/WishlistItemSearchController/index.tsx","webpack://spa/./src/ui/components/pages/Wishlist/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminHeader/index.tsx","webpack://spa/./src/ui/components/pages/Admin/AdminNavDrawer/index.tsx","webpack://spa/./src/ui/components/pages/BasePage/AdminBasePage.tsx","webpack://spa/./src/ui/hoc/withAdminBasePage.tsx","webpack://spa/./src/reducers/slices/ui/index.ts","webpack://spa/./src/ui/components/common/Header/GuestHeaderMenuItem.tsx","webpack://spa/./src/ui/components/common/Header/MemberHeaderMenuItems.tsx","webpack://spa/./src/ui/components/common/Header/index.tsx","webpack://spa/./src/ui/components/common/SearchForm/index.tsx","webpack://spa/./src/ui/components/pages/Footer/index.tsx","webpack://spa/./src/ui/components/common/CartBox/index.tsx","webpack://spa/./src/ui/components/common/CartDrawer/index.tsx","webpack://spa/./src/ui/components/pages/BasePage/index.tsx","webpack://spa/./src/ui/hoc/withBasePage.tsx","webpack://spa/./src/ui/components/common/ContactForm/index.tsx","webpack://spa/./src/ui/components/pages/Contact/index.tsx","webpack://spa/./src/ui/components/pages/Order/OrderForm/index.tsx","webpack://spa/./src/ui/components/pages/Order/index.tsx","webpack://spa/./src/ui/components/pages/AccountVerify/index.tsx","webpack://spa/./src/ui/components/pages/ResetPassword/index.tsx","webpack://spa/./src/ui/components/common/OrderList/index.tsx","webpack://spa/./src/ui/components/pages/Orders/index.tsx","webpack://spa/./src/ui/components/routes/index.tsx","webpack://spa/./src/ui/components/pages/Guest/index.tsx","webpack://spa/./src/ui/components/pages/Admin/index.tsx","webpack://spa/./src/ui/components/pages/Home/index.tsx","webpack://spa/./src/ui/components/pages/NotFound/index.tsx","webpack://spa/./src/ui/hooks/previous/index.tsx","webpack://spa/./src/ui/components/routes/PageRoute/index.tsx","webpack://spa/./src/ui/components/pages/Content/index.tsx","webpack://spa/./src/reducers/slices/app/fetchStatus/cartItem.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/category.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/order.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/product.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/review.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/user.ts","webpack://spa/./src/reducers/slices/app/fetchStatus/wishlistItem.ts","webpack://spa/./src/reducers/slices/sensitive/index.tsx","webpack://spa/./src/reducers/slices/domain/checkout.ts","webpack://spa/./src/reducers/rootReducer.ts","webpack://spa/./src/sideEffects/workers/auth/deleteAuthAddressWorker.ts","webpack://spa/./src/sideEffects/workers/auth/deleteAuthAvatarImageWorker.ts","webpack://spa/./src/sideEffects/workers/auth/deleteAuthPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/auth/patchAuthAddressWorker.ts","webpack://spa/./src/sideEffects/workers/auth/patchAuthPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/auth/postAuthAddressWorker.ts","webpack://spa/./src/sideEffects/workers/auth/postAuthAvatarImageWorker.ts","webpack://spa/./src/sideEffects/workers/auth/postAuthPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/auth/putAuthAddressWorker.ts","webpack://spa/./src/sideEffects/workers/auth/putAuthCompanyWorker.ts","webpack://spa/./src/sideEffects/workers/auth/putAuthPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/auth/putAuthWorker.ts","webpack://spa/./src/sideEffects/workers/cartItem/deleteCartItemWorker.ts","webpack://spa/./src/sideEffects/workers/cartItem/deleteSingleCartItemWorker.ts","webpack://spa/./src/sideEffects/workers/cartItem/fetchCartItemWorker.ts","webpack://spa/./src/sideEffects/workers/cartItem/postCartItemWorker.ts","webpack://spa/./src/sideEffects/workers/cartItem/putCartItemWorker.ts","webpack://spa/./src/sideEffects/workers/category/deleteSingleCategoryWorker.ts","webpack://spa/./src/sideEffects/workers/category/fetchCategoryWorker.ts","webpack://spa/./src/sideEffects/workers/category/postCategoryWorker.ts","webpack://spa/./src/sideEffects/workers/category/putCategoryWorker.ts","webpack://spa/./src/sideEffects/workers/common/requestUrlCheckWorker.ts","webpack://spa/./src/sideEffects/workers/fetchCategoryWithCacheWorker.ts","webpack://spa/./src/sideEffects/workers/fetchProductWithCacheWorker.ts","webpack://spa/./src/sideEffects/workers/leftNavMenuWorker.ts","webpack://spa/./src/sideEffects/workers/order/deleteSingleOrderEventWorker.ts","webpack://spa/./src/sideEffects/workers/order/fetchOrderWorker.ts","webpack://spa/./src/sideEffects/workers/order/fetchSingleOrderWorker.ts","webpack://spa/./src/sideEffects/workers/order/postOrderEventWorker.ts","webpack://spa/./src/sideEffects/workers/order/postOrderWorker.ts","webpack://spa/./src/sideEffects/workers/order/postSessionTimeoutOrderEventWorker.ts","webpack://spa/./src/sideEffects/workers/order/putOrderEventWorker.ts","webpack://spa/./src/sideEffects/workers/order/putOrderWorker.ts","webpack://spa/./src/sideEffects/workers/product/deleteSingleProductVariantWorker.ts","webpack://spa/./src/sideEffects/workers/product/deleteSingleProductWorker.ts","webpack://spa/./src/sideEffects/workers/product/fetchProductWorker.ts","webpack://spa/./src/sideEffects/workers/product/fetchPublicProductWorker.ts","webpack://spa/./src/sideEffects/workers/product/fetchSingleProductWorker.ts","webpack://spa/./src/sideEffects/workers/product/postProductVariantWorker.ts","webpack://spa/./src/domain/product/formData.ts","webpack://spa/./src/sideEffects/workers/product/postProductWorker.ts","webpack://spa/./src/sideEffects/workers/product/putProductVariantWorker.ts","webpack://spa/./src/sideEffects/workers/product/putProductWorker.ts","webpack://spa/./src/sideEffects/workers/review/deleteSingleReviewWorker.ts","webpack://spa/./src/sideEffects/workers/review/fetchReviewWorker.ts","webpack://spa/./src/sideEffects/workers/review/postReviewWorker.ts","webpack://spa/./src/sideEffects/workers/review/putReviewWorker.ts","webpack://spa/./src/sideEffects/workers/user/deleteSingleUserWorker.ts","webpack://spa/./src/sideEffects/workers/user/deleteUserAddressWorker.ts","webpack://spa/./src/sideEffects/workers/user/deleteUserAvatarImageWorker.ts","webpack://spa/./src/sideEffects/workers/user/deleteUserPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/user/fetchSingleUserWorker.ts","webpack://spa/./src/sideEffects/workers/user/fetchUserWorker.ts","webpack://spa/./src/sideEffects/workers/user/patchUserAddressWorker.ts","webpack://spa/./src/sideEffects/workers/user/patchUserPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/user/postUserAddressWorker.ts","webpack://spa/./src/sideEffects/workers/user/postUserAvatarImageWorker.ts","webpack://spa/./src/sideEffects/workers/user/postUserPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/user/putUserAddressWorker.ts","webpack://spa/./src/sideEffects/workers/user/putUserPhoneWorker.ts","webpack://spa/./src/sideEffects/workers/user/putUserWorker.ts","webpack://spa/./src/sideEffects/workers/wishlistItems/deleteSingleWishlistItemWorker.ts","webpack://spa/./src/sideEffects/workers/wishlistItems/deleteWishlistItemWorker.ts","webpack://spa/./src/sideEffects/workers/wishlistItems/fetchWishlistItemWorker.ts","webpack://spa/./src/sideEffects/workers/wishlistItems/patchWishlistItemWorker.ts","webpack://spa/./src/sideEffects/workers/wishlistItems/postWishlistItemWorker.ts","webpack://spa/./src/sideEffects/workers/auth/fetchAuthOrderWorker.ts","webpack://spa/./src/sideEffects/workers/auth/postAuthOrderEventWorker.ts","webpack://spa/./src/sideEffects/workers/auth/fetchSingleAuthOrderWorker.ts","webpack://spa/./src/sideEffects/watchers/index.ts","webpack://spa/./src/configs/storeConfig.ts","webpack://spa/./src/sideEffects/rootSaga.ts","webpack://spa/./src/index.tsx","webpack://spa/./src/static/sample-hero-background-19-7-overlay.jpg","webpack://spa/./src/static/sample-product-1-1.jpg","webpack://spa/./src/static/self.jpeg"],"names":["FetchStatusEnum","UserTypeEnum","MessageTypeEnum","dateFormatOption","year","month","day","generateQueryString","target","keys","Object","queryString","forEach","key","variable","prototype","toString","call","toISOString","substring","length","toDateString","date","console","log","Date","toLocaleDateString","cadCurrencyFormat","amount","toLocaleString","style","currency","UserSortEnum","ProductSortEnum","defaultUser","firstName","lastName","email","avatarImagePath","addresses","phones","reviews","orders","cartItems","userType","GUEST","defaultUserBasicAccountData","password","confirm","defaultUserBasicAccountValidationData","generateDefaultCustomerPhonesFormData","phoneId","phoneNumber","countryCode","isSelected","defaultUserAccountValidationPhoneData","generateDefaultCustomerAddressesFormData","addressId","address1","address2","city","province","country","postalCode","isBillingAddress","isShippingAddress","defaultUserAccountValidationAddressData","defaultContactFormValidationData","title","description","defaultAdminCompanyFormValidationData","companyName","companyDescription","companyEmail","WishlistItemSortEnum","defaultProductVariantData","productSize","variantColor","variantUnitPrice","variantDiscountPrice","variantDiscountStartDate","variantDiscountEndDate","variantStock","isDiscount","note","variantWeight","variantHeight","variantWidth","variantLength","defaultProductVariantValidationData","defaultProductOnlyData","Array","fill","productName","productDescription","productPath","productImageFiles","productImages","productImageName","productImagePath","isChange","productBaseUnitPrice","productBaseDiscountPrice","productBaseDiscountStartDate","productBaseDiscountEndDate","isPublic","category","releaseDate","defaultProductValidationData","productVariants","defaultCategoryData","categoryName","categoryDescription","categoryPath","defaultCategoryValidationData","productVariantSizeObj","xs","productSizeId","productSizeName","productSizeDescription","s","m","l","xl","OrderStatusEnum","theme","palette","headerBackground","paper","OrderSortEnum","orderStatusLabelList","DRAFT","ORDERED","FAILED_PAYMENT","PAID","CANCEL_REQUEST","RECEIVED_CANCEL_REQUEST","CANCELED","SHIPPED","DELIVERED","RETURN_REQUEST","RECEIVED_RETURN_REQUEST","RETURNED","ERROR","SESSION_TIMEOUT","ReviewSortEnum","orderStatusBagList","label","defaultNote","icon","Drafts","color","success","main","Payment","error","ShoppingCart","CancelPresentation","AssignmentTurnedIn","LocalShipping","Home","AssignmentReturn","TimerOff","Error","defaultOrderEventData","createdAt","undoable","user","orderId","orderStatus","defaultReviewValidationData","reviewPoint","reviewTitle","reviewDescription","isVerified","categorySchemaEntity","idAttribute","categorySchemaArray","productSchemaEntity","productSchemaArray","initialState","ui","leftNavMenu","rightNavMenu","searchModal","cartModal","app","auth","localStorage","getItem","JSON","parse","isLoggedIn","previousUrl","message","id","type","INITIAL","searchKeyword","requestTracker","fetchStatus","products","get","getPublic","getSingle","post","put","deleteSingle","postVariant","putVariant","deleteSingleVariant","postEvent","deleteSingleEvent","putEvent","postSessionTimeoutEvent","users","patch","postPhone","putPhone","patchPhone","deletePhone","postAddress","putAddress","patchAddress","deleteAddress","postAvatarImage","deleteAvatarImage","categories","delete","wishlistItems","putCompany","fetchOrder","fetchSingleOrder","postOrderEvent","domain","data","pagination","page","limit","totalPages","totalElements","query","searchQuery","minPrice","maxPrice","startDate","endDate","sort","DATE_DESC","userId","productId","categoryId","curItems","checkout","order","sensitive","stripeClientSecret","getShippingAddressId","primary","find","address","getBillingAddressId","toAddressString","calcOrderTotalCost","productCost","taxCost","shippingCost","getCurOrderStatus","orderEvents","toOrderAddress","rsSelector","getLeftNavMenu","state","getRightNavMenu","getSearchModal","getCartModal","getAuth","getPreviousUrl","getMessage","getSearchKeyword","getRequestTracker","getPutAuthFetchStatus","getPostSessionTimeoutOrderEventFetchStatus","getPostOrderFetchStatus","getFetchReviewFetchStatus","getFetchProductFetchStatus","getFetchCategoryFetchStatus","getFetchOrderFetchStatus","getFetchUserFetchStatus","getCategory","getCategoryPagination","getReview","getReviewPagination","getReviewQuery","getReviewQuerySearchQuery","getReviewQueryUserId","getReviewQueryProductId","getReviewQueryStartDate","getReviewQueryEndDate","getReviewQueryIsVerified","getReviewQueryReviewPoint","getReviewQuerySort","getCartItem","getWishlistItem","getWishlistItemPagination","getWishlistItemQuery","getWishlistItemQuerySearchQuery","getWishlistItemQueryMinPrice","getWishlistItemQueryMaxPrice","getWishlistItemQueryStartDate","getWishlistItemQueryEndDate","getWishlistItemQueryIsDiscount","getWishlistItemQueryReviewPoint","getWishlistItemQuerySort","getUser","getUserPagination","getUserQuerySearchQuery","getUserQueryStartDate","getUserQueryEndDate","getUserQuerySort","getOrder","getOrderPagination","getOrderQuerySearchQuery","getOrderQueryOrderStatus","getOrderQueryStartDate","getOrderQueryEndDate","getOrderQuerySort","getProduct","getProductQuery","getProductQuerySearchQuery","getProductQueryCategoryId","getProductQueryMinPrice","getProductQueryMaxPrice","getProductQueryStartDate","getProductQueryEndDate","getProductQueryIsDiscount","getProductQueryReviewPoint","getProductQuerySort","getProductPagination","getProductCurItems","getCheckoutOrder","senstive","getStripeClientSecret","mSelector","makeLeftNavMenuSelector","makeRightNavMenuSelector","makeSearchModalSelector","makeCartModalSelector","makeAuthSelector","makeAuthSelectedPhoneSelector","phone","makeAuthSelectedPhoneIdSelector","selectedPhone","makeAuthBillingAddressSelector","makeAuthShippingAddressSelector","makeAuthValidateCustomerBasicInfoSelector","makeAuthValidateCustomerPhoneSelector","makeAuthValidateCustomerShippingAddressSelector","makeAuthValidateCustomerBillingAddressSelector","makeStipeClientSecretSelector","makePreviousUrlSelector","makeMessageSelector","makeSearchKeywordSelector","keyword","makeRequestTrackerSelector","makeFetchProductFetchStatusSelector","makeFetchCategoryFetchStatusSelector","makeFetchOrderFetchStatusSelector","makeFetchUserFetchStatusSelector","makeFetchReviewFetchStatusSelector","makeCategorySelector","normalizedCategories","makeCategoryWithoutCacheSelector","denormalizedEntities","makeCategoryPaginationSelector","makeCategoryQueryStringSelector","makeReviewSelector","makeReviewPaginationSelector","makeReviewQuerySelector","makeReviewQuerySearchQuerySelector","makeReviewQueryProductIdSelector","makeReviewQueryUserIdSelector","makeReviewQueryReviewPointSelector","makeReviewQueryIsVerifiedSelector","makeReviewQueryStartDateSelector","makeReviewQueryEndDateSelector","makeReviewQuerySortSelector","makeReviewQueryStringSelector","makeCartItemSelector","cartItem","makeSelectedCartItemSelector","filter","cart","makeNumberOfCartItemSelector","makeWishlistItemSelector","wishlistItem","makeSingleWishlistItemSelector","wishlistItemId","makeWishlistItemPaginationSelector","makeWishlistItemQueryStringSelector","makeWishlistItemQueryIsDiscountSelector","makeWishlistItemQueryMaxPriceSelector","makeWishlistItemQueryMinPriceSelector","makeWishlistItemQueryReviewPointSelector","makeWishlistItemQueryEndDateSelector","makeWishlistItemQueryStartDateSelector","makeWishlistItemQuerySearchQuerySelector","makeWishlistItemQuerySortSelector","makeUserSelector","makeUserSelectedPhoneIdSelector","makeUserPaginationSelector","makeUserQueryStringSelector","makeUserQuerySelector","makeUserQuerySearchQuerySelector","makeUserQueryStartDateSelector","makeUserQueryEndDateSelector","makeUserQuerySortSelector","makeUserByIdSelector","makeOrderSelector","makeOrderByIdSelector","makeOrderPaginationSelector","makeOrderQueryStringSelector","makeOrderQuerySelector","makeOrderQuerySearchQuerySelector","makeOrderQueryOrderStatusSelector","makeOrderQueryStartDateSelector","makeOrderQueryEndDateSelector","makeOrderQuerySortSelector","makeProductWithoutCacheSelector","normalizedProducts","makeProductSelector","makeProductByPathSelector","path","product","makeProductVariantByProductIdSelector","makeProductQuerySelector","makeProductQuerySearchQuerySelector","makeProductQueryCategoryIdSelector","makeProductQueryMinPriceSelector","makeProductQueryMaxPriceSelector","makeProductQueryReviewPointSelector","makeProductQueryIsDiscountSelector","makeProductQueryStartDateSelector","makeProductQueryEndDateSelector","makeProductQuerySortSelector","makeProductPaginationSelector","makeProductQueryStringSelector","makeOrderCriteriaSelector","selectedCartItems","shippingAddress","billingAddress","orderFirstName","orderLastName","orderEmail","orderPhone","MEMBER","orderDetails","map","productQuantity","quantity","productVariantId","variants","variantId","makeProductAndVariantIdsFromCurCheckoutOrderSelector","checkoutOrder","orderDetail","productVariant","useValidation","input","updateValidationAt","value","tempValidationData","curValidationDomain","tempDomainData","curDomain","schema","validateAt","then","setValidationDomain","prev","errors","updateAllValidation","tempEmptyValidationData","defaultValidationDomain","validate","abortEarly","inner","e","isValidSync","userAccountSchema","shape","required","min","cf","when","is","pw","oneOf","otherwise","notRequired","userAccountPhoneSchema","userAccountAddressSchema","optional","nullable","adminLoginSchema","memberSignupSchema","memberLoginSchema","productVariantSchema","productSchema","test","constructor","of","categorySchema","reviewSchema","contactSchema","companySchema","forgotPasswordSchema","resetPasswordSchema","clearAllSortAndFilterActionCreator","putAuthActionCreator","putAuthActionTypeName","postAuthPhoneActionCreator","postAuthPhoneActionTypeName","putAuthPhoneActionCreator","putAuthPhoneActionTypeName","patchAuthPhoneActionCreator","patchAuthPhoneActionTypeName","deleteAuthPhoneActionCreator","deleteAuthPhoneActionTypeName","postAuthAddressActionCreator","postAuthAddressActionTypeName","putAuthAddressActionCreator","putAuthAddressActionTypeName","patchAuthAddressActionCreator","patchAuthAddressActionTypeName","deleteAuthAddressActionCreator","deleteAuthAddressActionTypeName","postAuthAvatarImageActionCreator","postAuthAvatarImageActionTypeName","deleteAuthAvatarImageActionCreator","deleteAuthAvatarImageActionTypeName","putAuthCompanyActionCreator","putAuthCompanyActionTypeName","fetchAuthOrderActionCreator","fetchAuthOrderActionTypeName","fetchSingleAuthOrderActionCreator","fetchSingleAuthOrderActionTypeName","postAuthOrderEventActionCreator","postAuthOrderEventActionTypeName","authSlice","name","reducers","login","action","loginWithUser","payload","update","logout","updateAvatarImagePath","switchPrimaryPhone","replacePhone","appendPhone","push","updatePhone","switchShippingAddress","switchBillingAddress","replaceAddress","appendAddress","updateAddress","updateCompany","companies","company","companyId","authSliceReducer","reducer","authActions","actions","previousUrlSlice","clear","extraReducers","builder","addCase","previousUrlSliceReducer","previousUrlActions","messageSlice","messageSliceReducer","messageActions","searchKeywordSlice","searchKeywordSliceReducer","requestTrackerSlice","requestTrackerSliceReducer","requestTrackerActions","useStyles","makeStyles","createStyles","textTransform","margin","spacing","form","textAlign","formControl","display","maxWidth","width","actionBox","props","classes","dispatch","curUserAccountState","setUserAccountState","curUserAccountValidationState","setUserAccountValidationState","Typography","variant","component","align","className","noValidate","autoComplete","TextField","onChange","nextFirstName","currentTarget","helperText","nextLastName","nextEmail","nextPassword","nextConfirm","Box","Button","onClick","isValid","listBox","modalBox","modalContent","position","top","left","transform","backgroundColor","curUserAccountPhoneState","setUserAccountPhoneState","curUserAccountPhoneValidationState","setUserAccountPhoneValidationState","isNew","setNew","curModalOpen","setModalOpen","handleDeletePhoneClickEvent","getAttribute","handlePhoneItemClickEvent","targetPhoneId","targetPhone","curPrimaryId","RadioGroup","nextPrimePhoneId","List","ListItem","ListItemAvatar","Avatar","PhoneIphone","ListItemText","secondary","ListItemSecondaryAction","FormControlLabel","control","Radio","IconButton","edge","Delete","Modal","open","onClose","nextPhoneNumber","nextCountryCode","curUserAccountAddressState","setUserAccountAddressState","curUserAccountAddressValidationState","setUserAccountAddressValidationState","handleDeleteAddressClickEvent","handleAddressItemClickEvent","targetAddressId","targetAddress","curShippingId","setShippingId","curBillingId","setBillingId","checked","labelPlacement","Edit","nextAddress1","nextAddress2","nextCity","nextProvince","nextCountry","nextPostalCode","avatarBox","justifyContent","alignItems","avatar","height","boxShadow","shadows","btnBox","enqueueSnackbar","curFile","setFile","curFilePath","setFilePath","imageInputRef","src","root","DeleteForever","accept","multiple","hidden","ref","files","URL","createObjectURL","htmlFor","current","click","Image","avatarImage","Backup","gridBox","gridItem","flexGrow","media","paddingTop","marginTop","curAdminCompanyFormState","setAdminCompanyFormState","curAdminCompanyFormValidationState","setAdminCompanyFormValidationState","Card","CardHeader","titleTypographyProps","subheaderTypographyProps","subheader","CardContent","Grid","container","justify","item","sm","gutterBottom","nextCompanyName","multiline","rows","nextDescription","nextCompanyEmail","CardActions","disableSpacing","box","padding","card","gridContainer","fetchCategoryWithCacheActionCreator","fetchCategoryWithCacheActionTypeName","fetchCategoryActionCreator","fetchCategoryActionTypeName","postCategoryActionCreator","postCategoryActionTypeName","putCategoryActionCreator","putCategoryActionTypeName","deleteSingleCategoryActionCreator","deleteSingleCategoryActionTypeName","categorySlice","deleteCategoryActionCreator","merge","categorySliceReducer","categoryActions","categoryPaginationPageSlice","categoryPaginationPageSliceReducer","categoryPaginationPageActions","categoryPaginationLimitSlice","categoryPaginationLimitSliceReducer","categoryPaginationTotalPagesSlice","categoryPaginationTotalPagesSliceReducer","categoryPaginationTotalPagesActions","categoryPaginationTotalElementsSlice","categoryPaginationTotalElementsSliceReducer","categoryPaginationTotalElementsActions","subtitle","fontWeight","typography","fontWeightBold","txtFieldBase","nameInput","minWidth","descriptionInput","pathInput","productDateInput","curCategoryState","setCategoryState","curCategoryValidationState","setCategoryValidationState","handleSaveClickEvent","nextCategoryName","nextCategoryDescription","nextCategoryPath","dialog","flexShrink","zIndex","dialogPaper","dialogContentRoot","toolbar","mixins","toggleBtnBox","bottom","right","useTheme","fullScreen","useMediaQuery","breakpoints","down","toggleDialog","nextOpen","event","setFormOpen","childRef","Dialog","curFormOpen","DialogTitle","DialogContent","DialogActions","loadingBox","cardContentBox","curCategoryList","curCategory","setCategory","onEdit","onDelete","domains","curDeleteDialogOpen","setDeleteDialogOpen","curFetchCategoryStatus","FETCHING","CircularProgress","FAILED","AddCircle","columns","targetCategory","field","headerName","renderCell","params","RemoveCircle","pageSize","rowCount","onPageChange","param","nextPage","disableBackdropClick","disableEscapeKeyDown","dividers","totalProductCount","autoFocus","disabled","concat","ISORegex1","ISORegex2","a","exec","b","api","fetchUserActionCreator","fetchUserActionTypeName","fetchSingleUserActionTypeName","fetchSingleUserActionCreator","putUserActionCreator","postUserActionCreator","putUserActionTypeName","deleteSingleUserActionTypeName","deleteSingleUserActionCreator","postUserPhoneActionCreator","deleteUserActionCreator","postUserPhoneActionTypeName","putUserPhoneActionCreator","putUserPhoneActionTypeName","patchUserPhoneActionCreator","patchUserPhoneActionTypeName","deleteUserPhoneActionCreator","deleteUserPhoneActionTypeName","postUserAddressActionCreator","postUserAddressActionTypeName","putUserAddressActionCreator","putUserAddressActionTypeName","patchUserAddressActionCreator","patchUserAddressActionTypeName","deleteUserAddressActionCreator","deleteUserAddressActionTypeName","postUserAvatarImageActionCreator","postUserAvatarImageActionTypeName","deleteUserAvatarImageActionCreator","deleteUserAvatarImageActionTypeName","userSlice","updateUser","i","replacePhones","removePhone","replaceAddresses","removeAddress","userSliceReducer","userActions","userPaginationPageSlice","userPaginationPageSliceReducer","userPaginationPageActions","userPaginationLimitSlice","userPaginationLimitSliceReducer","userPaginationTotalPagesSlice","userPaginationTotalPagesSliceReducer","userPaginationTotalPagesActions","userPaginationTotalElementsSlice","userPaginationTotalElementsSliceReducer","userPaginationTotalElementsActions","userQuerySearchQuerySlice","userQuerySearchQuerySliceReducer","userQueryStartDateSlice","userQueryStartDateSliceReducer","userQueryStartDateActions","userQueryEndDateSlice","userQueryEndDateSliceReducer","userQueryEndDateActions","userQuerySortSlice","userQuerySortSliceReducer","userQuerySortActions","curAdminCustomerAddressState","setAdminCustomerAddressState","curAdminCustomerAddressValidationState","setAdminCustomerAddressValidationState","curAdminCustomerState","setAdminCustomerState","curAdminCustomerValidationState","setAdminCustomerValidationState","isPasswordShow","setPasswordShow","isConfirmShow","setConfirmShow","inputProps","endadornment","InputAdornment","onMouseDown","Visibility","VisibilityOff","curAdminCustomerPhoneState","setAdminCustomerPhoneState","curAdminCustomerPhoneValidationState","setAdminCustomerPhoneValidationState","getPrimaryPhoneId","stringify","orderDetailBox","readOnly","md","drawer","drawerPaper","paddingBottom","closeFormBox","Drawer","anchor","GetApp","Divider","index","render","other","role","curStartDate","curEndDate","p","M","utils","format","KeyboardButtonProps","userSortList","DATE_ASC","curSort","FormControl","FormLabel","tabBox","tabPanel","values","lg","tabRoot","curTabIndex","setTabIndex","a11yProps","AppBar","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","curUserList","curUserId","setUserId","curQueryString","curFetchCustomerStatus","status","method","url","defaultAdminLoginData","defaultAdminLoginValidationData","forgetPasswordBox","fetchOrderActionCreator","fetchOrderActionTypeName","fetchSingleOrderActionTypeName","fetchSingleOrderActionCreator","postOrderActionCreator","postOrderActionTypeName","putOrderActionTypeName","putOrderActionCreator","postOrderEventActionCreator","deleteSingleOrderActionCreator","deleteOrderActionCreator","postOrderEventActionTypeName","putOrderEventActionCreator","putOrderEventActionTypeName","deleteSingleOrderEventActionCreator","deleteSingleOrderEventActionTypeName","postSessionTimeoutOrderEventActionCreator","postSessionTimeoutOrderEventActionTypeName","orderSlice","updateOne","appendEvent","replace","deleteEvent","orderEvent","orderEventId","updateEvent","orderSliceReducer","orderActions","orderPaginationPageSlice","orderPaginationPageSliceReducer","orderPaginationPageActions","orderPaginationLimitSlice","orderPaginationLimitSliceReducer","orderPaginationTotalPagesSlice","orderPaginationTotalPagesSliceReducer","orderPaginationTotalPagesActions","orderPaginationTotalElementsSlice","orderPaginationTotalElementsSliceReducer","orderPaginationTotalElementsActions","orderQuerySearchQuerySlice","orderQuerySearchQuerySliceReducer","orderQueryOrderStatusSlice","orderQueryOrderStatusSliceReducer","orderQueryOrderStatusActions","orderQueryStartDateSlice","orderQueryStartDateSliceReducer","orderQueryStartDateActions","orderQueryEndDateSlice","orderQueryEndDateSliceReducer","orderQueryEndDateActions","orderQuerySortSlice","orderQuerySortSliceReducer","orderQuerySortActions","curOrderEventState","setOrderEventState","nextOrderEventOptions","nextMemberOrderEventOptions","nextAdminOrderEventOptions","select","nextOrderStatus","MenuItem","placeholder","nextNote","ADMIN","secondaryTail","addBtn","curOrderEvent","setOrderEvent","Timeline","latestOrderEvent","OrderStatusIcon","orderStatusObj","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Paper","elevation","targetOrderEvent","handleEditClick","handleDeleteClick","renderTimelineContent","Badge","flexWrap","cardHeader","details","productUnitPrice","productColor","alt","MoreVert","imagePath","flexDirection","headerIcon","content","textFieldBox","textField","orderNumber","startAdornment","Receipt","orderSortList","curOrderStatusList","curOrderStatus","curOrderList","curOrderId","setOrderId","curFetchOrderStatus","cost","fetchProductWithCacheActionTypeName","fetchProductWithCacheActionCreator","fetchProductActionCreator","fetchSingleProductWithCacheActionCreator","fetchProductActionTypeName","fetchSingleProductActionCreator","fetchSingleProductActionTypeName","fetchPublicProductActionCreator","fetchPublicProductActionTypeName","postProductActionCreator","postProductActionTypeName","putProductActionCreator","putProductActionTypeName","deleteSingleProductActionCreator","deleteSingleProductActionTypeName","postProductVariantActionCreator","deleteProductActionCreator","postProductVariantActionTypeName","putProductVariantActionCreator","putProductVariantActionTypeName","deleteSingleProductVariantActionCreator","deleteSingleProductVariantActionTypeName","productSlice","appendVariant","updateVariant","targetVariant","deleteVariant","productSliceReducer","productActions","productQuerySearchQuerySlice","productQuerySearchQuerySliceReducer","productQueryCategoryIdSlice","productQueryCategoryIdSliceReducer","productQueryCategoryIdActions","productQueryMinPriceSlice","productQueryMinPriceSliceReducer","productQueryMinPriceActions","productQueryMaxPriceSlice","productQueryMaxPriceSliceReducer","productQueryMaxPriceActions","productQueryReviewPointSlice","productQueryReviewPointSliceReducer","productQueryReviewPointActions","productQueryIsDiscountSlice","productQueryIsDiscountSliceReducer","productQueryIsDiscountActions","productQueryStartDateSlice","productQueryStartDateSliceReducer","productQueryStartDateActions","productQueryEndDateSlice","productQueryEndDateSliceReducer","productQueryEndDateActions","productQuerySortSlice","productQuerySortSliceReducer","productQuerySortActions","productPaginationPageSlice","productPaginationPageSliceReducer","productPaginationPageActions","productPaginationLimitSlice","productPaginationLimitSliceReducer","productPaginationLimitActions","productPaginationTotalPagesSlice","productPaginationTotalPagesSliceReducer","productPaginationTotalPagesActions","productPaginationTotalElementsSlice","productPaginationTotalElementsSliceReducer","productPaginationTotalElementsActions","productCurItemsSlice","productCurItemsSliceReducer","productCurItemsActions","imageInputRefs","handleTriggerClick","parseInt","handleFileChange","newFile","newPath","onUpdate","handleRemoveFileClick","onRemove","file","CardMedia","image","el","errorMsg","fontSize","subtitle2","productNameInput","productDescriptionInput","productPathInput","productPriceInput","productSizeInput","productCategoryInput","productNoteInput","curProductState","setProductState","curProductValidationState","setProductValidationState","categoryList","nextProductName","nextProductDescription","nextProductPath","nextCategoryId","nextCategory","nextProductBaseUnitPrice","parseFloat","InputProps","Checkbox","nextProductBaseDiscount","nextProductBaseDiscountPrice","nextState","renamedFile","newName","File","fileName","renameFile","nextProductNote","FavoriteBorder","checkedIcon","Favorite","nextProductPublic","curProduct","curCategoryId","curIsDiscount","contentBox","marks","curMinPrice","curMaxPrice","curPrices","setPrices","Slider","step","nextMinPrice","nextMaxPrice","valueLabelDisplay","getAriaValueText","curReviewPoint","Rating","precision","productSortList","ALPHABETIC_ASC","ALPHABETIC_DESC","PRICE_ASC","PRICE_DESC","curProductList","setProduct","curFetchProductStatus","unitPrice","discount","publish","count","targetProduct","Link","to","noteMsg","caption","smallCheckBox","verticalAlign","marginLeft","marginRight","targetProductId","URLSearchParams","search","curProductVariantState","setProductVariantState","curProductVariantValidationState","setProductVariantValidationState","curUnitPriceDisable","setUnitPriceDisable","productVariantSizeList","nextVariantUnitPrice","nextProductVariantUnitPriceDisable","onChangeComplete","hex","nextVariantSize","size","nextVariantStock","nextVariantWeight","endAdornment","nextVariantLength","nextVariantWidth","nextVariantHeight","nextProductVariantDiscount","nextProductVariantDiscountPrice","curProductVariant","setProductVariant","autoHeight","stock","soldCount","weight","fetchReviewWithCacheActionCreator","fetchReviewActionCreator","fetchReviewActionTypeName","postReviewActionTypeName","postReviewActionCreator","putReviewActionCreator","putReviewActionTypeName","deleteSingleReviewActionCreator","deleteSingleReviewActionTypeName","reviewSlice","deleteReviewActionCreator","reviewId","append","review","reviewSliceReducer","reviewActions","reviewPaginationPageSlice","reviewPaginationPageSliceReducer","reviewPaginationPageActions","reviewPaginationLimitSlice","reviewPaginationLimitSliceReducer","reviewPaginationTotalPagesSlice","reviewPaginationTotalPagesSliceReducer","reviewPaginationTotalPagesActions","reviewPaginationTotalElementsSlice","reviewPaginationTotalElementsSliceReducer","reviewPaginationTotalElementsActions","reviewQuerySearchQuerySlice","reviewQuerySearchQuerySliceReducer","reviewQueryReviewPointSlice","reviewQueryReviewPointSliceReducer","reviewQueryReviewPointActions","reviewQueryIsVerifiedSlice","reviewQueryIsVerifiedSliceReducer","reviewQueryIsVerifiedActions","reviewQueryStartDateSlice","reviewQueryStartDateSliceReducer","reviewQueryStartDateActions","reviewQueryEndDateSlice","reviewQueryEndDateSliceReducer","reviewQueryEndDateActions","reviewQueryProductIdSlice","reviewQueryProductIdSliceReducer","reviewQueryUserIdSlice","reviewQueryUserIdSliceReducer","reviewQuerySortSlice","reviewQuerySortSliceReducer","reviewQuerySortActions","curReviewState","setReviewState","curReviewValidationState","setReviewValidationState","nextReviewPoint","nextReviewTitle","nextReviewDescription","Switch","nextReviewIsVerified","reviewSortList","REVIEW_POINT_ASC","REVIEW_POINT_DESC","curIsVerified","curReviewList","curReviewId","setReviewId","curFetchReviewStatus","isVerify","getSingleAuthFetchStatusSlice","getSingleAuthFetchStatusSliceReducer","putAuthFetchStatusSlice","putAuthFetchStatusSliceReducer","putAuthFetchStatusActions","postAuthPhoneFetchStatusSlice","postAuthPhoneFetchStatusSliceReducer","postAuthPhoneFetchStatusActions","putAuthPhoneFetchStatusSlice","putAuthPhoneFetchStatusSliceReducer","putAuthPhoneFetchStatusActions","patchAuthPhoneFetchStatusSlice","patchAuthPhoneFetchStatusSliceReducer","patchAuthPhoneFetchStatusActions","deleteAuthPhoneFetchStatusSlice","deleteAuthPhoneFetchStatusSliceReducer","deleteAuthPhoneFetchStatusActions","postAuthAddressFetchStatusSlice","postAuthAddressFetchStatusSliceReducer","postAuthAddressFetchStatusActions","putAuthAddressFetchStatusSlice","putAuthAddressFetchStatusSliceReducer","putAuthAddressFetchStatusActions","patchAuthAddressFetchStatusSlice","patchAuthAddressFetchStatusSliceReducer","patchAuthAddressFetchStatusActions","deleteAuthAddressFetchStatusSlice","deleteAuthAddressFetchStatusSliceReducer","deleteAuthAddressFetchStatusActions","postAuthAvatarImageFetchStatusSlice","postAuthAvatarImageFetchStatusSliceReducer","postAuthAvatarImageFetchStatusActions","deleteAuthAvatarImageFetchStatusSlice","deleteAuthAvatarImageFetchStatusSliceReducer","deleteAuthAvatarImageFetchStatusActions","putAuthCompanyFetchStatusSlice","putAuthCompanyFetchStatusSliceReducer","putAuthCompanyFetchStatusActions","fetchAuthOrderFetchStatusSlice","fetchAuthOrderFetchStatusSliceReducer","fetchAuthOrderFetchStatusActions","fetchSingleAuthOrderFetchStatusSlice","fetchSingleAuthOrderFetchStatusSliceReducer","fetchSingleAuthOrderFetchStatusActions","postAuthOrderEventFetchStatusSlice","postAuthOrderEventFetchStatusSliceReducer","curPutAuthFetchStatus","SUCCESS","goToNextStep","curShippingAddress","curBillingAddress","curCustomerAddressesFormState","setCustomerAddressesFormState","curCustomerAddressesFormValidationState","setCustomerAddressesFormValidationState","onShippingAddressClick","onBillingAddressClick","curPrimaryPhone","curCustomerPhonesFormState","setCustomerPhonesFormState","curCustomerPhonesFormValidationState","setCustomerPhonesFormValidationState","stripePromise","fetchCartItemActionCreator","fetchCartItemActionTypeName","postCartItemActionTypeName","postCartItemActionCreator","putCartItemActionTypeName","putCartItemActionCreator","deleteSingleCartItemActionTypeName","deleteSingleCartItemActionCreator","deleteCartItemActionTypeName","deleteCartItemActionCreator","cartItemSlice","cartItemId","deleteSelectedItemsByProduct","ele","deleteSelectedItems","cartItemSliceReducer","cartItemActions","resetCheckoutStateActionCreator","resetCheckoutStateActionTypeName","cartInputBox","btn","history","curCheckoutOrder","stripe","useStripe","elements","useElements","totalCost","CardElement","confirmCardPayment","payment_method","getElement","billing_details","line1","line2","postal_code","result","setPaymentAttempt","persist","goToStep","CheckoutStepEnum","CUSTOMER_BASIC_INFORMATION","paymentIntent","alignSelf","Elements","calcSubTotalPriceAmount","reduce","acc","calcSubTotalProductNumbers","curShippingCost","setShippingCost","response","text","CUSTOMER_CONTACT_INFORMATION","curOrderCriteria","isValidCustomerBasicInfo","isValidCustomerShippingAddress","isValidCustomerBillingAddress","curRequestStripeClientFetchStatus","ORDER_ITEMS","minHeight","up","btnRoot","ButtonGroup","nextCartItem","updatedCartItem","wrapperBox","heroImage","textBox","cardContent","section","overflow","moreBtnBox","curDomains","defaultForgotPasswordData","defaultForgotPasswordValidationData","formInput","curForgotPasswordState","setForgotPasswordState","curForgotPasswordValidationState","setForgotPasswordValidationState","DialogContentText","defaultMemberLoginData","defaultMemberLoginValidationData","cursorLink","cursor","img","AutoPlaySwipeableViews","items","curCheckBox","setCheckBox","axis","direction","onChangeIndex","enableMouseEvents","productImageId","Math","abs","MobileStepper","steps","activeStep","nextButton","prevActiveStep","KeyboardArrowLeft","KeyboardArrowRight","backButton","disableRipple","filterSingleVariant","tempProduct","fetchWishlistItemActionCreator","fetchWishlistItemActionTypeName","postWishlistItemActionCreator","postWishlistItemActionTypeName","patchWishlistItemActionCreator","patchWishlistItemActionTypeName","deleteSingleWishlistItemActionCreator","deleteSingleWishlistItemActionTypeName","deleteWishlistItemActionTypeName","deleteWishlistItemActionCreator","wishlistItemSlice","wishlistItemSliceReducer","wishlistItemActions","wishlistItemQuerySearchQuerySlice","wishlistItemQuerySearchQuerySliceReducer","wishlistItemQueryCategoryIdSlice","wishlistItemQueryMinPriceSlice","wishlistItemQueryMinPriceSliceReducer","wishlistItemQueryMinPriceActions","wishlistItemQueryMaxPriceSlice","wishlistItemQueryMaxPriceSliceReducer","wishlistItemQueryMaxPriceActions","wishlistItemQueryReviewPointSlice","wishlistItemQueryReviewPointSliceReducer","wishlistItemQueryReviewPointActions","wishlistItemQueryIsDiscountSlice","wishlistItemQueryIsDiscountSliceReducer","wishlistItemQueryIsDiscountActions","wishlistItemQueryStartDateSlice","wishlistItemQueryStartDateSliceReducer","wishlistItemQueryStartDateActions","wishlistItemQueryEndDateSlice","wishlistItemQueryEndDateSliceReducer","wishlistItemQueryEndDateActions","wishlistItemQuerySortSlice","wishlistItemQuerySortSliceReducer","wishlistItemQuerySortActions","wishlistItemPaginationPageSlice","wishlistItemPaginationPageSliceReducer","wishlistItemPaginationPageActions","wishlistItemPaginationLimitSlice","wishlistItemPaginationLimitSliceReducer","wishlistItemPaginationTotalPagesSlice","wishlistItemPaginationTotalPagesSliceReducer","wishlistItemPaginationTotalPagesActions","wishlistItemPaginationTotalElementsSlice","wishlistItemPaginationTotalElementsSliceReducer","wishlistItemPaginationTotalElementsActions","subtotalBox","controllerBox","productDescTitle","productDesc","productColorTitle","productColorBox","colorRadioGroup","colorFormLabel","sizeInput","detailNoteBox","detailNoteTitle","customBtnDisable","curSelectedColor","setSelectedColor","curSelectedSize","setSelectedSize","curVariant","setVariant","curQty","setQty","curAvailableColors","filterUniqueVariantSizes","curAvailableSizes","setAvailableSizes","nextAvailableVariants","nextAvailableSizes","nextVariant","nextColor","Select","nextProductSize","isExceedStock","averageReviewPoint","now","ribbon","border","textShadow","ribbonTopLeft","borderTopColor","borderLeftColor","pageBox","defaultMemberSignupData","defaultMemberSignupValidationData","onMoveToCartClick","startIcon","AddShoppingCart","wishlistItemSortList","appBar","background","gridItemRight","pointer","anchorEl","setAnchorEl","handleMenuClose","Toolbar","SentimentSatisfiedOutlined","Notifications","Menu","keepMounted","Boolean","isDownSm","navList","Icon","Dashboard","link","AccountCircle","Category","Shop","RateReview","SupervisedUserCircle","curAdminNavOpen","setAdminNavOpen","navSection","navItem","NavIcon","button","ListItemIcon","Apps","children","withAdminBasePage","WrappedComponent","toggleLeftNavMenuActionTypeName","toggleLeftNavMenuActionCreator","leftNavMenuSlice","close","toggle","leftNavMenuSliceReducer","leftNavMenuActions","rightNavMenuSlice","rightNavMenuSliceReducer","searchModalSlice","searchModalSliceReducer","cartModalSlice","cartModalSliceReducer","cartModalActions","menuItem","curNumberOfCartItems","badgeContent","menuItemList","isLogout","isMdUp","handleDropDownMenuCloseClickEvent","handleLogout","preventDefault","linkProps","GuestHeaderMenuItem","Autocomplete","freeSolo","disableClearable","options","renderInput","Search","footer","columnOne","columnTwo","columnThree","parag","linkBox","policyLinkBox","policyLink","href","Facebook","Instagram","Twitter","YouTube","AlternateEmail","curCartItems","toggleDrawer","overflowY","closeBtn","curCartOpen","ModalProps","Cancel","Container","disableGutters","withBasePage","formEmail","formTitle","curContactFormState","setContactFormState","curContactFormValidationState","setContactFormValidationState","nextTitle","AccountVerifyStatusEnum","verificationToken","PROCESSING","curStatus","setStatus","SUCCEEDED","FAILED_SINCE_NO_LOGIN","FAILED_SINCE_INVALID_TOKEN","FAILED_SINCE_OTHER_REASON","defaultResetPasswordData","defaultResetPasswordValidationData","curOrders","ShoppingBasket","calcOrderTotalItemNumber","showFirstButton","showLastButton","routesData","curPreviousUrl","curForgotPasswordDialogOpen","setForgotPasswordDialogOpen","curMemberLoginState","setMemberLoginState","curMemberLoginValidationState","setMemberLoginValidationState","headers","loggedInUser","nextDest","curAdminLoginState","setAdminLoginState","curAdminLoginValidationState","setAdminLoginValidationState","curMemberSignupState","setMemberSignupState","curMemberSignupValidationState","setMemberSignupValidationState","forgotPasswordToken","curResetPasswordState","setResetPasswordState","curResetPasswordValidationState","setResetPasswordValidationState","token","curWishlistItems","handleMoveToCartClick","curOrder","commonRoutesData","curQuery","curPagination","Pagination","timer","setActiveStep","valueOf","goToPrevStep","handleSessionTimeout","sessionTime","curPostOrderFetchStatus","isSessionTimeoutSent","setTimeout","clearTimeout","isPaymentAttempt","Stepper","orientation","Step","StepLabel","StepContent","location","allRoutesData","curUrl","setUrl","listen","pathname","previousValue","route","exact","closeSnackbar","curMessage","HighlightOff","getCartItemFetchStatusSlice","getCartItemFetchStatusSliceReducer","getCartItemFetchStatusActions","postCartItemFetchStatusSlice","postCartItemFetchStatusSliceReducer","postCartItemFetchStatusActions","putCartItemFetchStatusSlice","putCartItemFetchStatusSliceReducer","putCartItemFetchStatusActions","deleteSingleCartItemFetchStatusSlice","deleteSingleCartItemFetchStatusSliceReducer","deleteSingleCartItemFetchStatusActions","deleteCartItemFetchStatusSlice","deleteCartItemFetchStatusSliceReducer","deleteCartItemFetchStatusActions","getCategoryFetchStatusSlice","getCategoryFetchStatusSliceReducer","getCategoryFetchStatusActions","postCategoryFetchStatusSlice","postCategoryFetchStatusSliceReducer","postCategoryFetchStatusActions","putCategoryFetchStatusSlice","putCategoryFetchStatusSliceReducer","putCategoryFetchStatusActions","deleteSingleCategoryFetchStatusSlice","deleteSingleCategoryFetchStatusSliceReducer","deleteSingleCategoryFetchStatusActions","getOrderFetchStatusSlice","getOrderFetchStatusSliceReducer","getOrderFetchStatusActions","getSingleOrderFetchStatusSlice","getSingleOrderFetchStatusSliceReducer","postOrderFetchStatusSlice","postOrderFetchStatusSliceReducer","postOrderFetchStatusActions","patchOrderFetchStatusSlice","putOrderFetchStatusSlice","putOrderFetchStatusSliceReducer","putOrderFetchStatusActions","deleteSingleOrderFetchStatusSlice","deleteSingleOrderFetchStatusSliceReducer","deleteOrderFetchStatusSlice","postOrderEventFetchStatusSlice","postOrderEventFetchStatusSliceReducer","postOrderEventFetchStatusActions","putOrderEventFetchStatusSlice","putOrderEventFetchStatusSliceReducer","putOrderEventFetchStatusActions","deleteSingleOrderEventFetchStatusSlice","deleteSingleOrderEventFetchStatusSliceReducer","deleteSingleOrderEventFetchStatusActions","postSessionTimeoutOrderEventFetchStatusSlice","postSessionTimeoutOrderEventFetchStatusSliceReducer","postSessionTimeoutOrderEventFetchStatusActions","getProductFetchStatusSlice","getProductFetchStatusSliceReducer","getProductFetchStatusActions","getPublicProductFetchStatusSlice","getPublicProductFetchStatusSliceReducer","getPublicProductFetchStatusActions","getSingleProductFetchStatusSlice","getSingleProductFetchStatusSliceReducer","postProductFetchStatusSlice","postProductFetchStatusSliceReducer","postProductFetchStatusActions","patchProductFetchStatusSlice","putProductFetchStatusSlice","putProductFetchStatusSliceReducer","putProductFetchStatusActions","deleteSingleProductFetchStatusSlice","deleteSingleProductFetchStatusSliceReducer","deleteSingleProductFetchStatusActions","deleteProductFetchStatusSlice","postProductVariantFetchStatusSlice","postProductVariantFetchStatusSliceReducer","postProductVariantFetchStatusActions","putProductVariantFetchStatusSlice","putProductVariantFetchStatusSliceReducer","putProductVariantFetchStatusActions","deleteSingleProductVariantFetchStatusSlice","deleteSingleProductVariantFetchStatusSliceReducer","deleteSingleProductVariantFetchStatusActions","getReviewFetchStatusSlice","getReviewFetchStatusSliceReducer","getReviewFetchStatusActions","postReviewFetchStatusSlice","postReviewFetchStatusSliceReducer","postReviewFetchStatusActions","putReviewFetchStatusSlice","putReviewFetchStatusSliceReducer","putReviewFetchStatusActions","deleteSingleReviewFetchStatusSlice","deleteSingleReviewFetchStatusSliceReducer","deleteSingleReviewFetchStatusActions","getUserFetchStatusSlice","getUserFetchStatusSliceReducer","getUserFetchStatusActions","getSingleUserFetchStatusSlice","getSingleUserFetchStatusSliceReducer","postUserFetchStatusSlice","postUserFetchStatusSliceReducer","patchUserFetchStatusSlice","patchUserFetchStatusSliceReducer","putUserFetchStatusSlice","putUserFetchStatusSliceReducer","putUserFetchStatusActions","deleteSingleUserFetchStatusSlice","deleteSingleUserFetchStatusSliceReducer","deleteSingleUserFetchStatusActions","deleteUserFetchStatusSlice","postUserPhoneFetchStatusSlice","postUserPhoneFetchStatusSliceReducer","postUserPhoneFetchStatusActions","putUserPhoneFetchStatusSlice","putUserPhoneFetchStatusSliceReducer","putUserPhoneFetchStatusActions","patchUserPhoneFetchStatusSlice","patchUserPhoneFetchStatusSliceReducer","patchUserPhoneFetchStatusActions","deleteUserPhoneFetchStatusSlice","deleteUserPhoneFetchStatusSliceReducer","deleteUserPhoneFetchStatusActions","postUserAddressFetchStatusSlice","postUserAddressFetchStatusSliceReducer","postUserAddressFetchStatusActions","putUserAddressFetchStatusSlice","putUserAddressFetchStatusSliceReducer","putUserAddressFetchStatusActions","patchUserAddressFetchStatusSlice","patchUserAddressFetchStatusSliceReducer","patchUserAddressFetchStatusActions","deleteUserAddressFetchStatusSlice","deleteUserAddressFetchStatusSliceReducer","deleteUserAddressFetchStatusActions","postUserAvatarImageFetchStatusSlice","postUserAvatarImageFetchStatusSliceReducer","postUserAvatarImageFetchStatusActions","deleteUserAvatarImageFetchStatusSlice","deleteUserAvatarImageFetchStatusSliceReducer","deleteUserAvatarImageFetchStatusActions","getWishlistItemFetchStatusSlice","getWishlistItemFetchStatusSliceReducer","getWishlistItemFetchStatusActions","postWishlistItemFetchStatusSlice","postWishlistItemFetchStatusSliceReducer","postWishlistItemFetchStatusActions","patchWishlistItemFetchStatusSlice","patchWishlistItemFetchStatusSliceReducer","patchWishlistItemFetchStatusActions","deleteSingleWishlistItemFetchStatusSlice","deleteSingleWishlistItemFetchStatusSliceReducer","deleteSingleWishlistItemFetchStatusActions","deleteWishlistItemFetchStatusSlice","deleteWishlistItemFetchStatusSliceReducer","deleteWishlistItemFetchStatusActions","stripeClientSecretSlice","requestStripeClientSecretActionCreator","stripeClientSecretSliceReducer","stripeClientSecretActions","checkoutOrderSlice","checkoutOrderSliceReducer","checkoutOrderActions","rootReducer","deleteAuthAddressWorker","curAuth","deleteAuthAvatarImageWorker","deleteAuthPhoneWorker","patchAuthAddressWorker","patchAuthPhoneWorker","postAuthAddressWorker","postAuthAvatarImageWorker","FormData","postAuthPhoneWorker","putAuthAddressWorker","putAuthCompanyWorker","putAuthPhoneWorker","putAuthWorker","deleteCartItemWorker","deleteSingleCartItemWorker","fetchCartItemWorker","postCartItemWorker","tempId","newEntity","putCartItemWorker","deleteSingleCategoryWorker","fetchCategoryWorker","apiUrl","pageable","normalizedData","entities","pageNumber","postCategoryWorker","putCategoryWorker","requestUrlCheckWorker","targetUrl","requestTrackerState","hasOwnProperty","fetchCategoryWithCacheWorker","ids","fetchProductWithCacheWorker","targetRequestTrackerBase","leftNavMenuWorkerWorker","deleteSingleOrderEventWorker","fetchOrderWorker","fetchSingleOrderWorker","postOrderEventWorker","postOrderWorker","clientSecret","postSessionTimeoutOrderEventWorker","putOrderEventWorker","putOrderWorker","deleteSingleProductVariantWorker","deleteSingleProductWorker","fetchProductWorker","fetchPublicProductWorker","fetchSingleProductWorker","postProductVariantWorker","productFormDataGenerator","formData","Blob","postProductWorker","putProductVariantWorker","putProductWorker","deleteSingleReviewWorker","fetchReviewWorker","postReviewWorker","putReviewWorker","deleteSingleUserWorker","deleteUserAddressWorker","deleteUserAvatarImageWorker","deleteUserPhoneWorker","fetchSingleUserWorker","fetchUserWorker","patchUserAddressWorker","patchUserPhoneWorker","postUserAddressWorker","postUserAvatarImageWorker","postUserPhoneWorker","putUserAddressWorker","putUserPhoneWorker","putUserWorker","deleteSingleWishlistItemWorker","deleteWishlistItemWorker","fetchWishlistItemWorker","patchWishlistItemWorker","targetWishlistItem","filteredProduct","postWishlistItemWorker","fetchAuthOrderWorker","postAuthOrderEventWorker","fetchSingleAuthOrderWorker","leftNavMenuWatcher","fetchReviewWatcher","postReviewWatcher","putReviewWatcher","deleteSingleReviewWatcher","fetchCartItemWatcher","postCartItemWatcher","putCartItemWatcher","deleteSingleCartItemWatcher","deleteCartItemWatcher","fetchWishlistItemWatcher","postWishlistItemWatcher","patchWishlistItemWatcher","deleteSingleWishlistItemWatcher","deleteWishlistItemWatcher","fetchCategoryWatcher","postCategoryWatcher","putCategoryWatcher","deleteSingleCategoryWatcher","fetchUserWatcher","fetchSingleUserWatcher","putUserWatcher","deleteSingleUserWatcher","postUserAvatarImageWatcher","deleteUserAvatarImageWatcher","postUserPhoneWatcher","putUserPhoneWatcher","patchUserPhoneWatcher","deleteUserPhoneWatcher","postUserAddressWatcher","putUserAddressWatcher","patchUserAddressWatcher","deleteUserAddressWatcher","fetchOrderWatcher","fetchSingleOrderWatcher","postOrderWatcher","putOrderWatcher","postOrderEventWatcher","putOrderEventWatcher","deleteSingleOrderEventWatcher","postSessionTimeoutOrderEventWatcher","fetchProductWatcher","fetchPublicProductWatcher","fetchSingleProductWatcher","postProductWatcher","putProductWatcher","deleteSingleProductWatcher","postProductVariantWatcher","putProductVariantWatcher","deleteSingleProductVariantWatcher","putAuthWatcher","postAuthAvatarImageWatcher","deleteAuthAvatarImageWatcher","postAuthPhoneWatcher","putAuthPhoneWatcher","patchAuthPhoneWatcher","deleteAuthPhoneWatcher","postAuthAddressWatcher","putAuthAddressWatcher","patchAuthAddressWatcher","deleteAuthAddressWatcher","putAuthCompanyWatcher","fetchAuthOrderWatcher","fetchSingleAuthOrderWatcher","postAuthOrderEventWatcher","fetchProductWithCacheWatcher","fetchCategoryWithCacheWatcher","sagaMiddleware","middleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","apply","subscribe","getState","setItem","run","sagas","saga","Index","ThemeProvider","maxSnack","CssBaseline","document","getElementById","module","exports"],"mappings":"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","file":"app.be6bedb41b1af546ec92.js","sourcesContent":["import { UserType } from \"domain/user/types\";\nimport { DomainPaginationType } from \"states/types\";\n\nexport enum FetchStatusEnum {\n  INITIAL = \"INITIAL\",\n  FETCHING = \"FETCHING\",\n  FAILED = \"FAILED\",\n  SUCCESS = \"SUCCESS\",\n}\n\nexport declare type SortType = {\n  key: string\n  label: string\n}\n\nexport type RequestTrackerBaseType = {\n  ids: string[]\n  // this is necessary for keep track of the pagination info about this request\n  // ?? do I really need this one??\n  pagination?: DomainPaginationType\n}\n\nexport declare type RequestTrackerType  = {\n  [key: string]: RequestTrackerBaseType\n}\n\n// TODO: jwt + cookie HttpOnly implmenetation\nexport enum UserTypeEnum {\n  GUEST = \"GUEST\",\n  MEMBER = \"MEMBER\",\n  ADMIN = \"ADMIN\",\n}\n\nexport declare type AuthType = {\n  isLoggedIn: boolean\n  userType: UserTypeEnum\n  user: UserType\n}\n\n\nexport enum MessageTypeEnum {\n  INITIAL = \"initial\", // no message to show\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  INFO = 'info',\n}\n\nexport declare type MessageStateType = {\n  id: string\n  type: MessageTypeEnum\n  message: string\n  persist?: boolean\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport { nanoid } from 'nanoid'\n\n\nexport const dateFormatOption = { year: 'numeric', month: 'long', day: 'numeric' }\n\nexport function getCookie(name: string): string {\n  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n  if (match) return match[2];\n  else return null;\n}\n\nexport function generateFileWithUuidv4(targetFile: File) {\n  const blob: Blob = targetFile.slice(0, targetFile.size, targetFile.type)\n  return new File([blob], targetFile.name.replace(/.*(?=\\.)/, uuidv4()), { type: targetFile.type })\n}\n\nexport function getUuidv4() {\n  return uuidv4()\n}\n\nexport function getTimeOneHourAfter() {\n  const dt = new Date();\n  dt.setHours(dt.getHours() + 1)\n  return dt.getTime()\n}\n\n/**\n * check two object has the same properties (could have different values for the same properties)\n *  - just check two object has same form (properties) or not\n **/\nexport function isSameObjectForm(a: object, b: object): boolean {\n  let isSame = true\n  Object.keys(a).forEach((key: string) => {\n    if (!b.hasOwnProperty(key)) {\n      isSame = false\n    }\n  })\n  return isSame\n}\n\nexport function transformObject<A extends object, B extends object>(original: A, destination: B): B {\n  if (!isSameObjectForm(original, destination)) {\n\n  }\n  else return destination\n}\n\n/**\n * be careful !!!!\n * January is 0\n * December is 11\n **/\nexport const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nexport function generateQueryString(target: { [key: string]: any }): string {\n  const keys = Object.keys(target)\n  let queryString = \"?\"\n  keys.forEach((key: string) => {\n    if (target[key]) {\n      if (isDateObject(target[key])) {\n        queryString += key + \"=\" + (target[key] as Date).toISOString() + \"&\"\n      } else if (key == \"categoryId\" && target[key] == 0) {\n        /**\n         * if category=0 (e.g., all category), we not gonna append this query string.\n         **/\n      } else {\n        queryString += key + \"=\" + target[key] + \"&\"\n      }\n    }\n  })\n  queryString = queryString.substring(0, queryString.length - 1)\n  return queryString\n}\n\nexport function isDateObject(variable: any): boolean {\n  return Object.prototype.toString.call(variable) === '[object Date]'\n}\n\nexport function toStringToDateToString(dateStr: string): string {\n  return new Date(dateStr).toLocaleDateString(\"en-US\", dateFormatOption)\n}\n\nexport function toDateString(date: Date): string {\n  console.log(date instanceof Date);\n  return date.toLocaleDateString(\"en-US\", dateFormatOption)\n}\n\nexport function getRandomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function getLatestDate(date1: Date, date2: Date) {\n  return (date1.getDate() < date2.getDate()) ? date2 : date1\n}\n\n/**\n * scroll features (onScroll)\n *\n *  - DEPRECIATED!! dont use this\n *\n **/\n\nexport const getPercentageOfScrollPosition: (curScrollPos: number, maxScrollPos: number, minScrollPos: number) => number = (curScrollPos, maxScrollPos, minScrollPos) => {\n  return ((curScrollPos - minScrollPos) * 100) / (maxScrollPos - minScrollPos)\n}\n\n/**\n * should return the value from \"unitConsistentY = (inner element height) - (unit scroll top (= unitScrollPercentage * 10))\"\n **/\nexport const calcUnitConsistentY: (innerElementHeight: number, unitScrollPercentage: number, elId: number) => number = (innerElementHeight, unitScrollPercentage, elId) => {\n  return -1 * elId * (innerElementHeight - (unitScrollPercentage * 10) + 18)\n}\n\nexport const calcCurGapX: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number, unitGapX: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length, unitGapX) => {\n  // when position Y of this element is above than cur scroll position, we need to decrease the gap scale \n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return -1 * ((unitGapX / unitScrollPercentage) * curScrollPercentage) + (elId * unitGapX)\n  } else {\n    // when position Y of this element is below than cur scroll position, we need to increase the gap scale\n    return ((unitGapX / unitScrollPercentage) * curScrollPercentage) - (elId * unitGapX)\n  }\n}\n\nexport const calcCurCirleGapX: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, circleGapXCoefficient?: number, radius?: number) => number = (curScrollPercentage, elId, unitScrollPercentage, circleGapXCoefficient = 1, radius = 100) => {\n  return (circleGapXCoefficient) * ((-1 * radius) + Math.sqrt(-1 * Math.pow(curScrollPercentage - (elId * unitScrollPercentage), 2) + Math.pow(radius, 2)))\n}\n\nexport const calcCurScaleGap: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length) => {\n\n  // when position Y of this element is above than cur scroll position, we need to decrease the gap scale \n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return (-1 / 100) * curScrollPercentage + (1 + (elId * (1 / (length - 1))))\n  } else {\n    // when position Y of this element is below than cur scroll position, we need to increase the gap scale\n    return (1 / 100) * curScrollPercentage + (1 - (elId * (1 / (length - 1))))\n  }\n}\n\nexport const calcCurVisibility: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, visibleUnitElementNumber: number) => boolean = (curScrollPercentage, elId, unitScrollPercentage, visibleUnitElementNumber) => {\n\n  if ((curScrollPercentage + (visibleUnitElementNumber * unitScrollPercentage) >= (elId * unitScrollPercentage)) && (curScrollPercentage - (visibleUnitElementNumber * unitScrollPercentage) <= (elId * unitScrollPercentage))) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport const calcCurOverlapY: (curScrollPercentage: number, elId: number, unitScrollPercentage: number, length: number, unitOverlapYCoefficient: number) => number = (curScrollPercentage, elId, unitScrollPercentage, length, unitOverlapYCoefficient) => {\n\n  // curScrollPosition percentage is above than its unit scroll percentage, we need to increase the the gap\n  // also, reverse the sign (+ -> -) for 'translate(-xxpx)'\n  if ((unitScrollPercentage * elId) <= curScrollPercentage) {\n    return unitOverlapYCoefficient * Math.pow((curScrollPercentage - (unitScrollPercentage * elId)), 2)\n  } else {\n    // curScrollPosition percentage is less than its unit scroll percentage, we need to decrease the the gap\n    return (-1) * unitOverlapYCoefficient * Math.pow((curScrollPercentage - (unitScrollPercentage * elId)), 2)\n  }\n}\n\n/**\n * new scroll elements on circle feature (onWheel)\n *\n **/\n\n/**\n * calc the scale of current element. \n *\n *  - if the deg of the element == 0 mod 360, scale = 1\n *  - if the deg of the element == 180 mod 360, scale = 0\n *\n **/\nexport const calcScale: (deg: number, targetZeroDeg?: number) => number = (deg, targetZeroDeg = 90) => {\n\n  //const degModAbs = Math.abs(deg % 360)\n  //const scaleRangeAbs = Math.abs((degModAbs - targetZeroDeg) / 180)\n  //return scaleRangeAbs\n\n  const scale = 1 / 2 * Math.cos(convertDegToRadian(deg + targetZeroDeg)) + 1 / 2\n  if (scale < 1 / 4) return 1 / 4\n  return scale\n}\n\n/**\n * calc z-index of the current element\n *\n *  - reuse 'calcScale' since it has the same logic\n *\n **/\nexport const calcZIndex: (deg: number) => number = (deg) => {\n\n  const scaleValue = calcScale(deg);\n\n  /**\n   * scale value must around 8750 (this is the z-index of icon at the center)\n   *\n   *  - 0 <= scaleValue * 100 <= 100\n   *  - 8700 <= (scalevalue * 100 + 8700) <= 8800\n   *\n   **/\n  return Math.round(scaleValue * 100 + 8700)\n}\n\n/**\n * make the element visible when followings:\n *  - (+): deg < 90 and deg > 270\n *  - (-): -90 > deg and -270 < deg\n *\n *  => make this visible only when the element comes in the right side of circle\n **/\nexport const calcVisibility: (deg: number) => boolean = (deg) => {\n\n  const degModAbs = Math.abs(deg % 360)\n  if (degModAbs < 90 || degModAbs > 270) return true;\n  return false;\n}\n\nexport const calcCenterPosX: (offsetLeft: number, clientWidth: number) => number = (offsetLeft, clientWidth) => {\n  // overflow when calc actual centerX so return 0 instead\n  return (clientWidth / 2)\n  //return (clientWidth / 3)\n  //return 0\n}\n\nexport const calcCenterPosY: (offsetTop: number, clientHeigt: number) => number = (offsetTop, clientHeigt) => {\n  // put extra in order to make it center. (e.g., subtract half height of the element size)\n  return (clientHeigt / 2)\n  //return (clientHeigt / 2) - 100;\n}\n\nexport const calcCurPosX: (elId: number, r: number, unitDegree: number, alphaDeg?: number) => number = (elId, r, unitDegree, alphaDeg) => {\n  return r * Math.cos(convertDegToRadian((unitDegree * elId) + alphaDeg))\n}\n\nexport const calcCurPosY: (elId: number, r: number, unitDegree: number, alphaDeg?: number) => number = (elId, r, unitDegree, alphaDeg) => {\n  // need to make it 'minus' since y asix is the opposite to math\n  return (-1) * r * Math.sin(convertDegToRadian((unitDegree * elId) + alphaDeg))\n}\n\nexport const convertDegToRadian: (deg: number) => number = (deg) => {\n  return deg * (Math.PI / 180)\n}\n\n/**\n * calc radiusWidth of ellipse\n *\n **/\nexport const calcRadiusWidth: (maxWidth: number) => number = (maxWidth) => {\n  return maxWidth * 0.7 / 2\n}\n\n/**\n * calc radiusHeight of ellipse\n *\n **/\nexport const calcRadiusHeight: (maxHeight: number) => number = (maxHeight) => {\n  return maxHeight * 0.3 / 2\n}\n\n/**\n * ellipse formula\n *\n **/\nexport const calcCurEllipsePosX: (elId: number, radiusWidth: number, radiusHeight: number, unitDegree: number, alphaDeg?: number) => number = (elId, radiusWidth, radiusHeight, unitDegree, alphaDeg) => {\n  // need to separate for + and -\n\n  const curDeg = (unitDegree * elId) + alphaDeg\n  const curY = radiusHeight * Math.sin(convertDegToRadian(curDeg)) // y = b * sin(theta)\n  return radiusWidth * Math.cos(convertDegToRadian(curDeg))\n}\n\nexport const calcCurEllipsePosY: (elId: number, radiusWidth: number, radiusHeight: number, unitDegree: number, alphaDeg?: number) => number = (elId, radiusWidth, radiusHeight, unitDegree, alphaDeg) => {\n  // need to separate for + and -\n  const curDeg = (unitDegree * elId) + alphaDeg\n  const curX = radiusWidth * Math.cos(convertDegToRadian(curDeg)) // y = a * cos(theta)\n  // since browser x-y asix is the oppsite to math, change sign (- & +)\n  return - radiusHeight * Math.sin(convertDegToRadian(curDeg))\n}\n\n/**\n *\n * async for each\n *\n *  - DON'T use normal forEach. it does not work.\n *\n *  - use this below.\n *\n *  - ref: https://gist.github.com/Atinux/fd2bcce63e44a7d3addddc166ce93fb2\n *\n **/\nexport const asyncForEach = async (array: any[], callback: (...args: any[]) => any) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array)\n  }\n}\n\n/**\n * empty a value of all properties of a nested object\n *\n * NOTE: this makes array empty string, so if you have need to go into elements in the array and make it empty, you need to fix this.\n *\n **/\nexport const emptyNestedObject: (obj: Record<string, any>) => Record<string, any> = (obj) => {\n  Object.keys(obj).forEach((key: string) => {\n    console.log(key)\n    if (\n      obj[key] &&  // prevent 'cannot convert undefined / null to object error\n      Object.prototype.toString.call(obj[key]) !== '[object Date]' && // check current value is date object \n      // check if it is array if so go to 'else'\n      !Array.isArray(obj[key]) &&\n      typeof obj[key] === 'object' // for nested object\n    ) {\n      emptyNestedObject(obj[key])\n    } else {\n      obj[key] = \"\"\n    }\n  })\n\n  return obj\n}\n\n/**\n * formatter\n **/\n\n// price (currency)\nexport const cadCurrencyFormat: (amount: number) => string = (amount) => {\n  return amount.toLocaleString(\"ca-CA\", {\n    style: 'currency',\n    currency: \"CAD\",\n  });\n}\n\n/**\n * request\n **/\nexport const isSuccessCode: (code: number) => boolean = (code) => {\n  return (code >= 200 || code <= 299)\n}\n\n/**\n * \n **/\nexport function iterateObjectRecursively(obj: Record<string, any>, callback: (key: string, value: any) => any) {\n\n  Object.keys(obj).forEach(key => {\n\n    if (obj[key] && typeof obj[key] === 'object') {\n      iterateObjectRecursively(obj[key], callback)\n    }\n\n    obj[key] = callback(key, obj[key]);\n  })\n\n}\n\n/**\n * temp id generate (only used in front-end and don't send it to backend)\n *\n * - or refactor to use this nanoid (https://www.npmjs.com/package/nanoid) and set id at the front-end and send it to backend and save it in db.\n *\n * - nanoid: smaller (21 symbols), faster (60% faster than UUID) and almost same safeer than UUID (36 symobols).\n *\n **/\nexport function getNanoId(): string {\n  return nanoid();\n}\n\n\n/**\n * formData generator\n *\n * - need to test\n *\n * - ref: https://gist.github.com/ghinda/8442a57f22099bdb2e34\n **/\nexport function generateObjectFormData(input: any, form?: FormData, namespace?: string): FormData {\n\n  const fd = form || new FormData();\n  let formKey;\n  for (let property in input) {\n    if (input.hasOwnProperty(property)) {\n      if (namespace) {\n        formKey = namespace + \"[\" + property + \"]\";\n      } else {\n        formKey = property;\n      }\n      if (\n        typeof input[property] === \"object\" &&\n        !(input[property] instanceof File) &&\n        input[property] !== null\n      ) {\n        generateObjectFormData(input[property], fd, property);\n      } else {\n        if (input[property] !== false) {\n          fd.append(formKey, input[property]);\n        }\n      }\n    }\n  }\n  return fd;\n\n}\n\n/**\n * rename file.\n *\n *  - assuming that newName does not include extension.\n *\n *  - extract the extension from the original file and append it to new file name.\n **/\nexport function renameFile(file: File, newName: string): File {\n  return new File([file], newName + \".\" + extractExtension(file.name), { type: file.type});\n}\n\n/**\n * extract file extension from a given file\n **/\nexport function extractExtension(fileName: string): string {\n  const re = /(?:\\.([^.]+))?$/;\n  return re.exec(fileName)[1];\n}\n","import { UserTypeEnum } from \"src/app\";\nimport { ReviewType } from \"domain/review/type\";\nimport { OrderType } from \"domain/order/types\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { getNanoId } from \"src/utils\";\n\nexport declare type UserPhoneType = {\n  phoneId?: string\n  phoneNumber: string\n  countryCode: string\n  isSelected: boolean\n}\n\nexport declare type UserAddressType = {\n  addressId?: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n  isBillingAddress: boolean\n  isShippingAddress: boolean\n}\n\nexport declare type AdminCompanyType = {\n  companyId: string\n  companyName: string\n  companyDescription: string\n  companyEmail: string\n  phoneNumber: string\n  countryCode: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n}\n\nexport declare type UserTypeType = {\n  userTypeId?: string,\n  userType: UserTypeEnum,\n}\n\nexport const guestUserType : UserTypeType = {\n  userType: UserTypeEnum.GUEST\n}\n\nexport declare type UserType = {\n  userId?: string\n  firstName: string\n  lastName: string\n  email: string\n  avatarImagePath: string\n  addresses: UserAddressType[]\n  phones: UserPhoneType[]\n  userType: UserTypeType\n  reviews: ReviewType[]\n  orders: OrderType[]\n  cartItems: CartItemType[]\n  companies?: AdminCompanyType[]\n}\n\n// criteira\nexport declare type UserCriteria = {\n  userId?: string\n  firstName: string\n  lastName: string\n  email: string\n  password?: string\n}\n\nexport declare type UserPhoneCriteria = {\n  phoneId?: string\n  isSelected: boolean\n  phoneNumber: string\n  countryCode: string\n}\n\nexport declare type UserAddressCriteria = {\n  addressId?: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n  isBillingAddress: boolean\n  isShippingAddress: boolean\n}\n\nexport declare type UserCompanyCriteria = {\n  companyId: string\n  companyName: string\n  companyDescription: string\n  companyEmail: string\n  phoneNumber: string\n  countryCode: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n}\n\n// empty\n\n// state \nexport const defaultUser: UserType = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  avatarImagePath: \"\",\n  addresses: [],\n  phones: [],\n  reviews: [],\n  orders: [],\n  cartItems: [],\n  userType: guestUserType, \n}\n\n// form & input \nexport declare type UserBasicAccountDataType = {\n  firstName: string\n  lastName: string\n  email: string\n  password: string\n  confirm: string\n}\n\nexport declare type UserBasicAccountValidationDataType = {\n  firstName?: string\n  lastName?: string\n  email?: string\n  password?: string\n  confirm?: string\n}\n\nexport const defaultUserBasicAccountData = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirm: \"\"\n}\n\nexport const defaultUserBasicAccountValidationData = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirm: \"\"\n}\n\n// customer phone\nexport declare type CustomerPhonesFormDataType = {\n  phoneId?: string\n  phoneNumber: string\n  countryCode: string\n  isSelected: boolean\n}\n\nexport const generateDefaultCustomerPhonesFormData: () => CustomerPhonesFormDataType = () => {\n  return {\n    phoneId: getNanoId(),\n    phoneNumber: \"\",\n    countryCode: \"\",\n    isSelected: false,\n  }\n}\n\nexport declare type CustomerPhonesFormValidationDataType = {\n  phoneId?: string\n  phoneNumber?: string\n  countryCode?: string\n  isSelected?: string\n}\n\nexport const defaultUserAccountValidationPhoneData: CustomerPhonesFormValidationDataType = {\n  phoneId: \"\",\n  phoneNumber: \"\",\n  countryCode: \"\",\n  isSelected: \"\",\n}\n\n// customer address\nexport declare type CustomerAddressesFormDataType = {\n  addressId?: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n  isBillingAddress: boolean\n  isShippingAddress: boolean\n}\n\nexport const generateDefaultCustomerAddressesFormData: () => CustomerAddressesFormDataType = () => {\n  return {\n    addressId: getNanoId(),\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    province: \"\",\n    country: \"\",\n    postalCode: \"\",\n    isBillingAddress: false,\n    isShippingAddress: false,\n  }\n}\n\nexport declare type CustomerAddressesFormValidationDataType = {\n  addressId?: string\n  address1?: string\n  address2?: string\n  city?: string\n  province?: string\n  country?: string\n  postalCode?: string\n}\n\nexport const defaultUserAccountValidationAddressData: CustomerAddressesFormValidationDataType = {\n  address1: \"\",\n  address2: \"\",\n  city: \"\",\n  province: \"\",\n  country: \"\",\n  postalCode: \"\",\n}\n\n// contact form\nexport declare type ContactFormDataType = {\n  firstName: string\n  lastName: string\n  email: string\n  title: string\n  description: string\n}\n\nexport const generateDefaultContactFormData: () => ContactFormDataType = () => {\n  return {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    title: \"\",\n    description: \"\",\n  }\n}\n\nexport declare type ContactFormValidationDataType = {\n  firstName: string,\n  lastName: string,\n  email: string,\n  title: string,\n  description: string,\n}\n\nexport const defaultContactFormValidationData: ContactFormValidationDataType = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  title: \"\",\n  description: \"\",\n}\n\n// admin company form\nexport declare type AdminCompanyFormDataType = {\n  companyId: string\n  companyName: string\n  companyDescription: string\n  companyEmail: string\n  phoneNumber: string\n  countryCode: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n}\n\nexport const generateDefaultAdminCompanyFormData: () => AdminCompanyFormDataType = () => {\n  return {\n    companyId: getNanoId(),\n    companyName: \"\",\n    companyDescription: \"\",\n    companyEmail: \"\",\n    phoneNumber: \"\",\n    countryCode: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    province: \"\",\n    country: \"\",\n    postalCode: \"\",\n  }\n}\n\nexport declare type AdminCompanyFormValidationDataType = {\n  companyName: string,\n  companyDescription: string,\n  companyEmail: string,\n  phoneNumber: string,\n  countryCode: string,\n  address1: string,\n  address2: string,\n  city: string,\n  province: string,\n  country: string,\n  postalCode: string,\n}\n\nexport const defaultAdminCompanyFormValidationData: AdminCompanyFormValidationDataType = {\n  companyName: \"\",\n  companyDescription: \"\",\n  companyEmail: \"\",\n  phoneNumber: \"\",\n  countryCode: \"\",\n  address1: \"\",\n  address2: \"\",\n  city: \"\",\n  province: \"\",\n  country: \"\",\n  postalCode: \"\",\n}\n\n// sort\nexport enum UserSortEnum {\n  DATE_DESC = \"DATE_DESC\",\n  DATE_ASC = \"DATE_ASC\",\n  NAME_ASC = \"NAME_ASC\",\n  NAME_DESC = \"NAME_DESC\",\n}\n","import { NormalizedDomainType } from \"domain/types\";\n\nexport declare type CategoryType = {\n  categoryId: string\n  categoryName: string\n  categoryPath: string\n  categoryDescription: string\n  totalProductCount?: number\n}\n\nexport declare type NormalizedCategoryType = NormalizedDomainType<CategoryType>\n\nexport declare type ProductImageType = {\n  productImageId?: string\n  productImagePath: string\n  isChange: boolean\n  productImageName: string\n}\n\nexport declare type ProductVariantSizeType = {\n  productSizeId: string\n  productSizeName: string\n  productSizeDescription: string\n}\n\nexport declare type ProductVariantType = {\n  variantId: string\n  productSize: ProductVariantSizeType\n  variantColor: string\n  variantUnitPrice?: number\n  variantDiscountPrice?: number\n  variantDiscountStartDate?: Date\n  variantDiscountEndDate?: Date\n  variantStock: number\n  isDiscount: boolean\n  soldCount: number\n  note: string\n  createdAt: Date\n  updateAt: Date\n  variantWeight: number\n  variantHeight: number\n  variantWidth: number\n  variantLength: number\n}\n\n\nexport declare type ProductType = {\n  productId?: string\n  productName: string\n  productDescription: string\n  productPath: string\n  productBaseUnitPrice: number\n  productBaseDiscountPrice?: number\n  productBaseDiscountStartDate?: Date\n  productBaseDiscountEndDate?: Date\n  averageReviewPoint: number\n  isDiscount: boolean\n  isPublic: boolean\n  category: CategoryType\n  releaseDate: Date\n  note: string\n  createdAt: Date\n  updatedAt: Date\n  productImageFiles?: File[] // to upload file in product form\n  productImages?: ProductImageType[] // to display teh image at client side (also send this to backend)\n  variants?: ProductVariantType[]\n}\n\nexport declare type NormalizedProductType = NormalizedDomainType<ProductType>\n\nexport enum ProductSortEnum {\n  DATE_DESC = \"DATE_DESC\",\n  DATE_ASC = \"DATE_ASC\",\n  ALPHABETIC_ASC = \"ALPHABETIC_ASC\",\n  ALPHABETIC_DESC = \"ALPHABETIC_DESC\",\n  PRICE_ASC = \"PRICE_ASC\",\n  PRICE_DESC = \"PRICE_DESC\",\n}\n\n// productCriteria\nexport declare type ProductCriteria = {\n  productId?: string\n  productName: string\n  productDescription: string\n  productPath: string\n  productBaseUnitPrice: number\n  productBaseDiscountPrice?: number\n  productBaseDiscountStartDate?: Date\n  productBaseDiscountEndDate?: Date\n  isDiscount: boolean\n  isPublic: boolean\n  category: CategoryType\n  releaseDate: Date\n  note: string\n  productImageFiles?: File[] // to upload file in product form\n  productImages?: ProductImageType[] // to display teh image at client side (also send this to backend)\n}\n\n// product variant criteria\nexport declare type ProductVariantCriteria = {\n  variantId?: string \n  productSize: ProductVariantSizeType\n  variantColor: string\n  variantUnitPrice?: number\n  variantDiscountPrice?: number\n  variantDiscountStartDate?: Date\n  variantDiscountEndDate?: Date\n  variantStock: number\n  isDiscount: boolean\n  note: string\n  variantWeight: number\n  variantHeight: number\n  variantWidth: number\n  variantLength: number\n}\n\n// category criteria\nexport declare type CategoryCriteria = {\n  categoryId?: string\n  categoryName: string\n  categoryDescription: string\n  categoryPath: string\n}\n\n// product variant state type for form & input\nexport declare type ProductVariantDataType = {\n  variantId?: string \n  productSize: ProductVariantSizeType\n  variantColor: string\n  variantUnitPrice?: number\n  variantDiscountPrice?: number\n  variantDiscountStartDate?: Date\n  variantDiscountEndDate?: Date\n  variantStock: number\n  isDiscount: boolean\n  note: string\n  variantWeight: number\n  variantHeight: number\n  variantWidth: number\n  variantLength: number\n}\n\nexport const defaultProductVariantData: ProductVariantDataType = {\n  productSize: null,\n  variantColor: \"#fff\",\n  variantUnitPrice: 0,\n  variantDiscountPrice: 0,\n  variantDiscountStartDate: new Date(),\n  variantDiscountEndDate: new Date(),\n  variantStock: 0,\n  isDiscount: false,\n  note: \"\",\n  variantWeight: 1,\n  variantHeight: 1,\n  variantWidth: 1,\n  variantLength: 1,\n}\n\n// product variant state type for form & input\nexport declare type ProductVariantValidationDataType = {\n  productSize: string, \n  variantColor: string,\n  variantUnitPrice: string,\n  variantDiscountPrice: string,\n  variantDiscountStartDate: string,\n  variantDiscountEndDate: string,\n  variantStock: string,\n  isDiscount: string,\n  note: string,\n  variantWeight: string,\n  variantHeight: string,\n  variantWidth: string,\n  variantLength: string,\n}\n\nexport const defaultProductVariantValidationData: ProductVariantValidationDataType = {\n  productSize: \"\", \n  variantColor: \"\",\n  variantUnitPrice: \"\",\n  variantDiscountPrice: \"\",\n  variantDiscountStartDate: \"\",\n  variantDiscountEndDate: \"\",\n  variantStock: \"\",\n  isDiscount: \"\",\n  note: \"\",\n  variantWeight: \"\",\n  variantHeight: \"\",\n  variantWidth: \"\",\n  variantLength: \"\",\n}\n\n// product state type for form & input\nexport declare type ProductDataType = {\n  productId?: string\n  productName: string\n  productDescription: string\n  productPath: string\n  productBaseUnitPrice: number\n  productBaseDiscountPrice?: number\n  productBaseDiscountStartDate?: Date\n  productBaseDiscountEndDate?: Date\n  isDiscount: boolean\n  isPublic: boolean\n  category: CategoryType\n  releaseDate: Date\n  note: string\n  productImageFiles?: File[]\n  productImages?: ProductImageType[]\n  productVariants?: ProductVariantDataType[]\n}\n\nexport const defaultProductData: ProductDataType = {\n  productName: \"\",\n  productDescription: \"\",\n  productPath: \"\",\n  productImageFiles: Array(5).fill(null),\n  productImages: Array(5).fill(null),\n  productBaseUnitPrice: 0,\n  productBaseDiscountPrice: 0,\n  productBaseDiscountStartDate: new Date(),\n  productBaseDiscountEndDate: new Date(),\n  isDiscount: false,\n  isPublic: false,\n  category: null,\n  releaseDate: new Date(),\n  note: \"\",\n  productVariants: [\n    defaultProductVariantData\n  ],\n}\n\nexport const defaultProductOnlyData: ProductDataType = {\n  productName: \"\",\n  productDescription: \"\",\n  productPath: \"\",\n  productImageFiles: Array(5).fill(null),\n  productImages: [\n    {\n      productImageName: \"product-image-0\",\n      productImagePath: \"\",\n      isChange: true,\n    },\n    {\n      productImageName: \"product-image-1\",\n      productImagePath: \"\",\n      isChange: true,\n    },\n    {\n      productImageName: \"product-image-2\",\n      productImagePath: \"\",\n      isChange: true,\n    },\n    {\n      productImageName: \"product-image-3\",\n      productImagePath: \"\",\n      isChange: true,\n    },\n    {\n      productImageName: \"product-image-4\",\n      productImagePath: \"\",\n      isChange: true,\n    },\n  ],\n  productBaseUnitPrice: 0,\n  productBaseDiscountPrice: 0,\n  productBaseDiscountStartDate: new Date(),\n  productBaseDiscountEndDate: new Date(),\n  isDiscount: false,\n  isPublic: false,\n  category: null,\n  releaseDate: new Date(),\n  note: \"\",\n}\n\n// product validation state type for form & input\nexport declare type ProductValidationDataType = {\n  productId?: string\n  productName: string\n  productDescription: string\n  productPath: string\n  productImages: string \n  productBaseUnitPrice: string\n  productBaseDiscountPrice?: string\n  productBaseDiscountStartDate?: string\n  productBaseDiscountEndDate?: string\n  isDiscount: string\n  isPublic: string\n  category: string\n  releaseDate: string\n  note: string\n  productVariants: ProductVariantValidationDataType[]\n}\n\nexport const defaultProductValidationData: ProductValidationDataType = {\n  productName: \"\",\n  productDescription: \"\",\n  productPath: \"\",\n  productImages: \"\", \n  productBaseUnitPrice: \"\",\n  productBaseDiscountPrice: \"\",\n  productBaseDiscountStartDate: \"\",\n  productBaseDiscountEndDate: \"\",\n  isDiscount: \"\",\n  isPublic: \"\",\n  category: \"\",\n  releaseDate: \"\",\n  note: \"\",\n  productVariants: [\n    defaultProductVariantValidationData\n  ]\n}\n\n// category state typ for form & input\nexport declare type CategoryDataType = {\n  categoryId?: string\n  categoryName: string\n  categoryDescription: string\n  categoryPath: string\n}\n\nexport const defaultCategoryData: CategoryDataType = {\n  categoryName: \"\",\n  categoryDescription: \"\",\n  categoryPath: \"\"\n}\n\n\n// category validation type for form & input\nexport declare type CategoryValidationDataType = {\n  categoryId?: string\n  categoryName: string\n  categoryDescription: string\n  categoryPath: string\n}\n\nexport const defaultCategoryValidationData: CategoryValidationDataType = {\n  categoryName: \"\",\n  categoryDescription: \"\",\n  categoryPath: \"\"\n}\n\n// variant size\n// this must match with the backend 'product_size' table\nexport const productVariantSizeObj = {\n  xs: {\n    productSizeId: \"1\",\n    productSizeName: \"XS\",\n    productSizeDescription: \"\",\n  },\n  s: {\n    productSizeId: \"2\",\n    productSizeName: \"S\",\n    productSizeDescription: \"\",\n  },\n  m: {\n    productSizeId: \"3\",\n    productSizeName: \"M\",\n    productSizeDescription: \"\",\n  },\n  l: {\n    productSizeId: \"4\",\n    productSizeName: \"L\",\n    productSizeDescription: \"\",\n  },\n  xl: {\n    productSizeId: \"5\",\n    productSizeName: \"XL\",\n    productSizeDescription: \"\",\n  },\n}\n","import { ProductType } from \"domain/product/types\";\nimport { UserType } from \"domain/user/types\";\n\nexport declare type WishlistItemType = {\n  wishlistItemId?: string\n  user?: UserType\n  /**\n   *  - assuming that this product only contains a selected product.\n   **/\n  product: ProductType\n  createdAt?: Date\n  updatedAt?: Date\n}\n\n// criteria\nexport declare type WishlistItemCriteria = {\n  wishlistItemId?: string\n  userId?: string\n  variantId: string\n}\n\nexport declare type WishlistItemQueryStringCriteria = {\n  userId: string\n  searchQuery?: string\n  reviewPoint?: number\n  minPrice?: number\n  maxPrice?: number\n  isDiscount?: boolean\n  startDate?: Date\n  endDate?: Date\n}\n\n\nexport enum WishlistItemSortEnum {\n  DATE_DESC = \"DATE_DESC\",\n  DATE_ASC = \"DATE_ASC\",\n  ALPHABETIC_ASC = \"ALPHABETIC_ASC\",\n  ALPHABETIC_DESC = \"ALPHABETIC_DESC\",\n  PRICE_ASC = \"PRICE_ASC\",\n  PRICE_DESC = \"PRICE_DESC\",\n}\n","import { UserTypeEnum } from \"src/app\";\nimport { ProductType, ProductVariantType } from \"domain/product/types\";\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PaymentIcon from '@material-ui/icons/Payment';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AssignmentReturnIcon from '@material-ui/icons/AssignmentReturn';\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport { theme } from \"ui/css/theme\";\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\nimport { SvgIconTypeMap } from \"@material-ui/core/SvgIcon\";\nimport { UserType, UserAddressType } from \"domain/user/types\";\n\nexport enum OrderStatusEnum {\n  DRAFT = \"DRAFT\",\n  SESSION_TIMEOUT = \"SESSION_TIMEOUT\",\n  ORDERED = \"ORDERED\",\n  FAILED_PAYMENT = \"FAILED_PAYMENT\",\n  PAID = \"PAID\",\n  CANCEL_REQUEST = \"CANCEL_REQUEST\",\n  RECEIVED_CANCEL_REQUEST = \"RECEIVED_CANCEL_REQUEST\",\n  CANCELED = \"CANCELED\",\n  SHIPPED = \"SHIPPED\",\n  DELIVERED = \"DELIVERED\",\n  RETURN_REQUEST = \"RETURN_REQUEST\",\n  RECEIVED_RETURN_REQUEST = \"RECEIVED_RETURN_REQUEST\",\n  RETURNED = \"RETURNED\",\n  ERROR = \"ERROR\",\n}\n\nexport declare type OrderStatusLabelListType = {\n  [key in OrderStatusEnum]: string\n}\n\nexport const orderStatusLabelList: OrderStatusLabelListType = {\n  [OrderStatusEnum.DRAFT]: \"Draft\",\n  [OrderStatusEnum.ORDERED]: \"Ordered\",\n  [OrderStatusEnum.FAILED_PAYMENT]: \"Failed Payment\",\n  [OrderStatusEnum.PAID]: \"Paid\",\n  [OrderStatusEnum.CANCEL_REQUEST]: \"Cancel Request\",\n  [OrderStatusEnum.RECEIVED_CANCEL_REQUEST]: \"Received Cancel Request\",\n  [OrderStatusEnum.CANCELED]: \"Canceled\",\n  [OrderStatusEnum.SHIPPED]: \"Shipped\",\n  [OrderStatusEnum.DELIVERED]: \"Delivered\",\n  [OrderStatusEnum.RETURN_REQUEST]: \"Return Request\",\n  [OrderStatusEnum.RECEIVED_RETURN_REQUEST]: \"Received Return Request\",\n  [OrderStatusEnum.RETURNED]: \"Returned\",\n  [OrderStatusEnum.ERROR]: \"Error\",\n  [OrderStatusEnum.SESSION_TIMEOUT]: \"Session Timeout\",\n}\n\nexport enum OrderSortEnum {\n  DATE_DESC = \"DATE_DESC\",\n  DATE_ASC = \"DATE_ASC\",\n}\n\nexport declare type OrderStatusNextOptionType = {\n  [kye in UserTypeEnum]?: OrderStatusEnum[]\n}\n\nexport declare type OrderStatusBagType = {\n  label: string,\n  defaultNote: string\n  icon: OverridableComponent<SvgIconTypeMap<Record<string, never>, \"svg\">>,\n  color: string\n  nextOptions?: OrderStatusNextOptionType\n}\n\n\nexport declare type OrderStatusBagListType = {\n  [key in OrderStatusEnum]: OrderStatusBagType\n}\n\nexport const orderStatusBagList: OrderStatusBagListType = {\n  [OrderStatusEnum.DRAFT]: {\n    label: \"Draft\",\n    defaultNote: \"the order draft received.\",\n    icon: DraftsIcon,\n    color: theme.palette.success.main\n  },\n  [OrderStatusEnum.FAILED_PAYMENT]: {\n    label: \"Failed Payment:(\",\n    defaultNote: \"the customer failed payment.\",\n    icon: PaymentIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.PAID]: {\n    label: \"Paid:)\",\n    defaultNote: \"the customer failed payment.\",\n    icon: PaymentIcon,\n    color: theme.palette.success.main\n  },\n  [OrderStatusEnum.ORDERED]: {\n    label: \"Ordered!\",\n    defaultNote: \"the order draft submitted.\",\n    icon: ShoppingCartIcon,\n    color: theme.palette.success.main,\n  },\n  [OrderStatusEnum.CANCEL_REQUEST]: {\n    label: \"Sent Cancel Request:(\",\n    defaultNote: \"the customer submitted cancelation request\",\n    icon: CancelPresentationIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.RECEIVED_CANCEL_REQUEST]: {\n    label: \"Received Cancel Request:(\",\n    defaultNote: \"we confirmed cancelation request\",\n    icon: CancelPresentationIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.CANCELED]: {\n    label: \"Canceled:)\",\n    defaultNote: \"we canceled the order successfully.\",\n    icon: AssignmentTurnedInIcon,\n    color: theme.palette.success.main,\n  },\n  [OrderStatusEnum.SHIPPED]: {\n    label: \"Shipped:)\",\n    defaultNote: \"we shipped the products successfully.\",\n    icon: LocalShippingIcon,\n    color: theme.palette.success.main,\n  },\n  [OrderStatusEnum.DELIVERED]: {\n    label: \"Delivered:)\",\n    defaultNote: \"we delivered the package successfully.\",\n    icon: HomeIcon,\n    color: theme.palette.success.main,\n  },\n  [OrderStatusEnum.RETURN_REQUEST]: {\n    label: \"Sent Return Request:)\",\n    defaultNote: \"the customer submitted return request.\",\n    icon: AssignmentReturnIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.RECEIVED_RETURN_REQUEST]: {\n    label: \"Received Return Request:)\",\n    defaultNote: \"we confirmed return request.\",\n    icon: AssignmentReturnIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.RETURNED]: {\n    label: \"Returned:)\",\n    defaultNote: \"we processed the request successfully.\",\n    icon: AssignmentTurnedInIcon,\n    color: theme.palette.success.main,\n  },\n  [OrderStatusEnum.SESSION_TIMEOUT]: {\n    label: \"Session Timeout:(\",\n    defaultNote: \"the customer timeed out his session.\",\n    icon: TimerOffIcon,\n    color: theme.palette.error.main,\n  },\n  [OrderStatusEnum.ERROR]: {\n    label: \"Error:)\",\n    defaultNote: \"unexpected error happened.\",\n    icon: ErrorIcon,\n    color: theme.palette.error.main,\n  },\n}\n\n// helper function\n//// check function\nexport const hasNextOrderOptions: (orderStatusBag: OrderStatusBagType, targetUserType: UserTypeEnum) => boolean = (orderStatusBag, targetUserType) => {\n  if (!orderStatusBag) return false\n \n  return orderStatusBag.nextOptions &&\n    orderStatusBag.nextOptions[targetUserType] &&\n    orderStatusBag.nextOptions[targetUserType].length > 0\n}\n\n// type def\n\nexport declare type OrderAddressType = {\n  addressId?: string\n  address1: string\n  address2: string\n  city: string\n  province: string\n  country: string\n  postalCode: string\n}\n\nexport declare type OrderEventType = {\n  orderEventId?: string\n  createdAt: Date\n  orderId: string\n  orderStatus: OrderStatusEnum\n  undoable: boolean\n  user: UserType\n  note: string\n}\n\nexport declare type OrderDetailType = {\n  orderDetailId: string,\n  productQuantity: number,\n  productUnitPrice: number,\n  productColor: string,\n  productSize: string,\n  productName: string\n  productVariant: ProductVariantType // selected variant\n  product?: ProductType // if still the product exist\n}\n\nexport declare type OrderType = {\n  orderId: string\n  user: UserType\n  orderNumber: string\n  orderFirstName: string\n  orderLastName: string\n  orderEmail: string\n  orderPhone: string\n  shippingAddress: UserAddressType\n  billingAddress: UserAddressType\n  orderEvents: OrderEventType[]\n  orderDetails: OrderDetailType[]\n  productCost: number\n  taxCost: number\n  shippingCost: number\n  note: string\n  createdAt: Date\n  updatedAt: Date\n  nextAdminOrderEventOptions: OrderStatusEnum[],\n  nextMemberOrderEventOptions: OrderStatusEnum[],\n  latestOrderEvent: OrderEventType,\n}\n\n// form & input state\nexport const defaultOrderEventData: OrderEventType = {\n  createdAt: null,\n  undoable: false,\n  user: null,\n  orderId: \"\",\n  orderStatus: null,\n  note: \"\",\n}\n\n// criteria\n\nexport declare type SessionTimeoutOrderEventCriteria = {\n  orderNumber: string\n}\n\nexport declare type OrderDetailCriteria = {\n  orderDetailId: string,\n  productQuantity: number,\n  productVariantId: string // selected variant\n  productId: string // if still the product exist\n}\n\nexport declare type OrderCriteria = {\n  orderId?: string\n  orderNumber?: string\n  orderFirstName: string\n  orderLastName: string\n  orderEmail: string\n  orderPhone: string\n  shippingAddress: OrderAddressType\n  billingAddress: OrderAddressType\n  note: string\n  userId: string\n  orderDetails: OrderDetailCriteria[]\n  orderEvents?: string[]\n  currency: string\n}\n\nexport declare type OrderEventCriteria = {\n  orderEventId?: string\n  orderStatus?: OrderStatusEnum\n  note: string\n  userId: string\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n\n/**\n * add additional theme property\n *  - https://material-ui.com/customization/palette/#adding-new-colors\n **/\ndeclare module \"@material-ui/core/styles/createPalette\" {\n  interface Palette {\n    headerBackground: Palette['background'];\n  }\n  interface PaletteOptions {\n    headerBackground: PaletteOptions['background'];\n  }\n}\n\n\nexport const theme = createMuiTheme({\n  /**\n   * override default theme provided by material-ui here\n   **/\n  palette: {\n    headerBackground: {\n      paper: \"transparent\"\n    }\n  }\n});\n","import { ProductType } from \"domain/product/types\";\nimport { UserType } from \"domain/user/types\";\n\n// type def\nexport declare type ReviewType = {\n  reviewId?: string\n  user: UserType\n  product: ProductType\n  reviewPoint: number\n  reviewTitle: string\n  reviewDescription: string\n  isVerified: boolean\n  createdAt: Date\n  updateAt: Date\n  note: string\n}\n\nexport declare type ReviewValidationType = {\n  reviewId?: string\n  reviewPoint: string\n  reviewTitle: string\n  reviewDescription: string\n  isVerified: string\n  note: string\n}\n\nexport declare type ReviewDataType = ReviewType\nexport declare type ReviewValidationDataType = ReviewValidationType\n\n// form & input state\nexport const defaultReviewData: ReviewDataType = {\n  user: null,\n  product: null,\n  reviewPoint: 0.0,\n  reviewTitle: \"\",\n  reviewDescription: \"\",\n  isVerified: false,\n  createdAt: new Date,\n  updateAt: new Date,\n  note: \"\"\n}\n\nexport const defaultReviewValidationData: ReviewValidationDataType = {\n  reviewPoint: \"\",\n  reviewTitle: \"\",\n  reviewDescription: \"\",\n  isVerified: \"\",\n  note: \"\"\n}\n\n// sort\nexport enum ReviewSortEnum {\n  DATE_DESC = \"DATE_DESC\",\n  DATE_ASC = \"DATE_ASC\",\n  REVIEW_POINT_ASC = \"REVIEW_POINT_ASC\",\n  REVIEW_POINT_DESC = \"REVIEW_POINT_DESC\",\n}\n\n// criteria\nexport declare type ReviewCriteria = {\n  reviewId?: string\n  userId: string\n  productId: string\n  reviewPoint: number\n  reviewTitle: string\n  reviewDescription: string\n  isVerified: boolean\n  note?: string\n}\n","import { StateType } from \"./types\";\nimport { UserTypeEnum, FetchStatusEnum, MessageTypeEnum } from \"src/app\";\nimport { defaultUser, UserSortEnum } from \"domain/user/types\";\nimport { normalize, schema } from 'normalizr';\nimport { ProductSortEnum } from \"domain/product/types\";\nimport { getNanoId } from \"src/utils\";\nimport { WishlistItemSortEnum } from \"domain/wishlist/types\";\nimport { OrderSortEnum } from \"domain/order/types\";\nimport { ReviewSortEnum } from \"domain/review/type\";\n\n/**\n *\n * normalizr definition\n *\n **/\n\n// category\nexport const categorySchemaEntity = new schema.Entity(\n  \"categories\",\n  {},\n  {\n    idAttribute: \"categoryId\",\n  }\n)\n\nexport const categorySchemaArray = new schema.Array(categorySchemaEntity);\n\n// product\nexport const productSchemaEntity = new schema.Entity(\n  \"products\",\n  {},\n  {\n    idAttribute: \"productId\",\n  }\n)\n\nexport const productSchemaArray = new schema.Array(productSchemaEntity);\n\n//export const tagSchemaArray = new schema.Array(tagSchemaEntity)\n\n// anime \n//const animeSchemaEntity = new schema.Entity(\n//  \"animes\",\n//)\n//export const animeSchemaArray = new schema.Array(animeSchemaEntity)\n//\n//// make connection btw blogs and categories\n////categorySchemaEntity.define({\n////  blogs: blogSchemaArray\n////})\n//\n///**\n// *\n// * normalize blog data\n// *\n// **/\n//const normalizedResult = normalize(\n//  {},\n//  animeSchemaArray\n//)\n\n/**\n *\n * initial state\n *\n **/\nexport const initialState: StateType = {\n  ui: {\n    leftNavMenu: false,\n    rightNavMenu: false,\n    searchModal: false,\n    cartModal: false,\n  },\n  app: {\n    // if \"auth\" exists in localStorage, retrieve as initial state, otherwise, get default Guest auth.\n    auth: localStorage.getItem(\"auth\") != null ? JSON.parse(localStorage.getItem(\"auth\")) : {\n      isLoggedIn: false,\n      userType: UserTypeEnum.GUEST,\n      user: defaultUser,\n    },\n    previousUrl: \"\",\n    message: {\n      id: getNanoId(),\n      type: MessageTypeEnum.INITIAL,\n      message: \"\"\n    },\n    searchKeyword: \"\",\n    requestTracker: {},\n    fetchStatus: {\n      products: {\n        get: FetchStatusEnum.INITIAL,\n        getPublic: FetchStatusEnum.INITIAL,\n        getSingle: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n        postVariant: FetchStatusEnum.INITIAL,\n        putVariant: FetchStatusEnum.INITIAL,\n        deleteSingleVariant: FetchStatusEnum.INITIAL,\n      },\n      orders: {\n        get: FetchStatusEnum.INITIAL,\n        getSingle: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n        postEvent: FetchStatusEnum.INITIAL,\n        deleteSingleEvent: FetchStatusEnum.INITIAL,\n        putEvent: FetchStatusEnum.INITIAL,\n        postSessionTimeoutEvent: FetchStatusEnum.INITIAL,\n      },\n      users: {\n        get: FetchStatusEnum.INITIAL,\n        getSingle: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        patch: FetchStatusEnum.INITIAL,\n        postPhone: FetchStatusEnum.INITIAL,\n        putPhone: FetchStatusEnum.INITIAL,\n        patchPhone: FetchStatusEnum.INITIAL,\n        deletePhone: FetchStatusEnum.INITIAL,\n        postAddress: FetchStatusEnum.INITIAL,\n        putAddress: FetchStatusEnum.INITIAL,\n        patchAddress: FetchStatusEnum.INITIAL,\n        deleteAddress: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n        postAvatarImage: FetchStatusEnum.INITIAL,\n        deleteAvatarImage: FetchStatusEnum.INITIAL,\n      },\n      categories: {\n        get: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n      },\n      reviews: {\n        get: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n      },\n      cartItems: {\n        get: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        delete: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n      },\n      wishlistItems: {\n        get: FetchStatusEnum.INITIAL,\n        post: FetchStatusEnum.INITIAL,\n        patch: FetchStatusEnum.INITIAL,\n        delete: FetchStatusEnum.INITIAL,\n        deleteSingle: FetchStatusEnum.INITIAL,\n      },\n      auth: {\n        getSingle: FetchStatusEnum.INITIAL,\n        put: FetchStatusEnum.INITIAL,\n        postPhone: FetchStatusEnum.INITIAL,\n        putPhone: FetchStatusEnum.INITIAL,\n        patchPhone: FetchStatusEnum.INITIAL,\n        deletePhone: FetchStatusEnum.INITIAL,\n        postAddress: FetchStatusEnum.INITIAL,\n        putAddress: FetchStatusEnum.INITIAL,\n        patchAddress: FetchStatusEnum.INITIAL,\n        deleteAddress: FetchStatusEnum.INITIAL,\n        postAvatarImage: FetchStatusEnum.INITIAL,\n        deleteAvatarImage: FetchStatusEnum.INITIAL,\n        putCompany: FetchStatusEnum.INITIAL,\n        fetchOrder: FetchStatusEnum.INITIAL,\n        fetchSingleOrder: FetchStatusEnum.INITIAL,\n        postOrderEvent: FetchStatusEnum.INITIAL,\n      },\n    },\n  },\n  domain: {\n    categories: {\n      data: {},\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 10,\n        totalPages: 1,\n        totalElements: 0,\n      },\n    },\n    cartItems: localStorage.getItem(\"cartItems\") != null ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n    wishlistItems: {\n      data: [],\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 10,\n        totalPages: 1,\n        totalElements: 0,\n      },\n      query: {\n        searchQuery: \"\",\n        minPrice: null,\n        maxPrice: null,\n        isDiscount: null,\n        reviewPoint: null,\n        startDate: null,\n        endDate: null,\n        sort: WishlistItemSortEnum.DATE_DESC,\n      },\n    },\n    users: {\n      data: [],\n      query: {\n        searchQuery: \"\",\n        startDate: null,\n        endDate: null,\n        sort: UserSortEnum.DATE_DESC,\n      },\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 10,\n        totalPages: 1,\n        totalElements: 0,\n      },\n    },\n    orders: {\n      data: [],\n      query: {\n        searchQuery: \"\",\n        orderStatus: null,\n        startDate: null,\n        endDate: null,\n        sort: OrderSortEnum.DATE_DESC,\n      },\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 10,\n        totalPages: 1,\n        totalElements: 0,\n      },\n    },\n    reviews: {\n      data: [],\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 10,\n        totalPages: 1,\n        totalElements: 0,\n      },\n      query: {\n        searchQuery: \"\",\n        reviewPoint: null,\n        isVerified: null,\n        startDate: null,\n        endDate: null,\n        userId: \"\",\n        productId: \"\",\n        sort: ReviewSortEnum.DATE_DESC,\n      },\n    },\n    products: {\n      data: {},\n      query: {\n        searchQuery: \"\",\n        categoryId: \"0\",\n        minPrice: null,\n        maxPrice: null,\n        isDiscount: null,\n        reviewPoint: null,\n        startDate: null,\n        endDate: null,\n        sort: ProductSortEnum.DATE_DESC,\n      },\n      pagination: {\n        page: 0, // start from 0 (not 1)\n        limit: 20,\n        totalPages: 1,\n        totalElements: 0,\n      },\n      curItems: [],\n    },\n    checkout: {\n      order: null,\n    }\n  },\n  // never persist\n  sensitive: {\n    stripeClientSecret: \"\"\n  }\n}\n","import { UserPhoneType, UserAddressType, UserType } from \"./types\";\n\n/**\n * user domain behaviors\n **/\nexport function getPrimaryPhone(phones: UserPhoneType[]): UserPhoneType {\n  return phones.find((phone: UserPhoneType) => phone.isSelected)\n}\n\nexport function getPrimaryPhoneId(phones: UserPhoneType[]): string {\n  const primary = phones.find((phone: UserPhoneType) => phone.isSelected)\n\n  if (!primary) return null\n\n  return primary.phoneId;\n}\n\nexport function getShippingAddressId(addresses: UserAddressType[]): string {\n  const primary = addresses.find((address: UserAddressType) => address.isShippingAddress)\n\n  if (!primary) return null\n\n  return primary.addressId;\n}\n\nexport function getBillingAddressId(addresses: UserAddressType[]): string {\n  const primary = addresses.find((address: UserAddressType) => address.isBillingAddress)\n\n  if (!primary) return null\n\n  return primary.addressId;\n}\n\nexport function toAddressString(address: UserAddressType): string {\n  return `${address.address1} ${address.address2} ${address.city} ${address.province} ${address.country} ${address.postalCode}`\n}\n\n\nexport function toPhoneString(phone: UserPhoneType): string {\n  return `${phone.countryCode} ${phone.phoneNumber}`\n}\n\nexport function toPhoneStringWithoutSpace(phone: UserPhoneType): string {\n  return `${phone.countryCode}${phone.phoneNumber}`\n}\n\nexport function toFullNameStringOfUser(user: UserType): string {\n  return `${user.firstName} ${user.lastName}`\n}\n\nexport function toFullNameString(firstName: string, lastName: string): string {\n  return `${firstName} ${lastName}`\n}\n\n","import { OrderType, OrderStatusEnum, OrderAddressType, OrderDetailCriteria } from \"./types\";\nimport { UserAddressType } from \"domain/user/types\";\nimport { CartItemType } from \"domain/cart/types\";\n\n/**\n * domain behaviors\n *\n **/\nexport const calcOrderTotalCost: (order: OrderType) => number = (order) => {\n  return order.productCost + order.taxCost + order.shippingCost;\n}\n\nexport const calcOrderTotalItemNumber: (order: OrderType) => number = (order) => {\n  return order.orderDetails.length;\n}\n\nexport const getCurOrderStatus: (order: OrderType) => OrderStatusEnum = (order) => {\n  return order.orderEvents[order.orderEvents.length - 1].orderStatus;\n}\n\nexport function toOrderAddress(address: UserAddressType): OrderAddressType {\n  return {\n    address1: address.address1,\n    address2: address.address2,\n    city: address.city,\n    province: address.province,\n    country: address.country,\n    postalCode: address.postalCode,\n  } as OrderAddressType\n}\n\n\nexport function toOrderDetailCriteriaList(cartItems: CartItemType[]): OrderDetailCriteria[] {\n  return cartItems\n    // make sure only pick selected one\n    .filter((cartItem: CartItemType) => cartItem.isSelected)\n    .map((cartItem: CartItemType) => ({\n      productQuantity: cartItem.quantity,\n      productId: cartItem.product.productId,\n      productVariantId: cartItem.product.variants[0].variantId, // only include selected variant\n    } as OrderDetailCriteria))\n}\n\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { ProductType } from \"domain/product/types\";\nimport { UserAddressType, UserPhoneType, UserType } from \"domain/user/types\";\nimport merge from 'lodash/merge';\nimport { denormalize } from \"normalizr\";\nimport { categorySchemaArray, productSchemaArray } from \"states/state\";\nimport { StateType } from \"states/types\";\nimport { WishlistItemType } from \"domain/wishlist/types\";\nimport { OrderType, OrderCriteria, OrderDetailType } from \"domain/order/types\";\nimport { toPhoneStringWithoutSpace } from \"domain/user\";\nimport { toOrderAddress, toOrderDetailCriteriaList } from \"domain/order\";\nimport { UserTypeEnum } from \"src/app\";\n\nexport const rsSelector = {\n  /**\n * selector function to retrieve data from redux store\n **/\n\n  /**\n   * check this: https://redux-toolkit.js.org/api/createEntityAdapter\n   **/\n\n  /**\n   *\n   * low level (pure) selector is always run (different from reselect) (no cache)\n   *\n   **/\n\n  ui: {\n    getLeftNavMenu: (state: StateType) => state.ui.leftNavMenu,\n    getRightNavMenu: (state: StateType) => state.ui.rightNavMenu,\n    getSearchModal: (state: StateType) => state.ui.searchModal,\n    getCartModal: (state: StateType) => state.ui.cartModal,\n  },\n\n  app: {\n    getAuth: (state: StateType) => state.app.auth,\n    getPreviousUrl: (state: StateType) => state.app.previousUrl,\n    getMessage: (state: StateType) => state.app.message,\n    getSearchKeyword: (state: StateType) => state.app.searchKeyword,\n    getRequestTracker: (state: StateType) => state.app.requestTracker,\n\n    getPutAuthFetchStatus: (state: StateType) => state.app.fetchStatus.auth.put,\n    getPostSessionTimeoutOrderEventFetchStatus: (state: StateType) => state.app.fetchStatus.orders.postSessionTimeoutEvent,\n    getPostOrderFetchStatus: (state: StateType) => state.app.fetchStatus.orders.post,\n    getFetchReviewFetchStatus: (state: StateType) => state.app.fetchStatus.reviews.get,\n    getFetchProductFetchStatus: (state: StateType) => state.app.fetchStatus.products.get,\n    getFetchCategoryFetchStatus: (state: StateType) => state.app.fetchStatus.categories.get,\n    getFetchOrderFetchStatus: (state: StateType) => state.app.fetchStatus.orders.get,\n    getFetchUserFetchStatus: (state: StateType) => state.app.fetchStatus.users.get,\n  },\n\n  domain: {\n    getCategory: (state: StateType) => state.domain.categories.data,\n    getCategoryPagination: (state: StateType) => state.domain.categories.pagination,\n\n    getReview: (state: StateType) => state.domain.reviews.data,\n    getReviewPagination: (state: StateType) => state.domain.reviews.pagination,\n    getReviewQuery: (state: StateType) => state.domain.reviews.query,\n    getReviewQuerySearchQuery: (state: StateType) => state.domain.reviews.query.searchQuery,\n    getReviewQueryUserId: (state: StateType) => state.domain.reviews.query.userId,\n    getReviewQueryProductId: (state: StateType) => state.domain.reviews.query.productId,\n    getReviewQueryStartDate: (state: StateType) => state.domain.reviews.query.startDate,\n    getReviewQueryEndDate: (state: StateType) => state.domain.reviews.query.endDate,\n    getReviewQueryIsVerified: (state: StateType) => state.domain.reviews.query.isVerified,\n    getReviewQueryReviewPoint: (state: StateType) => state.domain.reviews.query.reviewPoint,\n    getReviewQuerySort: (state: StateType) => state.domain.reviews.query.sort,\n\n    getCartItem: (state: StateType) => state.domain.cartItems,\n\n    getWishlistItem: (state: StateType) => state.domain.wishlistItems.data,\n    getWishlistItemPagination: (state: StateType) => state.domain.wishlistItems.pagination,\n    getWishlistItemQuery: (state: StateType) => state.domain.wishlistItems.query,\n    getWishlistItemQuerySearchQuery: (state: StateType) => state.domain.wishlistItems.query.searchQuery,\n    getWishlistItemQueryMinPrice: (state: StateType) => state.domain.wishlistItems.query.minPrice,\n    getWishlistItemQueryMaxPrice: (state: StateType) => state.domain.wishlistItems.query.maxPrice,\n    getWishlistItemQueryStartDate: (state: StateType) => state.domain.wishlistItems.query.startDate,\n    getWishlistItemQueryEndDate: (state: StateType) => state.domain.wishlistItems.query.endDate,\n    getWishlistItemQueryIsDiscount: (state: StateType) => state.domain.wishlistItems.query.isDiscount,\n    getWishlistItemQueryReviewPoint: (state: StateType) => state.domain.wishlistItems.query.reviewPoint,\n    getWishlistItemQuerySort: (state: StateType) => state.domain.wishlistItems.query.sort,\n\n    getUser: (state: StateType) => state.domain.users.data,\n    getUserPagination: (state: StateType) => state.domain.users.pagination,\n    getUserQuerySearchQuery: (state: StateType) => state.domain.users.query.searchQuery,\n    getUserQueryStartDate: (state: StateType) => state.domain.users.query.startDate,\n    getUserQueryEndDate: (state: StateType) => state.domain.users.query.endDate,\n    getUserQuerySort: (state: StateType) => state.domain.users.query.sort,\n\n    getOrder: (state: StateType) => state.domain.orders.data,\n    getOrderPagination: (state: StateType) => state.domain.orders.pagination,\n    getOrderQuerySearchQuery: (state: StateType) => state.domain.orders.query.searchQuery,\n    getOrderQueryOrderStatus: (state: StateType) => state.domain.orders.query.orderStatus,\n    getOrderQueryStartDate: (state: StateType) => state.domain.orders.query.startDate,\n    getOrderQueryEndDate: (state: StateType) => state.domain.orders.query.endDate,\n    getOrderQuerySort: (state: StateType) => state.domain.orders.query.sort,\n\n    getProduct: (state: StateType) => state.domain.products.data,\n    getProductQuery: (state: StateType) => state.domain.products.query,\n    getProductQuerySearchQuery: (state: StateType) => state.domain.products.query.searchQuery,\n    getProductQueryCategoryId: (state: StateType) => state.domain.products.query.categoryId,\n    getProductQueryMinPrice: (state: StateType) => state.domain.products.query.minPrice,\n    getProductQueryMaxPrice: (state: StateType) => state.domain.products.query.maxPrice,\n    getProductQueryStartDate: (state: StateType) => state.domain.products.query.startDate,\n    getProductQueryEndDate: (state: StateType) => state.domain.products.query.endDate,\n    getProductQueryIsDiscount: (state: StateType) => state.domain.products.query.isDiscount,\n    getProductQueryReviewPoint: (state: StateType) => state.domain.products.query.reviewPoint,\n    getProductQuerySort: (state: StateType) => state.domain.products.query.sort,\n    getProductPagination: (state: StateType) => state.domain.products.pagination,\n    getProductCurItems: (state: StateType) => state.domain.products.curItems,\n\n    getCheckoutOrder: (state: StateType) => state.domain.checkout.order,\n  },\n\n  senstive: {\n    getStripeClientSecret: (state: StateType) => state.sensitive.stripeClientSecret,\n  }\n}\n\n/**\n * memorized selector note:\n *\n * it has cache (size 1) capability. so if its particular portion of state tree hasn't change, it returns cached value.\n *\n * However, if multiple component instances use the same memorized selector instance, you CAN'T use this cache features. since the memorized selector recognized that revieved arguments are different every time when it is called.\n *\n * Therefore, you have to give a copy of momerized selector to each component instance. (I'm not sure it is true when using redux-saga though)\n *\n * #Question:\n *\n *  - do i need to use memorized selector for trivial (non-cpu-expensive calculation)??\n *\n *    - i guesss you should use this if you have cpu-expensive calculation, otherwise, it just make selector logic complex and there is no benefit for performance.\n *\n *    - even if the value is cached, the memorized selector is called so if it id not heavy calculation, does not make sense to use it.\n *\n **/\n\nexport const mSelector = {\n\n  // ui.leftNavMenu\n  makeLeftNavMenuSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getLeftNavMenu\n      ],\n      (leftNavMenu) => {\n        return leftNavMenu\n      },\n    )\n  },\n\n  // ui.rightNavMenu\n  makeRightNavMenuSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getRightNavMenu\n      ],\n      (rightNavMenu) => {\n        return rightNavMenu\n      },\n    )\n  },\n\n  // ui.searchModal\n  makeSearchModalSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getSearchModal\n      ],\n      (searchModal) => {\n        return searchModal\n      },\n    )\n  },\n\n  // ui.cartModal\n  makeCartModalSelector: () => {\n    return createSelector(\n      [\n        rsSelector.ui.getCartModal\n      ],\n      (cartModal) => {\n        return cartModal\n      },\n    )\n  },\n\n  // app.auth\n  makeAuthSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth\n      },\n    )\n  },\n\n  // app.auth.user.phones with isSelected\n  makeAuthSelectedPhoneSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.phones.find((phone: UserPhoneType) => phone.isSelected)\n      },\n    )\n  },\n\n  // app.auth.user.phones with isSelected\n  makeAuthSelectedPhoneIdSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        const selectedPhone = auth.user.phones.find((phone: UserPhoneType) => phone.isSelected)\n\n        if (!selectedPhone) {\n          return \"\"\n        }\n        return selectedPhone.phoneId\n      },\n    )\n  },\n\n  // app.auth.user.addresses with isBillingAddress\n  makeAuthBillingAddressSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.addresses.find((address: UserAddressType) => address.isBillingAddress)\n      },\n    )\n  },\n\n  // app.auth.user.addresses with isShippingAddress\n  makeAuthShippingAddressSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.addresses.find((address: UserAddressType) => address.isShippingAddress)\n      },\n    )\n  },\n\n  // app.auth.user to validate customer basic info\n  makeAuthValidateCustomerBasicInfoSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.firstName && auth.user.lastName && auth.user.email\n      },\n    )\n  },\n\n  // app.auth.user to validate customer phone info\n  makeAuthValidateCustomerPhoneSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.phones.find((phone: UserPhoneType) => phone.isSelected)\n      },\n    )\n  },\n\n  // app.auth.user to validate customer phone info\n  makeAuthValidateCustomerShippingAddressSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.addresses.find((address: UserAddressType) => address.isShippingAddress)\n      },\n    )\n  },\n\n  // app.auth.user to validate customer phone info\n  makeAuthValidateCustomerBillingAddressSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth\n      ],\n      (auth) => {\n        return auth.user.addresses.find((address: UserAddressType) => address.isBillingAddress)\n      },\n    )\n  },\n\n  // app.private.stripeClientSecret\n  makeStipeClientSecretSelector: () => {\n    return createSelector(\n      [\n        rsSelector.senstive.getStripeClientSecret\n      ],\n      (stripeClientSecret) => {\n        return stripeClientSecret\n      },\n    )\n  },\n\n  // app.previousUrl\n  makePreviousUrlSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getPreviousUrl\n      ],\n      (previousUrl) => {\n        return previousUrl\n      },\n    )\n  },\n\n  // app.message\n  makeMessageSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getMessage\n      ],\n      (message) => {\n        return message\n      },\n    )\n  },\n\n\n  // app.searchKeyword\n  makeSearchKeywordSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getSearchKeyword\n      ],\n      (keyword) => {\n        return keyword\n      },\n    )\n  },\n\n\n  // app.requestTracker\n  makeRequestTrackerSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getRequestTracker\n      ],\n      (requestTracker) => {\n        return requestTracker\n      },\n    )\n  },\n\n\n  // app.fetchStatus.products.get\n  makeFetchProductFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchProductFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // app.fetchStatus.categorys.get\n  makeFetchCategoryFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchCategoryFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // app.fetchStatus.orders.get\n  makeFetchOrderFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchOrderFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // app.fetchStatus.users.get\n  makeFetchUserFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchUserFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // app.fetchStatus.reviews.get\n  makeFetchReviewFetchStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getFetchReviewFetchStatus\n      ],\n      (fetchStatus) => {\n        return fetchStatus\n      },\n    )\n  },\n\n  // domain.categories\n  makeCategorySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCategory\n      ],\n      (normalizedCategories) => {\n\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(normalizedCategories).length === 0) {\n          return []\n        }\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          Object.keys(normalizedCategories), // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          categorySchemaArray,\n          {\n            categories: normalizedCategories\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        return denormalizedEntities\n      },\n    )\n  },\n\n  // domain.categories\n  makeCategoryWithoutCacheSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCategory,\n        rsSelector.domain.getCategoryPagination,\n      ],\n      (normalizedCategories, pagination) => {\n\n        // need pagination??\n\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(normalizedCategories).length === 0) {\n          return []\n        }\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          Object.keys(normalizedCategories), // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          categorySchemaArray,\n          {\n            categories: normalizedCategories\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        console.log(denormalizedEntities)\n\n        return denormalizedEntities\n      },\n    )\n  },\n\n  // domain.categories.pagination\n  makeCategoryPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCategoryPagination\n      ],\n      (pagination) => {\n        return pagination\n      },\n    )\n  },\n\n  // domain.categories query string (query + pagination)\n  makeCategoryQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCategoryPagination\n      ],\n      (pagination) => {\n        // react state should be immutable so put empty object first\n        return merge({}, { page: pagination.page, limit: pagination.limit })\n      },\n    )\n  },\n\n  // domain.reviews\n  makeReviewSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReview,\n      ],\n      (reviews) => {\n\n        return reviews\n      },\n    )\n  },\n\n  // domain.reviews.pagination\n  makeReviewPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewPagination\n      ],\n      (pagination) => {\n\n        return pagination\n      },\n    )\n  },\n\n  // domain.reviews.query\n  makeReviewQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQuerySearchQuery,\n        rsSelector.domain.getReviewQueryUserId,\n        rsSelector.domain.getReviewQueryProductId,\n        rsSelector.domain.getReviewQueryStartDate,\n        rsSelector.domain.getReviewQueryEndDate,\n        rsSelector.domain.getReviewQueryIsVerified,\n        rsSelector.domain.getReviewQueryReviewPoint,\n        rsSelector.domain.getReviewQuerySort,\n\n      ],\n      (searchQuery, userId, productId, startDate, endDate, isVerified, reviewPoint, sort) => {\n        return {\n          searchQuery: searchQuery,\n          userId: userId,\n          productId: productId,\n          reviewPoint: reviewPoint,\n          isVerified: isVerified,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n        }\n      },\n    )\n  },\n\n  makeReviewQuerySearchQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQuerySearchQuery\n      ],\n      (searchQuery) => {\n        return searchQuery\n      },\n    )\n  },\n\n  makeReviewQueryProductIdSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryProductId\n      ],\n      (productId) => {\n        return productId\n      },\n    )\n  },\n\n  makeReviewQueryUserIdSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryUserId\n      ],\n      (userId) => {\n        return userId\n      },\n    )\n  },\n\n  makeReviewQueryReviewPointSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryReviewPoint\n      ],\n      (reviewPoint) => {\n        return reviewPoint\n      },\n    )\n  },\n\n  makeReviewQueryIsVerifiedSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryIsVerified\n      ],\n      (isDiscount) => {\n        return isDiscount\n      },\n    )\n  },\n\n  makeReviewQueryStartDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryStartDate\n      ],\n      (startDate) => {\n        return startDate\n      },\n    )\n  },\n\n  makeReviewQueryEndDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQueryEndDate\n      ],\n      (endDate) => {\n        return endDate\n      },\n    )\n  },\n\n  makeReviewQuerySortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQuerySort\n      ],\n      (sort) => {\n        return sort\n      },\n    )\n  },\n\n  // domain.reviews query string (query + pagination)\n  makeReviewQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getReviewQuery,\n        rsSelector.domain.getReviewPagination\n      ],\n      (query, pagination) => {\n        // react state should be immutable so put empty object first\n        return merge({}, query, { page: pagination.page, limit: pagination.limit })\n      },\n    )\n  },\n\n  // domain.cartItem\n  makeCartItemSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCartItem\n      ],\n      (cartItem) => {\n        // this is array of cart item\n        return cartItem\n      },\n    )\n  },\n\n  // domain.cartItem with selected\n  makeSelectedCartItemSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCartItem\n      ],\n      (cartItem) => {\n        // this is array of cart item\n        return cartItem.filter((cart: CartItemType) => cart.isSelected)\n      },\n    )\n  },\n\n  // domain.cartItem (# of cart items) \n  makeNumberOfCartItemSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCartItem\n      ],\n      (cartItem) => {\n        return cartItem.length;\n      },\n    )\n  },\n\n  // domain.wishlistItem\n  makeWishlistItemSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItem\n      ],\n      (wishlistItem) => {\n        // this is array of cart item\n        return wishlistItem\n      },\n    )\n  },\n\n  // domain.wishlistItem\n  makeSingleWishlistItemSelector: (wishlistItemId: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItem\n      ],\n      (wishlistItem) => {\n        // this is array of cart item\n        return wishlistItem.find((wishlistItem: WishlistItemType) => wishlistItem.wishlistItemId === wishlistItemId)\n      },\n    )\n  },\n\n  // domain.wishlistItem.pagination\n  makeWishlistItemPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemPagination\n      ],\n      (pagination) => {\n        // this is array of cart item\n        return pagination\n      },\n    )\n  },\n\n  // domain.wishlistItems query string (query + pagination)\n  makeWishlistItemQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemPagination,\n        rsSelector.domain.getWishlistItemQuerySort,\n        rsSelector.domain.getWishlistItemQuerySearchQuery,\n        rsSelector.domain.getWishlistItemQueryStartDate,\n        rsSelector.domain.getWishlistItemQueryEndDate,\n        rsSelector.domain.getWishlistItemQueryReviewPoint,\n        rsSelector.domain.getWishlistItemQueryMinPrice,\n        rsSelector.domain.getWishlistItemQueryMaxPrice,\n        rsSelector.domain.getWishlistItemQueryIsDiscount,\n        rsSelector.app.getAuth, // don't forget this. used to get wishlist items for this user only.\n      ],\n      (pagination, sort, searchQuery, startDate, endDate, reviewPoint, minPrice, maxPrice, isDiscount, auth) => {\n        // react state should be immutable so put empty object first\n        return merge({}, {\n          sort: sort,\n          searchQuery: searchQuery,\n          startDate: startDate,\n          endDate: endDate,\n          reviewPoint: reviewPoint,\n          minPrice: minPrice,\n          maxPrice: maxPrice,\n          isDiscount: isDiscount,\n          page: pagination.page,\n          limit: pagination.limit,\n          userId: auth.user.userId,\n        })\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.isDiscount\n  makeWishlistItemQueryIsDiscountSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryIsDiscount,\n      ],\n      (isDiscount) => {\n        return isDiscount\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.maxPrice\n  makeWishlistItemQueryMaxPriceSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryMaxPrice,\n      ],\n      (maxPrice) => {\n        return maxPrice\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.minPrice\n  makeWishlistItemQueryMinPriceSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryMinPrice,\n      ],\n      (minPrice) => {\n        return minPrice\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.reviewPoint\n  makeWishlistItemQueryReviewPointSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryReviewPoint,\n      ],\n      (reviewPoint) => {\n        return reviewPoint\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.endDate\n  makeWishlistItemQueryEndDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryEndDate,\n      ],\n      (endDate) => {\n        return endDate\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.startDate\n  makeWishlistItemQueryStartDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQueryStartDate,\n      ],\n      (startDate) => {\n        return startDate\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.searchQuery\n  makeWishlistItemQuerySearchQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQuerySearchQuery,\n      ],\n      (searchQuery) => {\n        return searchQuery\n      },\n    )\n  },\n\n  // domain.wishlistItems.query.sort\n  makeWishlistItemQuerySortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getWishlistItemQuerySort,\n      ],\n      (sort) => {\n        return sort\n      },\n    )\n  },\n\n\n  // domain.users\n  makeUserSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUser\n      ],\n      (user) => {\n\n        /**\n         * TODO: Pagination & Sort & Filter\n         **/\n\n        // this is array of cart item\n        return user\n      },\n    )\n  },\n\n  // app.auth.user.phones with isSelected\n  makeUserSelectedPhoneIdSelector: (userId: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getUser\n      ],\n      (users) => {\n        const targetUser = users.find((user: UserType) => user.userId === userId);\n        const selectedPhone = targetUser.phones.find((phone: UserPhoneType) => phone.isSelected)\n\n        if (!selectedPhone) {\n          return \"\"\n        }\n        return selectedPhone.phoneId\n      },\n    )\n  },\n\n  // domain.users.pagination\n  makeUserPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserPagination\n      ],\n      (pagination) => {\n\n        return pagination\n      },\n    )\n  },\n\n  // domain.users query string (query + pagination)\n  makeUserQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQuerySearchQuery,\n        rsSelector.domain.getUserQueryStartDate,\n        rsSelector.domain.getUserQueryEndDate,\n        rsSelector.domain.getUserQuerySort,\n        rsSelector.domain.getUserPagination\n      ],\n      (searchQuery, startDate, endDate, sort, pagination) => {\n        // react state should be immutable so put empty object first\n        return merge({}, {\n          searchQuery: searchQuery,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n          page: pagination.page,\n          limit: pagination.limit\n        })\n      },\n    )\n  },\n\n  // domain.users.query\n  makeUserQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQuerySearchQuery,\n        rsSelector.domain.getUserQueryStartDate,\n        rsSelector.domain.getUserQueryEndDate,\n        rsSelector.domain.getUserQuerySort,\n\n      ],\n      (searchQuery, startDate, endDate, sort) => {\n\n        return {\n          searchQuery: searchQuery,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n        }\n      },\n    )\n  },\n\n  makeUserQuerySearchQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQuerySearchQuery\n      ],\n      (searchQuery) => {\n        return searchQuery\n      },\n    )\n  },\n\n  makeUserQueryStartDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQueryStartDate\n      ],\n      (startDate) => {\n        return startDate\n      },\n    )\n  },\n\n  makeUserQueryEndDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQueryEndDate\n      ],\n      (endDate) => {\n        return endDate\n      },\n    )\n  },\n\n  makeUserQuerySortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getUserQuerySort\n      ],\n      (sort) => {\n        return sort\n      },\n    )\n  },\n\n  // domain.users\n  makeUserByIdSelector: (userId: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getUser\n      ],\n      (user) => {\n\n        /**\n         * TODO: Pagination & Sort & Filter\n         **/\n\n        // this is array of cart item\n        return user.find((user: UserType) => user.userId === userId)\n      },\n    )\n  },\n\n  // domain.orders\n  makeOrderSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrder\n      ],\n      (order) => {\n\n        console.log(\"makeOrderSelector is called...\")\n        console.log(order)\n\n        return order\n      },\n    )\n  },\n\n  // domain.orders.data\n  makeOrderByIdSelector: (orderId: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrder\n      ],\n      (orders) => {\n\n        return orders.find((order: OrderType) => order.orderId === orderId);\n      },\n    )\n  },\n\n  // domain.orders.pagination\n  makeOrderPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderPagination\n      ],\n      (pagination) => {\n\n        return pagination\n      },\n    )\n  },\n\n  // domain.orders query string (query + pagination)\n  makeOrderQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQuerySearchQuery,\n        rsSelector.domain.getOrderQueryOrderStatus,\n        rsSelector.domain.getOrderQueryStartDate,\n        rsSelector.domain.getOrderQueryEndDate,\n        rsSelector.domain.getOrderQuerySort,\n        rsSelector.domain.getOrderPagination\n      ],\n      (searchQuery, orderStatus, startDate, endDate, sort, pagination) => {\n        // react state should be immutable so put empty object first\n        return merge({}, {\n          searchQuery: searchQuery,\n          orderStatus: orderStatus,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n          page: pagination.page,\n          limit: pagination.limit\n        })\n      },\n    )\n  },\n\n  // domain.orders.query\n  makeOrderQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQuerySearchQuery,\n        rsSelector.domain.getOrderQueryOrderStatus,\n        rsSelector.domain.getOrderQueryStartDate,\n        rsSelector.domain.getOrderQueryEndDate,\n        rsSelector.domain.getOrderQuerySort,\n\n      ],\n      (searchQuery, orderStatus, startDate, endDate, sort) => {\n\n        return {\n          searchQuery: searchQuery,\n          orderStatus: orderStatus,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n        }\n      },\n    )\n  },\n\n  makeOrderQuerySearchQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQuerySearchQuery\n      ],\n      (searchQuery) => {\n        return searchQuery\n      },\n    )\n  },\n\n  makeOrderQueryOrderStatusSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQueryOrderStatus\n      ],\n      (orderStatus) => {\n        return orderStatus\n      },\n    )\n  },\n\n  makeOrderQueryStartDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQueryStartDate\n      ],\n      (startDate) => {\n        return startDate\n      },\n    )\n  },\n\n  makeOrderQueryEndDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQueryEndDate\n      ],\n      (endDate) => {\n        return endDate\n      },\n    )\n  },\n\n  makeOrderQuerySortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getOrderQuerySort\n      ],\n      (sort) => {\n        return sort\n      },\n    )\n  },\n\n\n  // domain.products\n  makeProductWithoutCacheSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProduct,\n        rsSelector.domain.getProductPagination,\n      ],\n      (normalizedProducts, pagination) => {\n\n        console.log(\"should be called once create a new product\")\n        // need pagination??\n\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(normalizedProducts).length === 0) {\n          return []\n        }\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          Object.keys(normalizedProducts), // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          productSchemaArray,\n          {\n            products: normalizedProducts\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        console.log(denormalizedEntities)\n\n        return denormalizedEntities\n      },\n    )\n  },\n\n  // domain.products\n  makeProductSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProduct,\n        rsSelector.domain.getProductPagination,\n        rsSelector.domain.getProductCurItems,\n      ],\n      (normalizedProducts, pagination, curItems) => {\n\n        // need pagination??\n\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(normalizedProducts).length === 0) {\n          return []\n        }\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          curItems, // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          productSchemaArray,\n          {\n            products: normalizedProducts\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        console.log(denormalizedEntities)\n\n        return denormalizedEntities\n      },\n    )\n  },\n\n  // domain.products\n  // mainly used for find this product at product detail page rather than sending request to api again.\n  /**\n   * this is not really performant. \n   *\n   * instead, you should create new state for teh current target product on redux store. then, when users click the product link, update the target product\n   * state and make selector for the target product when the user lands on the product detail page.\n   *\n   * #REFACTOR\n   **/\n  makeProductByPathSelector: (path: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getProduct,\n      ],\n      (normalizedProducts) => {\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          Object.keys(normalizedProducts), // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          productSchemaArray,\n          {\n            products: normalizedProducts\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        console.log(denormalizedEntities)\n\n        return denormalizedEntities.find((product: ProductType) => product.productPath === path);\n      },\n    )\n  },\n\n\n\n  /**\n   * get a list of product variant by product id\n   **/\n  makeProductVariantByProductIdSelector: (productId: string) => {\n    return createSelector(\n      [\n        rsSelector.domain.getProduct\n      ],\n      (normalizedProducts) => {\n        /**\n         * return empty array before fetch\n         **/\n        if (Object.keys(normalizedProducts).length === 0) {\n          return null\n        }\n\n        /**\n         * denormalize\n         *\n         * this return { 'domain-name': [{ domain1 }, { domain2 }] in the format\n         **/\n        const denormalizedEntities = denormalize(\n          [productId], // ex, [0, 1, 2, 3, 4] ('result' prop of normalized data)\n          productSchemaArray,\n          {\n            products: normalizedProducts\n          }, // entities prop of normalized data (ex, { animes: { \"1\": { ... }, \"2\": { ... }, ... }})\n        )\n\n        console.log(denormalizedEntities)\n\n        return denormalizedEntities[0]\n      },\n    )\n  },\n\n  // domain.products.query\n  makeProductQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQuerySearchQuery,\n        rsSelector.domain.getProductQueryCategoryId,\n        rsSelector.domain.getProductQueryStartDate,\n        rsSelector.domain.getProductQueryEndDate,\n        rsSelector.domain.getProductQueryMinPrice,\n        rsSelector.domain.getProductQueryMaxPrice,\n        rsSelector.domain.getProductQueryIsDiscount,\n        rsSelector.domain.getProductQueryReviewPoint,\n        rsSelector.domain.getProductQuerySort,\n\n      ],\n      (searchQuery, categoryId, startDate, endDate, minPrice, maxPrice, isDiscount, reviewPoint, sort) => {\n\n        return {\n          searchQuery: searchQuery,\n          categoryId: categoryId,\n          minPrice: minPrice,\n          maxPrice: maxPrice,\n          reviewPoint: reviewPoint,\n          isDiscount: isDiscount,\n          startDate: startDate,\n          endDate: endDate,\n          sort: sort,\n        }\n      },\n    )\n  },\n\n  makeProductQuerySearchQuerySelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQuerySearchQuery\n      ],\n      (searchQuery) => {\n        return searchQuery\n      },\n    )\n  },\n\n  makeProductQueryCategoryIdSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryCategoryId\n      ],\n      (categoryId) => {\n        return categoryId\n      },\n    )\n  },\n\n  makeProductQueryMinPriceSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryMinPrice\n      ],\n      (minPrice) => {\n        return minPrice\n      },\n    )\n  },\n\n  makeProductQueryMaxPriceSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryMaxPrice\n      ],\n      (maxPrice) => {\n        return maxPrice\n      },\n    )\n  },\n\n  makeProductQueryReviewPointSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryReviewPoint\n      ],\n      (reviewPoint) => {\n        return reviewPoint\n      },\n    )\n  },\n\n  makeProductQueryIsDiscountSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryIsDiscount\n      ],\n      (isDiscount) => {\n        return isDiscount\n      },\n    )\n  },\n\n  makeProductQueryStartDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryStartDate\n      ],\n      (startDate) => {\n        return startDate\n      },\n    )\n  },\n\n  makeProductQueryEndDateSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQueryEndDate\n      ],\n      (endDate) => {\n        return endDate\n      },\n    )\n  },\n\n  makeProductQuerySortSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQuerySort\n      ],\n      (sort) => {\n        return sort\n      },\n    )\n  },\n\n  // domain.products.pagination\n  makeProductPaginationSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductPagination\n      ],\n      (pagination) => {\n\n        return pagination\n      },\n    )\n  },\n\n\n  // domain.products query string (query + pagination)\n  makeProductQueryStringSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getProductQuery,\n        rsSelector.domain.getProductPagination\n      ],\n      (query, pagination) => {\n        // react state should be immutable so put empty object first\n        return merge({}, query, { page: pagination.page, limit: pagination.limit })\n      },\n    )\n  },\n\n\n  // order criteria (for postOrderActionCreator) to create order at final confirm.\n  // just only use when creating a new order.\n  makeOrderCriteriaSelector: () => {\n    return createSelector(\n      [\n        rsSelector.app.getAuth,\n        mSelector.makeSelectedCartItemSelector(),\n        mSelector.makeAuthSelectedPhoneSelector(),\n        mSelector.makeAuthShippingAddressSelector(),\n        mSelector.makeAuthBillingAddressSelector(),\n      ],\n      (auth, selectedCartItems, selectedPhone, shippingAddress, billingAddress) => {\n        return {\n          orderFirstName: auth.user.firstName,\n          orderLastName: auth.user.lastName,\n          orderEmail: auth.user.email,\n          orderPhone: toPhoneStringWithoutSpace(selectedPhone),\n          shippingAddress: toOrderAddress(shippingAddress),\n          billingAddress: toOrderAddress(billingAddress),\n          currency: \"cad\", // refactor when necessary\n          note: \"\",\n          userId: (auth.userType === UserTypeEnum.MEMBER) ? auth.user.userId : null,\n          orderDetails: toOrderDetailCriteriaList(selectedCartItems),\n        } as OrderCriteria\n      },\n    )\n  },\n\n  // get productIds which is selected in cart.\n  // use case: delete those cartItems after checkout\n  makeProductAndVariantIdsFromCurCheckoutOrderSelector: () => {\n    return createSelector(\n      [\n        rsSelector.domain.getCheckoutOrder\n      ],\n      (checkoutOrder) => {\n        return checkoutOrder.orderDetails.map((orderDetail: OrderDetailType) => ({ productId: orderDetail.product.productId, productVariantId: orderDetail.productVariant.variantId }))\n      },\n    )\n  },\n}\n","import { asyncForEach, emptyNestedObject } from 'src/utils';\nimport * as yup from 'yup';\nimport { DomainValidationType, UseValidationInputType, UseValidationOutputType } from './types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nexport const useValidation = <D extends Record<string, unknown>>(input: UseValidationInputType<D>): UseValidationOutputType<D> => {\n\n\n  const updateValidationAt: (path: string, value: any) => void = (path, value) => {\n\n    const tempValidationData: DomainValidationType<D> = cloneDeep(input.curValidationDomain)\n\n    const tempDomainData: D = cloneDeep(input.curDomain)\n\n    // set cur entered value to tempDomainData\n    set(tempDomainData, path, value)\n\n    input.schema.validateAt(path, tempDomainData)\n      .then(() => {\n        console.log(\"passed finally\")\n        input.setValidationDomain((prev: DomainValidationType<D>) => {\n          return set(tempValidationData, path, \"\")\n        })\n      }).catch((error: yup.ValidationError) => {\n        console.log(\"still error\")\n        input.setValidationDomain((prev: DomainValidationType<D>) => {\n          return set(tempValidationData, path, error.errors[0])\n        })\n      })\n  }\n\n  const updateAllValidation: () => void = async () => {\n\n    // copy cur domain state to temp validation state\n    const tempEmptyValidationData = cloneDeep(input.defaultValidationDomain)\n    console.log(tempEmptyValidationData)\n\n    console.log(\"error object\")\n    await input.schema.validate(input.curDomain, { abortEarly: false })\n      .then(() => {\n        // success\n      })\n      .catch((error) => {\n        error.inner.forEach((e: any) => {\n          console.log(\"path: \" + e.path)\n          console.log(\"message: \" + e.message)\n          set(tempEmptyValidationData, e.path, e.message);\n        })\n\n      })\n\n    console.log(tempEmptyValidationData)\n    /**\n     * should use 'async/await' for 'yup' async validation\n     *\n     *  - ref: https://gist.github.com/Atinux/fd2bcce63e44a7d3addddc166ce93fb2\n     *\n     **/\n    //await asyncForEach(propList, async (prop: string) => {\n    //  await input.schema.validateAt(prop, input.curDomain).catch((error: yup.ValidationError) => {\n    //    tempUserAccountValidationData[prop as keyof DomainValidationType<D>] = error.errors[0]\n    //  })\n    //})\n\n    input.setValidationDomain(tempEmptyValidationData as DomainValidationType<D>)\n  }\n\n  const isValidSync: (curDomain: D) => boolean = (curDomain) => {\n    return input.schema.isValidSync(curDomain)\n  }\n\n  return {\n    updateValidationAt: updateValidationAt,\n    updateAllValidation: updateAllValidation,\n    isValidSync: isValidSync,\n  }\n}\n\n","import * as yup from 'yup';\n\n/**\n * note:\n *\n *  - if props are optional and might have null value, use 'nullable()'\n *\n **/\n\nexport const userAccountSchema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  email: yup.string().required().email(),\n  /**\n   * conditional required password and confirm: if password/confirm is null, it is optional\n   **/\n  password: yup.lazy((value) => value ? yup.string().min(4, \"password must be at least 4 characters\").required(\"password is required\") : yup.string().notRequired()), \n  confirm: yup.lazy((cf) => {\n      return yup.string().when('password', {\n        is: (pw: string) => pw || (!pw && cf),\n        then: yup.string().oneOf([yup.ref('password'), null], 'confirm must match with password'),\n        otherwise: yup.string().notRequired()\n      })\n    })\n  \n  //yup.string().oneOf([yup.ref('password'), null], \"password must match\")\n})\n\n\nexport const userAccountPhoneSchema = yup.object().shape({\n  phoneNumber: yup.string().required(),\n  countryCode: yup.string().required(),\n})\n\nexport const userAccountAddressSchema = yup.object().shape({\n  address1: yup.string().required(),\n  address2: yup.string().optional().nullable(),\n  city: yup.string().required(),\n  province: yup.string().required(),\n  country: yup.string().required(),\n  postalCode: yup.string().required(),\n})\n\nexport const adminLoginSchema = yup.object().shape({\n  email: yup.string().required().email(),\n  password: yup.string().required(),\n})\n\nexport const memberSignupSchema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  email: yup.string().required().email(),\n  password: yup.string().required(),\n  confirm: yup.string().required().oneOf([yup.ref('password'), null], \"password must match\")\n})\n\nexport const memberLoginSchema = yup.object().shape({\n  email: yup.string().required().email(),\n  password: yup.string().required(),\n})\n\n// products\nexport const productVariantSchema = yup.object().shape({\n  /**\n   * product size object validation not working.\n   *\n   * always complains about 'final value is null'....\n   *\n   * for now, make this nullable.\n   *\n   **/\n  productSize: yup.object().nullable(),\n  variantColor: yup.string().required(),\n  variantUnitPrice: yup.string().optional().nullable(),\n  variantDiscountPrice: yup.number().optional().nullable(),\n  variantDiscountStartDate: yup.string().optional().nullable(),\n  variantDiscountEndDate: yup.string().optional().nullable(),\n  variantStock: yup.number().required(),\n  isDiscount: yup.string().optional().nullable(),\n  note: yup.string().optional().nullable(),\n  variantWeight: yup.number().required(),\n  variantHeight: yup.number().required(),\n  variantLength: yup.number().required(),\n  variantWidth: yup.number().required(),\n})\n\nexport const productSchema = yup.object().shape({\n  productName: yup.string().required(),\n  productDescription: yup.string().required(),\n  productPath: yup.string().required(),\n  productImages: yup.array().test(\n    'has-first-element', \n    'the primary product image (1st image) is required.',\n    /** \n     * ref: https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object \n     * - the first file object exists and not empty object\n     **/\n    (value) => {\n      console.log(\"product images\")\n      console.log(value)\n      console.log(\"result\")\n      console.log(value[0] != null && Object.keys(value[0]).length === 0 && value[0].constructor === Object)\n      return value[0].productImagePath != \"\"\n    }\n  ),\n  productBaseUnitPrice: yup.string().required(),\n  productBaseDiscountPrice: yup.string().required(),\n  productBaseDiscountStartDate: yup.string().required(),\n  productBaseDiscountEndDate: yup.string().required(),\n  isDiscount: yup.string().required(),\n  isPublic: yup.string().test(\n    'has-at-least-one-varaint',\n    'Oops. you need to have at least one variant. come back here after you create variants.',\n    (value) => {\n      /**\n       * be careful this 'value' is string which contains 'true'/'false' as string so you need to convert it to boolean first.\n       **/\n      const isPublic = (value === 'true');\n      if (isPublic) {\n        const variants = yup.ref(\"productVariants\")\n        return variants && (variants as unknown as any[]).length > 0\n      }\n      return true\n    }\n  ),\n  releaseDate: yup.string().optional().nullable(),\n  /**\n   * cateogry object validation not working.\n   *\n   * always complains about 'final value is null'....\n   *\n   * for now, make this nullable.\n   *\n   **/\n  category: yup.object().shape({\n    categoryId: yup.string().required() \n  }).nullable(),\n  productVariants: yup.array().of(productVariantSchema),\n  note: yup.string().optional().nullable(),\n})\n\n// categories\nexport const categorySchema = yup.object().shape({\n  categoryName: yup.string().required(),\n  categoryDescription: yup.string().required(),\n  categoryPath: yup.string().required(),\n})\n\n// reviews\nexport const reviewSchema = yup.object().shape({\n  reviewPoint: yup.number().required(),\n  reviewTitle: yup.string().required(),\n  reviewDescription: yup.string().required(),\n  isVerified: yup.bool().required(),\n  note: yup.string().optional().nullable(),\n})\n\n// contact \nexport const contactSchema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  email: yup.string().required().email(),\n  title: yup.string().required(),\n  description: yup.string().required(),\n})\n\n// admin company\nexport const companySchema = yup.object().shape({\n  companyName: yup.string().required(),\n  companyDescription: yup.string().required(),\n  companyEmail: yup.string().required().email(),\n  phoneNumber: yup.string().required(),\n  countryCode: yup.string().required(),\n  address1: yup.string().required(),\n  address2: yup.string().optional().nullable(),\n  city: yup.string().required(),\n  province: yup.string().required(),\n  country: yup.string().required(),\n  postalCode: yup.string().required(),\n})\n\n// forgot password \nexport const forgotPasswordSchema = yup.object().shape({\n  email: yup.string().required().email(),\n})\n\n// reset password\nexport const resetPasswordSchema = yup.object().shape({\n  password: yup.string().required(),\n  confirm: yup.string().required().oneOf([yup.ref('password'), null], \"password must match\")\n})\n\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { defaultUser, UserAddressType, UserCriteria, UserPhoneType, UserType, UserPhoneCriteria, UserAddressCriteria, UserCompanyCriteria, AdminCompanyType } from \"domain/user/types\";\nimport { AuthType, MessageStateType, MessageTypeEnum, RequestTrackerType, UserTypeEnum } from \"src/app\";\nimport { getNanoId } from \"src/utils\";\nimport { OrderEventCriteria } from \"domain/order/types\";\n\n/**\n * common reducer action type\n *   - call multiple reducers on different properties\n **/\n\n// cancel all sort & filter\nexport const clearAllSortAndFilterActionCreator = createAction(\"/app/common/clearAllSortAndFilter\")\nexport const clearAllSortAndFilterActionTypeName = clearAllSortAndFilterActionCreator().type\n\n\n// for PUT (replace) request\nexport declare type PutAuthActionType = UserCriteria\nexport const putAuthActionCreator = createAction<PutAuthActionType>(\"saga/domain/auth/put\")\nexport const putAuthActionTypeName = putAuthActionCreator().type\n\n// for POST (create a phone) request\nexport declare type PostAuthPhoneActionType = UserPhoneCriteria\nexport const postAuthPhoneActionCreator = createAction<PostAuthPhoneActionType>(\"saga/domain/auth/phone/post\")\nexport const postAuthPhoneActionTypeName = postAuthPhoneActionCreator().type\n\n// for PUT (replace a phone) request\nexport declare type PutAuthPhoneActionType = UserPhoneCriteria\nexport const putAuthPhoneActionCreator = createAction<PutAuthPhoneActionType>(\"saga/domain/auth/phone/put\")\nexport const putAuthPhoneActionTypeName = putAuthPhoneActionCreator().type\n\n// for PATCH (replace a phone) request\nexport declare type PatchAuthPhoneActionType = { phoneId: string } \nexport const patchAuthPhoneActionCreator = createAction<PatchAuthPhoneActionType>(\"saga/domain/auth/phone/patch\")\nexport const patchAuthPhoneActionTypeName = patchAuthPhoneActionCreator().type\n\n// for DELETE (delete a phone) request\nexport declare type DeleteAuthPhoneActionType = { phoneId: string }\nexport const deleteAuthPhoneActionCreator = createAction<DeleteAuthPhoneActionType>(\"saga/domain/auth/phone/delete\")\nexport const deleteAuthPhoneActionTypeName = deleteAuthPhoneActionCreator().type\n\n\n// for POST (create a address) request\nexport declare type PostAuthAddressActionType = UserAddressCriteria\nexport const postAuthAddressActionCreator = createAction<PostAuthAddressActionType>(\"saga/domain/auth/address/post\")\nexport const postAuthAddressActionTypeName = postAuthAddressActionCreator().type\n\n// for PUT (replace a address) request\nexport declare type PutAuthAddressActionType = UserAddressCriteria\nexport const putAuthAddressActionCreator = createAction<PutAuthAddressActionType>(\"saga/domain/auth/address/put\")\nexport const putAuthAddressActionTypeName = putAuthAddressActionCreator().type\n\n// for PATCH (replace a address) request\nexport declare type PatchAuthAddressActionType = { addressId: string, type: string }  // 'billing'/'shipping'\nexport const patchAuthAddressActionCreator = createAction<PatchAuthAddressActionType>(\"saga/domain/auth/address/patch\")\nexport const patchAuthAddressActionTypeName = patchAuthAddressActionCreator().type\n\n// for DELETE (delete a address) request\nexport declare type DeleteAuthAddressActionType = { addressId: string }\nexport const deleteAuthAddressActionCreator = createAction<DeleteAuthAddressActionType>(\"saga/domain/auth/address/delete\")\nexport const deleteAuthAddressActionTypeName = deleteAuthAddressActionCreator().type\n\n\n// for POST (avatar-image) request\nexport declare type PostAuthAvatarImageActionType = { avatarImage: File, userId: string } \nexport const postAuthAvatarImageActionCreator = createAction<PostAuthAvatarImageActionType>(\"saga/domain/auth/avatar-image/post\")\nexport const postAuthAvatarImageActionTypeName = postAuthAvatarImageActionCreator().type\n\n\n// for DELETE (avatar-image) request\nexport declare type DeleteAuthAvatarImageActionType = { userId: string } \nexport const deleteAuthAvatarImageActionCreator = createAction<DeleteAuthAvatarImageActionType>(\"saga/domain/auth/avatar-image/delete\")\nexport const deleteAuthAvatarImageActionTypeName = deleteAuthAvatarImageActionCreator().type\n\n// for PUT (replace a company) request\nexport declare type PutAuthCompanyActionType = UserCompanyCriteria\nexport const putAuthCompanyActionCreator = createAction<PutAuthCompanyActionType>(\"saga/domain/auth/company/put\")\nexport const putAuthCompanyActionTypeName = putAuthCompanyActionCreator().type\n\n// for GET (fetch auth order) request\nexport declare type FetchAuthOrderActionType = { userId: string } \nexport const fetchAuthOrderActionCreator = createAction<FetchAuthOrderActionType>(\"saga/domain/auth/order/fetch\")\nexport const fetchAuthOrderActionTypeName = fetchAuthOrderActionCreator().type\n\n// for GET (fetch single auth order) request\nexport declare type FetchSingleAuthOrderActionType = { userId: string, orderId: string } \nexport const fetchSingleAuthOrderActionCreator = createAction<FetchSingleAuthOrderActionType>(\"saga/domain/auth/order/fetchSingle\")\nexport const fetchSingleAuthOrderActionTypeName = fetchSingleAuthOrderActionCreator().type\n\n// for POST (post auth order event) request\nexport declare type PostAuthOrderEventActionType = OrderEventCriteria & { orderId: string } \nexport const postAuthOrderEventActionCreator = createAction<PostAuthOrderEventActionType>(\"saga/domain/auth/order/fetch\")\nexport const postAuthOrderEventActionTypeName = postAuthOrderEventActionCreator().type\n\n\n/**\n * app.auth state Slice\n **/\nexport type authUpdateActionType = PayloadAction<AuthType>\n\nexport const authSlice = createSlice({\n  name: \"app/auth\", // a name used in action type\n  initialState: {\n    isLoggedIn: false,\n    userType: UserTypeEnum.GUEST\n  } as AuthType,\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    login: (state: AuthType, action: authUpdateActionType) => action.payload,\n    loginWithUser: (state: AuthType,  action: PayloadAction<UserType>) => {\n      return {\n        isLoggedIn: true,\n        userType: action.payload.userType.userType,\n        user: action.payload,\n      }\n    },\n    update: (state: AuthType, action: authUpdateActionType) => action.payload,\n    logout: (state: AuthType) => ({\n      isLoggedIn: false,\n      userType: UserTypeEnum.GUEST,\n      user: defaultUser\n    }),\n\n    updateAvatarImagePath: (state: AuthType, action: PayloadAction<string>) => {\n      state.user.avatarImagePath = action.payload\n      return state\n    },\n\n    switchPrimaryPhone: (state: AuthType, action: PayloadAction<{phoneId: string}>) => {\n      state.user.phones = state.user.phones.map((phone: UserPhoneType) => {\n        if (phone.phoneId == action.payload.phoneId) {\n          phone.isSelected = true\n        } else {\n          phone.isSelected = false\n        }\n        return phone\n      })\n      return state\n    },\n\n    replacePhone: (state: AuthType, action: PayloadAction<UserPhoneType[]>) => {\n      state.user.phones = action.payload\n      return state;\n    },\n\n    appendPhone: (state: AuthType, action: PayloadAction<UserPhoneType>) => {\n      state.user.phones.push(action.payload)\n      return state\n    },\n\n    updatePhone: (state: AuthType, action: PayloadAction<UserPhoneType>) => {\n      state.user.phones = state.user.phones.map((phone: UserPhoneType) => {\n        if (phone.phoneId == action.payload.phoneId) {\n          return action.payload\n        }\n        return phone\n      })\n      return state\n    },\n\n    deletePhone: (state: AuthType, action: PayloadAction<{ phoneId: string }>) => {\n      state.user.phones = state.user.phones.filter((phone: UserPhoneType) => phone.phoneId != action.payload.phoneId)\n      return state\n    },\n\n    switchShippingAddress: (state: AuthType, action: PayloadAction<{ addressId: string }>) => {\n      state.user.addresses = state.user.addresses.map((address: UserAddressType) => {\n        if (address.addressId == action.payload.addressId) {\n          address.isShippingAddress = true\n        } else {\n          address.isShippingAddress = false\n        }\n        return address\n      })\n      return state\n    },\n\n    switchBillingAddress: (state: AuthType, action: PayloadAction<{ addressId: string }>) => {\n      state.user.addresses = state.user.addresses.map((address: UserAddressType) => {\n        if (address.addressId == action.payload.addressId) {\n          address.isBillingAddress = true\n        } else {\n          address.isBillingAddress = false\n        }\n        return address\n      })\n      return state\n    },\n\n    replaceAddress: (state: AuthType, action: PayloadAction<UserAddressType[]>) => {\n      state.user.addresses = action.payload\n      return state;\n    },\n\n    appendAddress: (state: AuthType, action: PayloadAction<UserAddressType>) => {\n      state.user.addresses.push(action.payload)\n      return state\n    },\n\n    updateAddress: (state: AuthType, action: PayloadAction<UserAddressType>) => {\n      state.user.addresses = state.user.addresses.map((address: UserAddressType) => {\n        if (address.addressId == action.payload.addressId) {\n          return action.payload\n        }\n        return address\n      })\n      return state\n    },\n\n    deleteAddress: (state: AuthType, action: PayloadAction<{ addressId: string }>) => {\n      state.user.addresses = state.user.addresses.filter((address: UserAddressType) => address.addressId != action.payload.addressId)\n      return state\n    },\n\n    updateCompany: (state: AuthType, action: PayloadAction<AdminCompanyType>) => {\n      state.user.companies = state.user.companies.map((company: AdminCompanyType) => {\n        if (company.companyId == action.payload.companyId) {\n          return action.payload\n        }\n        return company\n      })\n      return state\n    },\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  //extraReducers: (builder) => {\n  //  builder.addCase(\n  //    clearAllSortAndFilterActionCreator,\n  //    (state: string) => \"\"\n  //  )\n  //}\n})\n\nexport const authSliceReducer = authSlice.reducer\nexport const authActions = authSlice.actions\n\n/**\n * app.previousUrl state Slice\n **/\nexport type previousUrlUpdateActionType = PayloadAction<string>\n\nexport const previousUrlSlice = createSlice({\n  name: \"app/previousUrl\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string, action: previousUrlUpdateActionType) => action.payload,\n    clear: (state: string) => \"\",\n\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: string) => \"\"\n    )\n  }\n})\n\nexport const previousUrlSliceReducer = previousUrlSlice.reducer\nexport const previousUrlActions = previousUrlSlice.actions\n\n\n/**\n * app.message state Slice\n **/\nexport type MessageActionType = PayloadAction<MessageStateType>\n\nexport const messageSlice = createSlice({\n  name: \"app/message\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: MessageStateType, action: MessageActionType) => action.payload,\n    clear: (state: MessageStateType) => ({\n      id: getNanoId(),\n      type: MessageTypeEnum.INITIAL,\n      message: \"\",\n    }),\n\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const messageSliceReducer = messageSlice.reducer\nexport const messageActions = messageSlice.actions\n\n\n\n/**\n * app.searchKeyword state Slice\n **/\nexport type searchKeywordUpdateActionType = PayloadAction<string>\n\nexport const searchKeywordSlice = createSlice({\n  name: \"app/searchKeyword\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string, action: searchKeywordUpdateActionType) => action.payload,\n    clear: (state: string) => \"\",\n\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: (builder) => {\n    builder.addCase(\n      clearAllSortAndFilterActionCreator,\n      (state: string) => \"\"\n    )\n  }\n})\n\nexport const searchKeywordSliceReducer = searchKeywordSlice.reducer\nexport const searchKeywordActions = searchKeywordSlice.actions\n\n\n/**\n * app.requestTracker state Slice\n **/\nexport type requestTrackerUpdateActionType = PayloadAction<RequestTrackerType>\n\nexport const requestTrackerSlice = createSlice({\n  name: \"app/requestTracker\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: RequestTrackerType, action: requestTrackerUpdateActionType) => ({ ...state, ...action.payload }),\n    clear: (state: RequestTrackerType) => null\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const requestTrackerSliceReducer = requestTrackerSlice.reducer\nexport const requestTrackerActions = requestTrackerSlice.actions\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { defaultUserBasicAccountData, defaultUserBasicAccountValidationData, UserBasicAccountDataType, UserBasicAccountValidationDataType, UserType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountSchema } from 'hooks/validation/rules';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { putAuthActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\ndeclare type UserAccountBasicManagementPropsType = {\n  user?: UserType\n}\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst UserAccountBasicManagement: React.FunctionComponent<UserAccountBasicManagementPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  //const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curUserAccountState, setUserAccountState] = React.useState<UserBasicAccountDataType>(defaultUserBasicAccountData)\n\n  // use effect to update user state if exists after render jsx\n  React.useEffect(() => {\n\n    if (props.user) {\n      setUserAccountState((prev: UserBasicAccountDataType) => ({\n        ...prev,\n        firstName: props.user.firstName,\n        lastName: props.user.lastName,\n        email: props.user.email,\n      }))\n    }\n\n  }, [])\n\n  // validation logic (should move to hooks)\n  const [curUserAccountValidationState, setUserAccountValidationState] = React.useState<UserBasicAccountValidationDataType>(defaultUserBasicAccountValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curUserAccountState,\n    curValidationDomain: curUserAccountValidationState,\n    schema: userAccountSchema,\n    setValidationDomain: setUserAccountValidationState,\n    defaultValidationDomain: defaultUserBasicAccountValidationData, \n  })\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  const handleConfirmInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextConfirm = e.currentTarget.value\n    updateValidationAt(\"confirm\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      confirm: nextConfirm\n    }));\n  }\n\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curUserAccountState)\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      dispatch(\n        putAuthActionCreator({\n          userId: auth.user.userId,\n          firstName: curUserAccountState.firstName,\n          lastName: curUserAccountState.lastName,\n          email: curUserAccountState.email,\n          ...(curUserAccountState.password ? { password: curUserAccountState.password } : {}), \n        }) \n      );\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Basic\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"first-name\"\n          label=\"First Name\"\n          className={classes.formControl}\n          value={curUserAccountState.firstName}\n          onChange={handleFirstNameInputChangeEvent}\n          helperText={curUserAccountValidationState.firstName}\n          error={curUserAccountValidationState.firstName !== \"\"}\n\n        />\n        <TextField\n          id=\"last-name\"\n          label=\"Last Name\"\n          className={classes.formControl}\n          value={curUserAccountState.lastName}\n          onChange={handleLastNameInputChangeEvent}\n          helperText={curUserAccountValidationState.lastName}\n          error={curUserAccountValidationState.lastName !== \"\"}\n        />\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          className={classes.formControl}\n          value={curUserAccountState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curUserAccountValidationState.email}\n          error={curUserAccountValidationState.email !== \"\"}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curUserAccountState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curUserAccountValidationState.password}\n          error={curUserAccountValidationState.password !== \"\"}\n        />\n        <TextField\n          id=\"confirm\"\n          label=\"Confirm\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curUserAccountState.confirm}\n          onChange={handleConfirmInputChangeEvent}\n          helperText={curUserAccountValidationState.confirm}\n          error={curUserAccountValidationState.confirm !== \"\"}\n        />\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleUserAccountSaveClickEvent}>\n            Save\n        </Button>\n        </Box>\n      </form>\n    </React.Fragment>\n  )\n}\n\nexport default UserAccountBasicManagement\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport { CustomerPhonesFormDataType, CustomerPhonesFormValidationDataType, defaultUserAccountValidationPhoneData, generateDefaultCustomerPhonesFormData, UserPhoneType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountPhoneSchema } from 'hooks/validation/rules';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAuthPhoneActionCreator, patchAuthPhoneActionCreator, postAuthPhoneActionCreator, putAuthPhoneActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type UserAccountPhoneManagementPropsType = {\n  phones: UserPhoneType[]\n}\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst UserAccountPhoneManagement: React.FunctionComponent<UserAccountPhoneManagementPropsType> = ({ phones }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  //const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curUserAccountPhoneState, setUserAccountPhoneState] = React.useState<CustomerPhonesFormDataType>(generateDefaultCustomerPhonesFormData());\n\n  // validation logic (should move to hooks)\n  const [curUserAccountPhoneValidationState, setUserAccountPhoneValidationState] = React.useState<CustomerPhonesFormValidationDataType>(defaultUserAccountValidationPhoneData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curUserAccountPhoneState,\n    curValidationDomain: curUserAccountPhoneValidationState,\n    schema: userAccountPhoneSchema,\n    setValidationDomain: setUserAccountPhoneValidationState,\n    defaultValidationDomain: defaultUserAccountValidationPhoneData,\n  })\n\n  // event handlers\n  const handlePhoneInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPhoneNumber = e.currentTarget.value\n    updateValidationAt(\"phoneNumber\", e.currentTarget.value);\n    setUserAccountPhoneState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      phoneNumber: nextPhoneNumber\n    }));\n\n  }\n\n  const handleCountryCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountryCode = e.currentTarget.value\n    updateValidationAt(\"countryCode\", e.currentTarget.value);\n    setUserAccountPhoneState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      countryCode: nextCountryCode\n    }));\n  }\n\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curUserAccountPhoneState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n\n        dispatch(\n          postAuthPhoneActionCreator({\n            phoneNumber: curUserAccountPhoneState.phoneNumber,\n            countryCode: curUserAccountPhoneState.countryCode,\n            isSelected: curUserAccountPhoneState.isSelected,\n          })\n        )\n\n      } else {\n        console.log(\"this one is to update existing one\")\n        dispatch(\n          putAuthPhoneActionCreator({\n            phoneId: curUserAccountPhoneState.phoneId,\n            phoneNumber: curUserAccountPhoneState.phoneNumber,\n            countryCode: curUserAccountPhoneState.countryCode,\n            isSelected: curUserAccountPhoneState.isSelected,\n          })\n        )\n      }\n\n      setModalOpen(false);\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewPhoneBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setUserAccountPhoneState(generateDefaultCustomerPhonesFormData())\n    setUserAccountPhoneValidationState(defaultUserAccountValidationPhoneData)\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing phone number\n  const handleDeletePhoneClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing phone number event triggered\")\n\n    const phoneId = e.currentTarget.getAttribute(\"data-phone-id\")\n\n    console.log(\"going to delete phone whose id is : \" + phoneId)\n\n    dispatch(\n      deleteAuthPhoneActionCreator({\n        phoneId: phoneId \n      })\n    )\n  }\n\n  // event handler to click an phone list item to update phone\n  const handlePhoneItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetPhoneId: string = e.currentTarget.getAttribute(\"data-phone-id\");\n    const targetPhone = auth.user.phones.find((phone: UserPhoneType) => {\n      return phone.phoneId == targetPhoneId\n    })\n\n    setUserAccountPhoneState(targetPhone);\n    setUserAccountPhoneValidationState(defaultUserAccountValidationPhoneData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // cur primary phone id\n  const curPrimaryId = useSelector(mSelector.makeAuthSelectedPhoneIdSelector())\n\n\n  const handlePhonePrimaryChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    const nextPrimePhoneId = e.currentTarget.value;\n\n    dispatch(\n      patchAuthPhoneActionCreator({ phoneId: nextPrimePhoneId  }) \n    );\n\n  }\n\n\n  // render functions\n\n  // display current phone number list\n  const renderCurPhoneListComponent: () => React.ReactNode = () => {\n    return auth.user.phones.map((phone: UserPhoneType) => {\n      return (\n        <ListItem key={phone.phoneId} data-phone-id={phone.phoneId} onClick={handlePhoneItemClickEvent}>\n          <ListItemAvatar>\n            <Avatar>\n              <PhoneIphoneIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={phone.phoneNumber}\n            secondary={phone.countryCode}\n          />\n          <ListItemSecondaryAction>\n            <FormControlLabel\n              value={phone.phoneId}\n              control={<Radio />}\n              label={(curPrimaryId == phone.phoneId) ? \"primary\" : \"\"}\n            />\n            <IconButton edge=\"end\" aria-label=\"delete\" data-phone-id={phone.phoneId} onClick={handleDeletePhoneClickEvent}>\n              <DeleteIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new phone number\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Phones\"}\n      </Typography>\n      <Box component=\"div\">\n        {(auth.user.phones.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Registered Any Phone Yet.\"}\n          </Typography>\n        )}\n        {(auth.user.phones.length > 0 &&\n          <RadioGroup\n            value={curPrimaryId}\n            aria-label=\"phone\"\n            name=\"user-phone-radio\"\n            onChange={handlePhonePrimaryChange}\n          >\n            <List className={classes.listBox}>\n              {renderCurPhoneListComponent()}\n            </List>\n          </RadioGroup>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewPhoneBtnClickEvent}>\n            Add New Phone\n        </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"phoneNumber\"\n            label=\"Phone\"\n            className={classes.formControl}\n            value={curUserAccountPhoneState.phoneNumber}\n            onChange={handlePhoneInputChangeEvent}\n            helperText={curUserAccountPhoneValidationState.phoneNumber}\n            error={curUserAccountPhoneValidationState.phoneNumber !== \"\"}\n\n          />\n          <TextField\n            id=\"country-code\"\n            label=\"Country Code\"\n            className={classes.formControl}\n            value={curUserAccountPhoneState.countryCode}\n            onChange={handleCountryCodeInputChangeEvent}\n            helperText={curUserAccountPhoneValidationState.countryCode}\n            error={curUserAccountPhoneValidationState.countryCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleUserAccountSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default UserAccountPhoneManagement\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { getBillingAddressId, getShippingAddressId, toAddressString } from 'domain/user';\nimport { CustomerAddressesFormDataType, CustomerAddressesFormValidationDataType, defaultUserAccountValidationAddressData, generateDefaultCustomerAddressesFormData, UserAddressType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountAddressSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAuthAddressActionCreator, patchAuthAddressActionCreator, postAuthAddressActionCreator, putAuthAddressActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type UserAccountAddressManagementPropsType = {\n  addresses: UserAddressType[]\n}\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst UserAccountAddressManagement: React.FunctionComponent<UserAccountAddressManagementPropsType> = ({ addresses }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curUserAccountAddressState, setUserAccountAddressState] = React.useState<CustomerAddressesFormDataType>(generateDefaultCustomerAddressesFormData());\n\n  // validation logic (should move to hooks)\n  const [curUserAccountAddressValidationState, setUserAccountAddressValidationState] = React.useState<CustomerAddressesFormValidationDataType>(defaultUserAccountValidationAddressData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curUserAccountAddressState,\n    curValidationDomain: curUserAccountAddressValidationState,\n    schema: userAccountAddressSchema,\n    setValidationDomain: setUserAccountAddressValidationState,\n    defaultValidationDomain: defaultUserAccountValidationAddressData,\n  })\n\n  // event handlers\n  const handleAddress1InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress1 = e.currentTarget.value\n    updateValidationAt(\"address1\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address1: nextAddress1\n    }));\n\n  }\n\n  const handleAddress2InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress2 = e.currentTarget.value\n    updateValidationAt(\"address2\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address2: nextAddress2\n    }));\n\n  }\n\n  const handleCityInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCity = e.currentTarget.value\n    updateValidationAt(\"city\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      city: nextCity\n    }));\n  }\n\n  const handleProvinceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProvince = e.currentTarget.value\n    updateValidationAt(\"province\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      province: nextProvince\n    }));\n  }\n\n  const handleCountryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountry = e.currentTarget.value\n    updateValidationAt(\"country\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      country: nextCountry\n    }));\n  }\n\n  const handlePostalCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPostalCode = e.currentTarget.value\n    updateValidationAt(\"postalCode\", e.currentTarget.value);\n    setUserAccountAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      postalCode: nextPostalCode\n    }));\n  }\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curUserAccountAddressState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n\n\n      console.log(\"passed\")\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n        dispatch(\n          postAuthAddressActionCreator({\n            address1: curUserAccountAddressState.address1,\n            address2: curUserAccountAddressState.address2,\n            city: curUserAccountAddressState.city,\n            province: curUserAccountAddressState.province,\n            country: curUserAccountAddressState.country,\n            postalCode: curUserAccountAddressState.postalCode,\n            isBillingAddress: false,\n            isShippingAddress: false,\n          })\n        )\n      } else {\n        console.log(\"this one is to update existing one\")\n        dispatch(\n          putAuthAddressActionCreator({\n            addressId: curUserAccountAddressState.addressId,\n            address1: curUserAccountAddressState.address1,\n            address2: curUserAccountAddressState.address2,\n            city: curUserAccountAddressState.city,\n            province: curUserAccountAddressState.province,\n            country: curUserAccountAddressState.country,\n            postalCode: curUserAccountAddressState.postalCode,\n            isBillingAddress: curUserAccountAddressState.isBillingAddress,\n            isShippingAddress: curUserAccountAddressState.isShippingAddress,\n          })\n        )\n      }\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewAddressBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setUserAccountAddressState(generateDefaultCustomerAddressesFormData())\n    setUserAccountAddressValidationState(defaultUserAccountValidationAddressData)\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing address number\n  const handleDeleteAddressClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing address event triggered\")\n\n    const addressId = e.currentTarget.getAttribute(\"data-address-id\")\n\n    console.log(\"target address id to be remvoed: \" + addressId);\n\n    dispatch(\n      deleteAuthAddressActionCreator({\n        addressId: addressId,\n      })\n    )\n    // request\n  }\n\n  // event handler to click an address list item to update address\n  const handleAddressItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetAddressId: string = e.currentTarget.getAttribute(\"data-address-id\");\n    const targetAddress = auth.user.addresses.find((address: UserAddressType) => {\n      return address.addressId == targetAddressId\n    })\n\n    setUserAccountAddressState(targetAddress);\n    setUserAccountAddressValidationState(defaultUserAccountValidationAddressData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // shipping & billing address selection stuff\n  const [curShippingId, setShippingId] = React.useState<string>(getShippingAddressId(auth.user.addresses));\n  const [curBillingId, setBillingId] = React.useState<string>(getBillingAddressId(auth.user.addresses));\n\n  const handleBillingAddressChange = (e: React.MouseEvent<HTMLLabelElement>, addressId: string) => {\n\n    setBillingId(addressId)\n\n    dispatch(\n      patchAuthAddressActionCreator({ addressId: addressId, type: \"billing\" })\n    );\n  }\n\n  const handleShippingAddressChange = (e: React.MouseEvent<HTMLLabelElement>, addressId: string) => {\n\n    setShippingId(addressId)\n\n    dispatch(\n      patchAuthAddressActionCreator({ addressId: addressId, type: \"shipping\" })\n    );\n  }\n  // render functions\n\n  // display current address number list\n  const renderCurAddressListComponent: () => React.ReactNode = () => {\n\n    return auth.user.addresses.map((address: UserAddressType) => {\n\n      console.log(\"render address compoennt: \" + address.addressId)\n\n      return (\n        <ListItem key={address.addressId} >\n          <ListItemAvatar>\n            <Avatar>\n              <HomeIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={toAddressString(address)}\n            secondary={\n              <React.Fragment>\n                {/**\n                * not use usual radio button group because of two different radio group with the same list item\n                *\n                *   - ref: https://stackoverflow.com/questions/37150254/radiobuttongroup-within-nested-list \n                **/}\n                <FormControlLabel\n                  value={address.addressId}\n                  data-billing-address-id={address.addressId}\n                  checked={curShippingId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curShippingId === address.addressId ? \"shipping\" : \"\"}\n                  name=\"user-billing-address\"\n                  onClick={(e) => handleShippingAddressChange(e, address.addressId)}\n                />\n                <FormControlLabel\n                  value={address.addressId}\n                  data-shipping-address-id={address.addressId}\n                  checked={curBillingId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curBillingId === address.addressId ? \"billing\" : \"\"}\n                  name=\"user-shipping-address\"\n                  onClick={(e) => handleBillingAddressChange(e, address.addressId)}\n                />\n                <IconButton edge=\"end\" aria-label=\"delete\" data-address-id={address.addressId} onClick={handleDeleteAddressClickEvent}>\n                  <DeleteIcon />\n                </IconButton>\n                <IconButton edge=\"end\" aria-label=\"edit\" data-address-id={address.addressId} onClick={handleAddressItemClickEvent}>\n                  <EditIcon />\n                </IconButton>\n              </React.Fragment>\n            }\n          />\n          <ListItemSecondaryAction>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new address number\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Addresses\"}\n      </Typography>\n      <Box component=\"div\">\n        {(auth.user.addresses.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Registered Any Address Yet.\"}\n          </Typography>\n        )}\n        {(auth.user.addresses.length > 0 &&\n          <List className={classes.listBox}>\n            {renderCurAddressListComponent()}\n          </List>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewAddressBtnClickEvent}>\n            Add New Address\n        </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"address1\"\n            label=\"Address 1\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.address1}\n            onChange={handleAddress1InputChangeEvent}\n            helperText={curUserAccountAddressValidationState.address1}\n            error={curUserAccountAddressValidationState.address1 !== \"\"}\n\n          />\n          <TextField\n            id=\"address2\"\n            label=\"Address 2\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.address2}\n            onChange={handleAddress2InputChangeEvent}\n            helperText={curUserAccountAddressValidationState.address2}\n            error={curUserAccountAddressValidationState.address2 !== \"\"}\n\n          />\n          <TextField\n            id=\"city\"\n            label=\"City\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.city}\n            onChange={handleCityInputChangeEvent}\n            helperText={curUserAccountAddressValidationState.city}\n            error={curUserAccountAddressValidationState.city !== \"\"}\n          />\n          <TextField\n            id=\"province\"\n            label=\"Province\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.province}\n            onChange={handleProvinceInputChangeEvent}\n            helperText={curUserAccountAddressValidationState.province}\n            error={curUserAccountAddressValidationState.province !== \"\"}\n          />\n          <TextField\n            id=\"country\"\n            label=\"Country\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.country}\n            onChange={handleCountryInputChangeEvent}\n            helperText={curUserAccountAddressValidationState.country}\n            error={curUserAccountAddressValidationState.country !== \"\"}\n          />\n          <TextField\n            id=\"postal-code\"\n            label=\"Postal Code\"\n            className={classes.formControl}\n            value={curUserAccountAddressState.postalCode}\n            onChange={handlePostalCodeInputChangeEvent}\n            helperText={curUserAccountAddressValidationState.postalCode}\n            error={curUserAccountAddressValidationState.postalCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleUserAccountSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default UserAccountAddressManagement\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { UserType } from 'domain/user/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAuthAvatarImageActionCreator, postAuthAvatarImageActionCreator } from 'reducers/slices/app';\nimport { MessageTypeEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    avatarBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: `${theme.spacing(4)}px 0`,\n    },\n    avatar: {\n      width: 100,\n      height: 100,\n      boxShadow: theme.shadows[5],\n    },\n    btnBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\ndeclare type UserAccountAvatarManagementPropsType = {\n  user?: UserType\n}\n\n/**\n * member avatar management component \n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst UserAccountAvatarManagement: React.FunctionComponent<UserAccountAvatarManagementPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch()\n  /**\n   * file uploading stuff\n   **/\n  const [curFile, setFile] = React.useState<File>(null);\n  const [curFilePath, setFilePath] = React.useState<string>(API1_URL + auth.user.avatarImagePath);\n  const imageInputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleTriggerClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (imageInputRef.current) {\n      imageInputRef.current.click();\n    }\n  }\n\n  const handleFileChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    setFile(e.currentTarget.files[0])\n    const path = URL.createObjectURL(e.currentTarget.files[0])\n    setFilePath(path);\n  }\n\n\n  const handleUploadClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (!curFile) {\n      enqueueSnackbar(\"Please choose an image before uploading.\", { variant: \"error\" });\n      return false;\n    }\n\n    dispatch(\n      postAuthAvatarImageActionCreator({ avatarImage: curFile, userId: auth.user.userId })\n    )\n  }\n\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(\n      deleteAuthAvatarImageActionCreator({ userId: auth.user.userId })\n    )\n\n    setFilePath(\"\");\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Avatar\"}\n      </Typography>\n      <Box className={classes.avatarBox}>\n        <Avatar\n          src={curFilePath}\n          classes={{\n            root: classes.avatar,\n          }}\n        />\n      </Box>\n      <Box className={classes.btnBox}>\n        <IconButton onClick={handleDeleteClick}>\n          <DeleteForeverIcon />\n        </IconButton>\n        <input\n          accept=\"image/*\"\n          className={null}\n          id=\"contained-button-file\"\n          multiple\n          hidden\n          type=\"file\"\n          ref={imageInputRef}\n          onChange={handleFileChange}\n        />\n        <label htmlFor=\"contained-button-file\">\n          <IconButton onClick={handleTriggerClick}>\n            <ImageIcon />\n          </IconButton>\n        </label>\n        <IconButton onClick={handleUploadClick}>\n          <BackupIcon />\n        </IconButton>\n      </Box>\n    </React.Fragment>\n  )\n}\n\nexport default UserAccountAvatarManagement\n\n\n\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport UserAccountBasicManagement from 'components/common/UserAccountBasicManagement';\nimport UserAccountPhoneManagement from 'components/common/UserAccountPhoneManagement';\nimport UserAccountAddressManagement from 'components/common/UserAccountAddressManagement';\nimport Grid from '@material-ui/core/Grid';\nimport UserAccountAvatarManagement from 'components/common/UserAccountAvatarManagement';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\n\n\n/**\n * TODO: if you have maxWidth at any parent element, Grid xs,md,..  does not work!!\n **/\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    gridBox: {\n    },\n    gridItem: {\n    }\n  }),\n);\n\n/**\n * member account management page\n *\n **/\nconst Account: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const auth = useSelector(mSelector.makeAuthSelector());\n\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Account\"}\n      </Typography>\n      <Grid \n        container \n        justify=\"space-around\" \n        alignItems=\"flex-start\"\n        className={classes.gridBox}\n      >\n        <Grid \n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <UserAccountAvatarManagement />\n        </Grid>\n        <Grid \n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <UserAccountBasicManagement user={auth.user} />\n        </Grid>\n        <Grid \n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <UserAccountPhoneManagement phones={[]}/>\n        </Grid>\n        <Grid \n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <UserAccountAddressManagement addresses={[]}/>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport default Account\n\n","import Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { defaultUserBasicAccountData, defaultUserBasicAccountValidationData, UserBasicAccountDataType, UserBasicAccountValidationDataType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { putAuthActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\nexport declare type UserAccountDataType = {\n  firstName: string\n  lastName: string\n  email: string\n  password: string\n  confirm: string\n}\n\nexport declare type UserAccountValidationDataType = {\n  firstName?: string\n  lastName?: string\n  email?: string\n  password?: string\n  confirm?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminAccountBasicManagement: React.FunctionComponent<{}> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curUserAccountState, setUserAccountState] = React.useState<UserBasicAccountDataType>(defaultUserBasicAccountData);\n\n  // use effect to update user state if exists after render jsx\n  React.useEffect(() => {\n\n    if (auth.user) {\n      setUserAccountState((prev: UserBasicAccountDataType) => ({\n        ...prev,\n        firstName: auth.user.firstName,\n        lastName: auth.user.lastName,\n        email: auth.user.email,\n      }))\n    }\n\n  }, [])\n\n  // validation logic (should move to hooks)\n  const [curUserAccountValidationState, setUserAccountValidationState] = React.useState<UserBasicAccountValidationDataType>(defaultUserBasicAccountValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curUserAccountState,\n    curValidationDomain: curUserAccountValidationState,\n    schema: userAccountSchema,\n    setValidationDomain: setUserAccountValidationState,\n    defaultValidationDomain: defaultUserBasicAccountValidationData,\n  })\n\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setUserAccountState((prev: UserAccountDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setUserAccountState((prev: UserAccountDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setUserAccountState((prev: UserAccountDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setUserAccountState((prev: UserAccountDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  const handleConfirmInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextConfirm = e.currentTarget.value\n    updateValidationAt(\"confirm\", e.currentTarget.value);\n    setUserAccountState((prev: UserAccountDataType) => ({\n      ...prev,\n      confirm: nextConfirm\n    }));\n  }\n\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curUserAccountState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      dispatch(\n        putAuthActionCreator({\n          userId: auth.user.userId,\n          firstName: curUserAccountState.firstName,\n          lastName: curUserAccountState.lastName,\n          email: curUserAccountState.email,\n          ...(curUserAccountState.password ? { password: curUserAccountState.password } : {}), \n        }) \n      );\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"first-name\"\n        label=\"First Name\"\n        className={classes.formControl}\n        value={curUserAccountState.firstName}\n        onChange={handleFirstNameInputChangeEvent}\n        helperText={curUserAccountValidationState.firstName}\n        error={curUserAccountValidationState.firstName !== \"\"}\n\n      />\n      <TextField\n        id=\"last-name\"\n        label=\"Last Name\"\n        className={classes.formControl}\n        value={curUserAccountState.lastName}\n        onChange={handleLastNameInputChangeEvent}\n        helperText={curUserAccountValidationState.lastName}\n        error={curUserAccountValidationState.lastName !== \"\"}\n      />\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        className={classes.formControl}\n        value={curUserAccountState.email}\n        onChange={handleEmailInputChangeEvent}\n        helperText={curUserAccountValidationState.email}\n        error={curUserAccountValidationState.email !== \"\"}\n      />\n      <TextField\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        className={classes.formControl}\n        value={curUserAccountState.password}\n        onChange={handlePasswordInputChangeEvent}\n        helperText={curUserAccountValidationState.password}\n        error={curUserAccountValidationState.password !== \"\"}\n      />\n      <TextField\n        id=\"confirm\"\n        label=\"Confirm\"\n        type=\"password\"\n        className={classes.formControl}\n        value={curUserAccountState.confirm}\n        onChange={handleConfirmInputChangeEvent}\n        helperText={curUserAccountValidationState.confirm}\n        error={curUserAccountValidationState.confirm !== \"\"}\n      />\n      <Button onClick={handleUserAccountSaveClickEvent}>\n        Save\n      </Button>\n    </form>\n  )\n}\n\nexport default AdminAccountBasicManagement\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions, postAuthAvatarImageActionCreator, deleteAuthAvatarImageActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { MessageTypeEnum } from 'src/app';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    avatarBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: `${theme.spacing(1)}px 0`,\n    },\n    avatar: {\n      width: 100,\n      height: 100,\n      boxShadow: theme.shadows[5],\n    },\n    root: {\n      maxWidth: 200,\n      margin: \"0 auto\",\n    },\n    media: {\n      // aspect ratio: 1:1\n      height: 0,\n      paddingTop: '100%',\n      marginTop: '30',\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminAccountAvatarManagement: React.FunctionComponent<{}> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n  \n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  /**\n   * file uploading stuff\n   **/\n  const [curFile, setFile] = React.useState<File>(null);\n  const [curFilePath, setFilePath] = React.useState<string>(API1_URL + auth.user.avatarImagePath);\n  const imageInputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleTriggerClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (imageInputRef.current) {\n      imageInputRef.current.click();\n    }\n  }\n\n  const handleFileChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    setFile(e.currentTarget.files[0])\n    const path = URL.createObjectURL(e.currentTarget.files[0])\n    setFilePath(path);\n  }\n\n\n  const handleUploadClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (!curFile) {\n      enqueueSnackbar(\"Please choose an image before uploading.\", { variant: \"error\" });\n      return false;\n    }\n\n    dispatch(\n      postAuthAvatarImageActionCreator({ avatarImage: curFile, userId: auth.user.userId })\n    )\n  }\n\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    dispatch(\n      deleteAuthAvatarImageActionCreator({ userId: auth.user.userId })\n    )\n\n    setFilePath(\"\");\n  }\n\n  return (\n    <React.Fragment>\n      <Box className={classes.avatarBox}>\n        <Avatar\n          src={curFilePath}\n          classes={{\n            root: classes.avatar,\n          }}\n        />\n      </Box>\n      <Box className={classes.actionBox}>\n        <IconButton onClick={handleDeleteClick}>\n          <DeleteForeverIcon />\n        </IconButton>\n        <input\n          accept=\"image/*\"\n          className={null}\n          id=\"contained-button-file\"\n          multiple\n          hidden\n          type=\"file\"\n          ref={imageInputRef}\n          onChange={handleFileChange}\n        />\n        <label htmlFor=\"contained-button-file\">\n          <IconButton onClick={handleTriggerClick}>\n            <ImageIcon />\n          </IconButton>\n        </label>\n        <IconButton onClick={handleUploadClick}>\n          <BackupIcon />\n        </IconButton>\n      </Box>\n    </React.Fragment>\n  )\n}\n\nexport default AdminAccountAvatarManagement\n\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { AdminCompanyFormDataType, AdminCompanyFormValidationDataType, defaultAdminCompanyFormValidationData } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { companySchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { putAuthCompanyActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      margin: theme.spacing(1),\n      width: \"80%\",\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    gridBox: {\n    },\n    gridItem: {\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminAccountCompanyManagement: React.FunctionComponent<{}> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curAdminCompanyFormState, setAdminCompanyFormState] = React.useState<AdminCompanyFormDataType>(\n    auth.user.companies[0] \n  );\n\n\n  // validation logic (should move to hooks)\n  const [curAdminCompanyFormValidationState, setAdminCompanyFormValidationState] = React.useState<AdminCompanyFormValidationDataType>(defaultAdminCompanyFormValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curAdminCompanyFormState,\n    curValidationDomain: curAdminCompanyFormValidationState,\n    schema: companySchema,\n    setValidationDomain: setAdminCompanyFormValidationState,\n    defaultValidationDomain: defaultAdminCompanyFormValidationData,\n  })\n\n\n  // event handlers\n  const handleCompanyNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCompanyName = e.currentTarget.value\n    updateValidationAt(\"companyName\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      companyName: nextCompanyName\n    }));\n\n  }\n\n  const handleDescriptionInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextDescription = e.currentTarget.value\n    updateValidationAt(\"companyDescription\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      companyDescription: nextDescription\n    }));\n\n  }\n\n\n  const handleCompanyEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCompanyEmail = e.currentTarget.value\n    updateValidationAt(\"companyEmail\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      companyEmail: nextCompanyEmail\n    }));\n\n  }\n\n\n  const handlePhoneNumberInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPhoneNumber = e.currentTarget.value\n    updateValidationAt(\"phoneNumber\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      phoneNumber: nextPhoneNumber\n    }));\n\n  }\n\n\n  const handleCountryCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountryCode = e.currentTarget.value\n    updateValidationAt(\"countryCode\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      countryCode: nextCountryCode\n    }));\n\n  }\n\n  const handleAddress1InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress1 = e.currentTarget.value\n    updateValidationAt(\"address1\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      address1: nextAddress1\n    }));\n\n  }\n\n  const handleAddress2InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress2 = e.currentTarget.value\n    updateValidationAt(\"address2\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      address2: nextAddress2\n    }));\n\n  }\n\n  const handleCityInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCity = e.currentTarget.value\n    updateValidationAt(\"city\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      city: nextCity\n    }));\n\n  }\n\n  const handleProvinceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProvince = e.currentTarget.value\n    updateValidationAt(\"province\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      province: nextProvince\n    }));\n\n  }\n\n  const handleCountryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountry = e.currentTarget.value\n    updateValidationAt(\"country\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      country: nextCountry\n    }));\n\n  }\n\n  const handlePostalCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPostalCode = e.currentTarget.value\n    updateValidationAt(\"postalCode\", e.currentTarget.value);\n    setAdminCompanyFormState((prev: AdminCompanyFormDataType) => ({\n      ...prev,\n      postalCode: nextPostalCode\n    }));\n\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curAdminCompanyFormState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      dispatch(\n        putAuthCompanyActionCreator({\n          companyId: curAdminCompanyFormState.companyId, \n          companyName: curAdminCompanyFormState.companyName, \n          companyDescription: curAdminCompanyFormState.companyDescription,\n          companyEmail: curAdminCompanyFormState.companyEmail,\n          phoneNumber: curAdminCompanyFormState.phoneNumber,\n          countryCode: curAdminCompanyFormState.countryCode,\n          address1: curAdminCompanyFormState.address1,\n          address2: curAdminCompanyFormState.address2,\n          city: curAdminCompanyFormState.city,\n          province: curAdminCompanyFormState.province,\n          country: curAdminCompanyFormState.country,\n          postalCode: curAdminCompanyFormState.postalCode\n        }) \n      );\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Company\"\n        subheader={\"Enter your company information. These information is used to describe your company in this website and shipping information when integrating with any postal company API.\"}\n      />\n      <CardContent>\n        <form className={classes.form} noValidate autoComplete=\"off\">\n          <Grid\n            container\n            className={classes.gridBox}\n            justify=\"center\"\n          >\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              className={classes.gridItem}\n            >\n              <Typography variant=\"h6\" component=\"h6\" align=\"left\" gutterBottom>\n                {\"Basic Info\"}\n              </Typography>\n              <TextField\n                id=\"company-name\"\n                label=\"Company Name\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.companyName}\n                onChange={handleCompanyNameInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.companyName}\n                error={curAdminCompanyFormValidationState.companyName !== \"\"}\n\n              />\n              <TextField\n                id=\"company-description\"\n                label=\"Description\"\n                multiline\n                rows={3}\n                className={classes.formControl}\n                value={curAdminCompanyFormState.companyDescription}\n                onChange={handleDescriptionInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.companyDescription}\n                error={curAdminCompanyFormValidationState.companyDescription !== \"\"}\n              />\n              <TextField\n                id=\"company-email\"\n                label=\"Email\"\n                type=\"email\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.companyEmail}\n                onChange={handleCompanyEmailInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.companyEmail}\n                error={curAdminCompanyFormValidationState.companyEmail !== \"\"}\n              />\n              <Typography variant=\"h6\" component=\"h6\" align=\"left\" gutterBottom>\n                {\"Phone\"}\n              </Typography>\n              <TextField\n                id=\"phone\"\n                label=\"phone\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.phoneNumber}\n                onChange={handlePhoneNumberInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.phoneNumber}\n                error={curAdminCompanyFormValidationState.phoneNumber !== \"\"}\n              />\n              <TextField\n                id=\"country-code\"\n                label=\"Country Code\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.countryCode}\n                onChange={handleCountryCodeInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.countryCode}\n                error={curAdminCompanyFormValidationState.countryCode !== \"\"}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              className={classes.gridItem}\n            >\n              <Typography variant=\"h6\" component=\"h6\" align=\"left\" gutterBottom>\n                {\"Address\"}\n              </Typography>\n              <TextField\n                id=\"address1\"\n                label=\"Address 1\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.address1}\n                onChange={handleAddress1InputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.address1}\n                error={curAdminCompanyFormValidationState.address1 !== \"\"}\n              />\n              <TextField\n                id=\"address2\"\n                label=\"Address 2\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.address2}\n                onChange={handleAddress2InputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.address2}\n                error={curAdminCompanyFormValidationState.address2 !== \"\"}\n              />\n              <TextField\n                id=\"city\"\n                label=\"City\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.city}\n                onChange={handleCityInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.city}\n                error={curAdminCompanyFormValidationState.city !== \"\"}\n              />\n              <TextField\n                id=\"province\"\n                label=\"Province\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.province}\n                onChange={handleProvinceInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.province}\n                error={curAdminCompanyFormValidationState.province !== \"\"}\n              />\n              <TextField\n                id=\"country\"\n                label=\"Country\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.country}\n                onChange={handleCountryInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.country}\n                error={curAdminCompanyFormValidationState.country !== \"\"}\n              />\n              <TextField\n                id=\"postal-code\"\n                label=\"Postal Code\"\n                className={classes.formControl}\n                value={curAdminCompanyFormState.postalCode}\n                onChange={handlePostalCodeInputChangeEvent}\n                helperText={curAdminCompanyFormValidationState.postalCode}\n                error={curAdminCompanyFormValidationState.postalCode !== \"\"}\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <CardActions disableSpacing>\n        <Button onClick={handleUserAccountSaveClickEvent}>\n          Save\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default AdminAccountCompanyManagement\n\n\n\n\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport AdminAccountBasicManagement from './AdminAccountBasicManagement';\nimport Grid from '@material-ui/core/Grid';\nimport AdminAccountAvatarManagement from './AdminAccountAvatarManagement';\nimport AdminAccountCompanyManagement from './AdminAccountCompanyManagement';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    card: {\n      flexGrow: 1,\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1)\n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst AdminAccount: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <Typography variant=\"body2\" component=\"p\" align=\"left\" className={classes.title} >\n        {\"Account\"}\n      </Typography>\n      {/** row 1 **/}\n      <Box>\n        <Card className={classes.card}>\n          <CardHeader\n            titleTypographyProps={{\n              variant: 'h6',\n            }}\n            subheaderTypographyProps={{\n              variant: 'body1'\n            }}\n            title=\"Account\"\n            subheader=\"Enter your admin information. These information is used to access all of resources about this website (e.g., customers, orders, products and so on).\"\n          />\n          <CardContent>\n            <Grid\n              container\n              justify=\"space-around\"\n              alignItems=\"center\"\n              className={classes.gridContainer}\n            >\n              <Grid\n                item\n                xs={12}\n                md={4}\n                className={classes.gridItem}\n              >\n                <AdminAccountAvatarManagement />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                md={8}\n                className={classes.gridItem}\n              >\n                <AdminAccountBasicManagement />\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n        {/** row 2 **/}\n        <Box>\n          <AdminAccountCompanyManagement />\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default AdminAccount\n\n\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CategoryType, NormalizedCategoryType, CategoryCriteria } from \"domain/product/types\";\nimport merge from \"lodash/merge\";\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request with cache\nexport const fetchCategoryWithCacheActionCreator = createAction(\"saga/domain/category/fetch/cache\")\nexport const fetchCategoryWithCacheActionTypeName = fetchCategoryWithCacheActionCreator().type\n\n// for GET request\nexport const fetchCategoryActionCreator = createAction(\"saga/domain/category/fetch\")\nexport const fetchCategoryActionTypeName = fetchCategoryActionCreator().type\n\n// for POST (add a new category item) request\nexport declare type PostCategoryActionType = CategoryCriteria \nexport const postCategoryActionCreator = createAction<PostCategoryActionType>(\"saga/domain/category/post\")\nexport const postCategoryActionTypeName = postCategoryActionCreator().type\n\n// for PUT (replace) request\nexport declare type PutCategoryActionType = CategoryCriteria \nexport const putCategoryActionCreator = createAction<PutCategoryActionType>(\"saga/domain/category/put\")\nexport const putCategoryActionTypeName = putCategoryActionCreator().type\n\n// for DELETE (delete single category item) request\nexport declare type DeleteSingleCategoryActionType = { categoryId: string } \nexport const deleteSingleCategoryActionCreator = createAction<DeleteSingleCategoryActionType>(\"saga/domain/category/deleteSingle\")\nexport const deleteSingleCategoryActionTypeName = deleteSingleCategoryActionCreator().type\n\n// for DELETE (delete all of category items) request\nexport const deleteCategoryActionCreator = createAction<CategoryType>(\"saga/domain/category/delete\")\nexport const deleteCategoryActionTypeName = deleteCategoryActionCreator().type\n\n/**\n * domain.categorys state Slice (no side effect)\n *\n **/\n// action type             \nexport type CategoryActionType = PayloadAction<NormalizedCategoryType> \n\nexport const categorySlice = createSlice({ \n  name: \"domain/categories\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    merge: (state: NormalizedCategoryType, action: CategoryActionType) => merge(state, action.payload),\n\n    update: (state: NormalizedCategoryType, action: CategoryActionType) => action.payload,\n\n    // use when you want to remove a single entity\n    delete: (state: NormalizedCategoryType, action: PayloadAction<{ categoryId: string }>) => {\n      delete state[action.payload.categoryId]\n      return state\n    },\n\n    clear: (state: NormalizedCategoryType) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const categorySliceReducer = categorySlice.reducer\nexport const categoryActions = categorySlice.actions\n\n/**\n *\n * domain.categories.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type CategoryPaginationPageActionType = PayloadAction<number> \n\nexport const categoryPaginationPageSlice = createSlice({ \n  name: \"domain/categories/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: CategoryPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const categoryPaginationPageSliceReducer = categoryPaginationPageSlice.reducer\nexport const categoryPaginationPageActions = categoryPaginationPageSlice.actions\n\n\n/**\n *\n * domain.categories.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type CategoryPaginationLimitActionType = PayloadAction<number> \n\nexport const categoryPaginationLimitSlice = createSlice({ \n  name: \"domain/categories/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: CategoryPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const categoryPaginationLimitSliceReducer = categoryPaginationLimitSlice.reducer\nexport const categoryPaginationLimitActions = categoryPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.categories.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type CategoryPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const categoryPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/categories/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: CategoryPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const categoryPaginationTotalPagesSliceReducer = categoryPaginationTotalPagesSlice.reducer\nexport const categoryPaginationTotalPagesActions = categoryPaginationTotalPagesSlice.actions\n\n/**\n *\n * domain.categories.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type CategoryPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const categoryPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/categories/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: CategoryPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 0,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const categoryPaginationTotalElementsSliceReducer = categoryPaginationTotalElementsSlice.reducer\nexport const categoryPaginationTotalElementsActions = categoryPaginationTotalElementsSlice.actions\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { CategoryDataType, CategoryType, CategoryValidationDataType, defaultCategoryData, defaultCategoryValidationData } from 'domain/product/types';\nimport { useValidation } from 'hooks/validation';\nimport { categorySchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCategoryActionCreator, postCategoryActionCreator, putCategoryActionCreator } from 'reducers/slices/domain/category';\nimport { mSelector } from 'src/selectors/selector';\n\ninterface AdminCategoryFormPropsType {\n  category: CategoryType\n  ref: React.MutableRefObject<any>\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n    },\n    subtitle: {\n      margin: theme.spacing(1, 0),\n      fontWeight: theme.typography.fontWeightBold\n    },\n    txtFieldBase: {\n      width: \"80%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    nameInput: {\n      minWidth: 280,\n      maxWidth: 600,\n    },\n    descriptionInput: {\n      minWidth: 280,\n      width: \"100%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    pathInput: {\n      maxWidth: 600,\n      minWidth: 280,\n    },\n    productDateInput: {\n    },\n    actionBox: {\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCategoryForm = React.forwardRef<any, AdminCategoryFormPropsType>((props, ref) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch()\n\n  // temp user account state\n  const [curCategoryState, setCategoryState] = React.useState<CategoryDataType>(props.category ? props.category : defaultCategoryData);\n\n  // update/create logic for product\n  //  - true: create\n  //  - false: update\n  // if props.product exists, it updates, otherwise, new\n  const [isNew, setNew] = React.useState<boolean>(props.category ? false : true);\n\n  // validation logic (should move to hooks)\n  const [curCategoryValidationState, setCategoryValidationState] = React.useState<CategoryValidationDataType>(defaultCategoryValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curCategoryState,\n    curValidationDomain: curCategoryValidationState,\n    schema: categorySchema,\n    setValidationDomain: setCategoryValidationState,\n    defaultValidationDomain: defaultCategoryValidationData,\n  })\n\n  // event handlers\n  const handleCategoryNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCategoryName = e.currentTarget.value\n    updateValidationAt(\"categoryName\", e.currentTarget.value);\n    setCategoryState((prev: CategoryDataType) => ({\n      ...prev,\n      categoryName: nextCategoryName\n    }));\n  }\n\n  const handleCategoryDescriptionInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCategoryDescription = e.currentTarget.value\n    updateValidationAt(\"categoryDescription\", e.currentTarget.value);\n    setCategoryState((prev: CategoryDataType) => ({\n      ...prev,\n      categoryDescription: nextCategoryDescription\n    }));\n  }\n\n  const handleCategoryPathInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCategoryPath = e.currentTarget.value\n    updateValidationAt(\"categoryPath\", e.currentTarget.value);\n    setCategoryState((prev: CategoryDataType) => ({\n      ...prev,\n      categoryPath: nextCategoryPath\n    }));\n  }\n\n  /**\n   * call child function from parent \n   *\n   * ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  React.useImperativeHandle(ref, () => ({\n\n    // event handler to submit\n    handleSaveClickEvent: (e: React.MouseEvent<HTMLButtonElement>) => {\n\n      const isValid: boolean = isValidSync(curCategoryState)\n\n      console.log(isValid);\n\n      if (isValid) {\n        // pass \n        console.log(\"passed\")\n        if (isNew) {\n          console.log(\"new category creation\")\n          // request\n          dispatch(\n            postCategoryActionCreator(curCategoryState) \n          )\n\n        } else {\n          console.log(\"update category\")\n          // request\n          dispatch(\n            putCategoryActionCreator(curCategoryState) \n          )\n        }\n      } else {\n        console.log(\"failed\")\n        updateAllValidation()\n      }\n    }\n\n  }))\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"category-name\"\n        label=\"Name\"\n        className={`${classes.txtFieldBase}`}\n        value={curCategoryState.categoryName}\n        onChange={handleCategoryNameInputChangeEvent}\n        helperText={curCategoryValidationState.categoryName}\n        error={curCategoryValidationState.categoryName !== \"\"}\n      />\n      <TextField\n        id=\"category-description\"\n        label=\"Description\"\n        multiline\n        rows={4}\n        className={`${classes.descriptionInput}`}\n        value={curCategoryState.categoryDescription}\n        onChange={handleCategoryDescriptionInputChangeEvent}\n        helperText={curCategoryValidationState.categoryDescription}\n        error={curCategoryValidationState.categoryDescription !== \"\"}\n      />\n      <TextField\n        id=\"category-path\"\n        label=\"Path\"\n        className={`${classes.txtFieldBase}`}\n        value={curCategoryState.categoryPath}\n        onChange={handleCategoryPathInputChangeEvent}\n        helperText={curCategoryValidationState.categoryPath}\n        error={curCategoryValidationState.categoryPath !== \"\"}\n      />\n    </form>\n  )\n})\n\nexport default AdminCategoryForm\n","import Dialog from '@material-ui/core/Dialog';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminCategoryForm from '../AdminCategoryForm';\nimport { CategoryType } from 'domain/product/types';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\ndeclare type AdminCategoryFormDialogPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  category: CategoryType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    dialog: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    dialogPaper: {\n      width: 240,\n    },\n    dialogContentRoot: {\n      padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n  }),\n);\n\nconst AdminCategoryFormDialog: React.FunctionComponent<AdminCategoryFormDialogPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const toggleDialog = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  /**\n   * call child function from parent \n   *\n   * - ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  const childRef = React.useRef(null);\n\n  // render nav items\n  return (\n    <Dialog fullScreen={fullScreen} open={props.curFormOpen} onClose={toggleDialog(false)} aria-labelledby=\"admin-category-form-dialog\">\n      <DialogTitle id=\"admin-category-form-dialog-title\">Category Form</DialogTitle>\n      <DialogContent classes={{\n        root: classes.dialogContentRoot,\n      }}>\n        <AdminCategoryForm category={props.category} ref={childRef}/>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={(e) => childRef.current.handleSaveClickEvent(e)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AdminCategoryFormDialog\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridPageChangeParams, GridRowsProp } from '@material-ui/data-grid';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { CategoryType } from 'domain/product/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { categoryPaginationPageActions, deleteSingleCategoryActionCreator, fetchCategoryActionCreator } from 'reducers/slices/domain/category';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminCategoryFormDialog from '../AdminCategoryFormDialog';\nimport { FetchStatusEnum } from 'src/app';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ndeclare type AdminCategoryGridViewPropsType = {\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    loadingBox: {\n      height: \"80vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: CategoryType[]) => GridRowsProp = (domains) => {\n  return domains.map((domain: CategoryType) => {\n    return {\n      id: domain.categoryId,\n      name: domain.categoryName,\n      path: domain.categoryPath,\n      description: domain.categoryDescription,\n      products: domain.categoryId,\n      actions: domain.categoryId,\n    }\n  })\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>, onDelete: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit, onDelete) => {\n  return [\n    { field: 'name', headerName: 'Name', width: 150 },\n    { field: 'path', headerName: 'Path', width: 150 },\n    { field: 'products', headerName: 'Products', width: 150 },\n    { field: 'description', headerName: 'Description', width: 400 },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-category-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n          <IconButton data-category-id={params.value} onClick={onDelete}>\n            <RemoveCircleIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ];\n}\n\n/**\n * admin category management component\n *\n **/\nconst AdminCategoryGridView: React.FunctionComponent<AdminCategoryGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // domain cur item\n  const curCategoryList = useSelector(mSelector.makeCategoryWithoutCacheSelector())\n\n  // cur selected category item\n  const [curCategory, setCategory] = React.useState<CategoryType>(null);\n\n  const pagination = useSelector(mSelector.makeProductPaginationSelector())\n\n  // fetch category\n  React.useEffect(() => {\n    dispatch(fetchCategoryActionCreator())\n  }, [])\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false);\n\n  const handleNewFormToggleBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n    setCategory(null)\n    setFormOpen(!curFormOpen)\n  }\n\n  // deletion dialog stuff\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false);\n\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    // request\n    dispatch(\n      deleteSingleCategoryActionCreator({\n        categoryId: curCategory.categoryId, \n      }) \n    )\n  }\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const categoryId = e.currentTarget.getAttribute(\"data-category-id\")\n\n    const targetCategory = curCategoryList.find((category: CategoryType) => category.categoryId == categoryId)\n\n    setCategory(targetCategory);\n\n    setFormOpen(true);\n\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setDeleteDialogOpen(true);\n\n    const categoryId = e.currentTarget.getAttribute(\"data-category-id\")\n\n    const targetCategory = curCategoryList.find((category: CategoryType) => category.categoryId == categoryId)\n\n    setCategory(targetCategory);\n  }\n\n  const handlePageChange = (param: GridPageChangeParams) => {\n    // need to decrement since we incremented when display\n    const nextPage = param.page;\n\n    dispatch(categoryPaginationPageActions.update(nextPage))\n  }\n\n  // fetch result\n  // fetch order fetching result\n  const curFetchCategoryStatus = useSelector(mSelector.makeFetchCategoryFetchStatusSelector())\n  if (curFetchCategoryStatus === FetchStatusEnum.FETCHING) {\n    return (\n      <Box className={classes.loadingBox}>\n        <CircularProgress />\n      </Box>\n    )\n  } else if (curFetchCategoryStatus === FetchStatusEnum.FAILED) {\n    return (\n      <Box className={classes.loadingBox}>\n        <Typography variant=\"body1\" component=\"h2\" >\n          {\"failed to fetch data... please try again...\"}\n        </Typography>\n      </Box>\n    )\n  }\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Category List\"\n        action={\n          <IconButton aria-label=\"add\" onClick={handleNewFormToggleBtnClickEvent}>\n            <AddCircleIcon />\n          </IconButton>\n        }\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <DataGrid\n          rows={generateRows(curCategoryList)}\n          columns={generateColumns(handleEditClick, handleDeleteClick)}\n          page={pagination.page} // don't forget to increment when display\n          pageSize={pagination.limit}\n          rowCount={pagination.totalElements}\n          onPageChange={handlePageChange}\n          // not gonna use pagination of this DataGrid\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      {/** update/create category (without its variants) **/}\n      <AdminCategoryFormDialog\n        curFormOpen={curFormOpen}\n        setFormOpen={setFormOpen}\n        category={curCategory}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"category-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"category-deletion-dialog\">Category Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this category permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            Category Name: <b>{curCategory && curCategory.categoryName}</b>\n          </Typography><br />\n          {(curCategory && curCategory.totalProductCount > 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"left\" color={\"error\"} className={null} >\n            {\"Oops, this category holds several products. come back here after you change the category of those products if you want to delete this category.\"}\n          </Typography>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\" disabled={curCategory && curCategory.totalProductCount > 0}>\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  )\n}\n\nexport default AdminCategoryGridView\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport AdminCategoryGridView from './AdminCategoryGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst AdminCategory: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminCategoryGridView />\n    </Box>\n  )\n}\n\nexport default AdminCategory\n\n","import axios from \"axios\";\n\n/**\n * need to be something like below:\n * ref: https://github.com/axios/axios/issues/430\n *\n * - be careful with the order of default.transformResponse and your custom tranform function.\n *\n *  - defaults.tranformResponse: does JSON.parse internally.\n *\n *    - so if you put defaults.tranformResponse first, your custom tranform receive parsed response object.\n *    - but if you put your custom tranform first, you receive json string as data.\n *\n **/\naxios.defaults.transformResponse = [].concat(\n  (data: any) => {\n    console.log(\"start transforming response at middleware\")\n    /**\n     * if data is empty, it might cause \"Unexpected json at the end of line\" error\n     * so give a condition\n     *\n     * - SyntaxError: JSON.parse: unexpected character at line 1 column 2 of the JSON data:\n     *\n     *  - the data is already parsed (object) you don't need to parse again.\n     **/\n\n    /**\n     * response must be object.\n     *\n     * if the backend return string as resposne, this will complain about this (json parse error).\n\n    /**\n     * convert date string (response) to Date object (js) for all response\n     *\n     * - https://stackoverflow.com/questions/14488745/javascript-json-date-deserialization\n     **/\n\n    /**\n     * date regex: \n     *\n     * ref: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime\n     *\n     **/\n    const ISORegex1 = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\n    const ISORegex2 = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d)/;\n    if (data) {\n      console.log(\"raw json string response\")\n      console.log(data)\n      return JSON.parse(data, (key: string, value: any) => {\n        if (typeof value === 'string') {\n          const a = ISORegex1.exec(value);\n          const b = ISORegex2.exec(value);\n          if (a || b) {\n            return new Date(value)\n          }\n        }\n        return value\n      });\n\n    }\n    return data\n  },\n)\n\n// set default 'withCredential'\naxios.defaults.withCredentials = true;\n\n/**\n * default header content type.\n *\n * Axios converts this Javascript data to JSON by default. \n * It also sets the “content-type” header to “application/json”. \n * However, if you pass a serialized JSON object as data, Axios treats the content type as “application/x-www-form-urlencoded” (form-encoded request body).\n *\n *\n **/\n\nexport const api = axios;\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport merge from \"lodash/merge\";\nimport remove from 'lodash/remove';\nimport { UserType, UserCriteria, UserSortEnum, UserPhoneCriteria, UserAddressCriteria, UserPhoneType, UserAddressType } from \"domain/user/types\";\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request\nexport const fetchUserActionCreator = createAction(\"saga/domain/user/fetch\")\nexport const fetchUserActionTypeName = fetchUserActionCreator().type\n\n// for GET by Id request\nexport const fetchSingleUserActionCreator = createAction<{ userId: string }>(\"saga/domain/user/fetchSingle\")\nexport const fetchSingleUserActionTypeName = fetchSingleUserActionCreator().type\n\n// for POST (add a new cart item) request\nexport const postUserActionCreator = createAction<UserType>(\"saga/domain/user/post\")\nexport const postUserActionTypeName = postUserActionCreator().type\n\n// for PUT (replace) request\nexport declare type PutUserActionType = UserCriteria\nexport const putUserActionCreator = createAction<PutUserActionType>(\"saga/domain/user/put\")\nexport const putUserActionTypeName = putUserActionCreator().type\n\n// for DELETE (delete single cart item) request\nexport const deleteSingleUserActionCreator = createAction<UserType>(\"saga/domain/user/deleteSingle\")\nexport const deleteSingleUserActionTypeName = deleteSingleUserActionCreator().type\n\n// for DELETE (delete all of cart items) request\nexport const deleteUserActionCreator = createAction<UserType>(\"saga/domain/user/delete\")\nexport const deleteUserActionTypeName = deleteUserActionCreator().type\n\n// for POST (create a phone) request\nexport declare type PostUserPhoneActionType = UserPhoneCriteria & { userId: string }\nexport const postUserPhoneActionCreator = createAction<PostUserPhoneActionType>(\"saga/domain/user/phone/post\")\nexport const postUserPhoneActionTypeName = postUserPhoneActionCreator().type\n\n// for PUT (replace a phone) request\nexport declare type PutUserPhoneActionType = UserPhoneCriteria & { userId: string }\nexport const putUserPhoneActionCreator = createAction<PutUserPhoneActionType>(\"saga/domain/user/phone/put\")\nexport const putUserPhoneActionTypeName = putUserPhoneActionCreator().type\n\n// for PATCH (replace a phone) request\nexport declare type PatchUserPhoneActionType = { phoneId: string, userId: string } \nexport const patchUserPhoneActionCreator = createAction<PatchUserPhoneActionType>(\"saga/domain/user/phone/patch\")\nexport const patchUserPhoneActionTypeName = patchUserPhoneActionCreator().type\n\n// for DELETE (delete a phone) request\nexport declare type DeleteUserPhoneActionType = { phoneId: string, userId: string }\nexport const deleteUserPhoneActionCreator = createAction<DeleteUserPhoneActionType>(\"saga/domain/user/phone/delete\")\nexport const deleteUserPhoneActionTypeName = deleteUserPhoneActionCreator().type\n\n\n// for POST (create a address) request\nexport declare type PostUserAddressActionType = UserAddressCriteria & { userId: string }\nexport const postUserAddressActionCreator = createAction<PostUserAddressActionType>(\"saga/domain/user/address/post\")\nexport const postUserAddressActionTypeName = postUserAddressActionCreator().type\n\n// for PUT (replace a address) request\nexport declare type PutUserAddressActionType = UserAddressCriteria & { userId: string }\nexport const putUserAddressActionCreator = createAction<PutUserAddressActionType>(\"saga/domain/user/address/put\")\nexport const putUserAddressActionTypeName = putUserAddressActionCreator().type\n\n// for PATCH (replace a address) request\nexport declare type PatchUserAddressActionType = { addressId: string, type: string, userId: string }  // 'billing'/'shipping'\nexport const patchUserAddressActionCreator = createAction<PatchUserAddressActionType>(\"saga/domain/user/address/patch\")\nexport const patchUserAddressActionTypeName = patchUserAddressActionCreator().type\n\n// for DELETE (delete a address) request\nexport declare type DeleteUserAddressActionType = { addressId: string, userId: string }\nexport const deleteUserAddressActionCreator = createAction<DeleteUserAddressActionType>(\"saga/domain/user/address/delete\")\nexport const deleteUserAddressActionTypeName = deleteUserAddressActionCreator().type\n\n// for POST (avatar-image) request\nexport declare type PostUserAvatarImageActionType = { avatarImage: File, userId: string } \nexport const postUserAvatarImageActionCreator = createAction<PostUserAvatarImageActionType>(\"saga/domain/user/avatar-image/post\")\nexport const postUserAvatarImageActionTypeName = postUserAvatarImageActionCreator().type\n\n\n// for DELETE (avatar-image) request\nexport declare type DeleteUserAvatarImageActionType = { userId: string } \nexport const deleteUserAvatarImageActionCreator = createAction<DeleteUserAvatarImageActionType>(\"saga/domain/user/avatar-image/delete\")\nexport const deleteUserAvatarImageActionTypeName = deleteUserAvatarImageActionCreator().type\n\n\n/**\n *\n * domain.users state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserActionType = PayloadAction<UserType[]> \n\nexport const userSlice = createSlice({ \n  name: \"domain/user\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    /**\n     * be careful that duplicate might exist.\n     *\n     * - not unique.\n     *\n     **/\n    // use when update existing one\n    concat: (state: UserType[], action: UserActionType) => {\n      return state.concat(action.payload); \n    },\n\n    // use when you want to replace\n    update: (state: UserType[], action: UserActionType) => action.payload,\n\n    // update a single user\n    updateUser: (state: UserType[], action: PayloadAction<{ userId: string, user: UserType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i] = action.payload.user;\n        }\n      }\n      return state;\n    },\n\n    // use when you want to remove a single entity\n    delete: (state: UserType[], action: PayloadAction<UserType>) => remove(state, (user: UserType) => user.userId == action.payload.userId),\n\n    appendPhone: (state: UserType[], action: PayloadAction<{ userId: string, phone: UserPhoneType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].phones.push(action.payload.phone);\n        }\n      }\n      return state;\n    },\n\n    replacePhones: (state: UserType[], action: PayloadAction<{ userId: string, phones: UserPhoneType[] }>) => { \n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].phones = action.payload.phones;\n        }\n      }\n      return state;\n    },\n\n    updatePhone: (state: UserType[], action: PayloadAction<{ userId: string, phone: UserPhoneType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].phones = state[i].phones.map((phone: UserPhoneType) => {\n            if (phone.phoneId === action.payload.phone.phoneId) {\n              return action.payload.phone;\n            }\n            return phone\n          });\n        }\n      }\n      return state;\n    },\n\n    removePhone: (state: UserType[], action: PayloadAction<{ userId: string, phoneId: string }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].phones = state[i].phones.filter((phone: UserPhoneType) => phone.phoneId != action.payload.phoneId);\n        }\n      }\n      return state;\n    },\n\n    appendAddress: (state: UserType[], action: PayloadAction<{ userId: string, address: UserAddressType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].addresses.push(action.payload.address);\n        }\n      }\n      return state;\n    },\n\n    replaceAddresses: (state: UserType[], action: PayloadAction<{ userId: string, addresses: UserAddressType[] }>) => { \n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].addresses = action.payload.addresses;\n        }\n      }\n      return state;\n    },\n\n    updateAddress: (state: UserType[], action: PayloadAction<{ userId: string, address: UserAddressType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].addresses = state[i].addresses.map((address: UserAddressType) => {\n            if (address.addressId === action.payload.address.addressId) {\n              return action.payload.address;\n            }\n            return address\n          });\n        }\n      }\n      return state;\n    },\n\n    removeAddress: (state: UserType[], action: PayloadAction<{ userId: string, addressId: string }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].userId === action.payload.userId) {\n          state[i].addresses = state[i].addresses.filter((address: UserAddressType) => address.addressId != action.payload.addressId);\n        }\n      }\n      return state;\n    },\n\n    clear: (state: UserType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userSliceReducer = userSlice.reducer\nexport const userActions = userSlice.actions\n\n/**\n *\n * domain.users.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserPaginationPageActionType = PayloadAction<number> \n\nexport const userPaginationPageSlice = createSlice({ \n  name: \"domain/users/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userPaginationPageSliceReducer = userPaginationPageSlice.reducer\nexport const userPaginationPageActions = userPaginationPageSlice.actions\n\n\n/**\n *\n * domain.users.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserPaginationLimitActionType = PayloadAction<number> \n\nexport const userPaginationLimitSlice = createSlice({ \n  name: \"domain/users/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userPaginationLimitSliceReducer = userPaginationLimitSlice.reducer\nexport const userPaginationLimitActions = userPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.users.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const userPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/users/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userPaginationTotalPagesSliceReducer = userPaginationTotalPagesSlice.reducer\nexport const userPaginationTotalPagesActions = userPaginationTotalPagesSlice.actions\n\n\n/**\n *\n * domain.users.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const userPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/users/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: UserPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 0,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userPaginationTotalElementsSliceReducer = userPaginationTotalElementsSlice.reducer\nexport const userPaginationTotalElementsActions = userPaginationTotalElementsSlice.actions\n\n/**\n *\n * domain.users.query.searchQuery state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserQuerySearchQueryActionType = PayloadAction<string> \n\nexport const userQuerySearchQuerySlice = createSlice({ \n  name: \"domain/users/query/searchQuery\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserQuerySearchQueryActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userQuerySearchQuerySliceReducer = userQuerySearchQuerySlice.reducer\nexport const userQuerySearchQueryActions = userQuerySearchQuerySlice.actions\n\n\n/**\n *\n * domain.users.query.startDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserQueryStartDateActionType = PayloadAction<Date> \n\nexport const userQueryStartDateSlice = createSlice({ \n  name: \"domain/users/query/startDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserQueryStartDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userQueryStartDateSliceReducer = userQueryStartDateSlice.reducer\nexport const userQueryStartDateActions = userQueryStartDateSlice.actions\n\n\n/**\n *\n * domain.users.query.endDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserQueryEndDateActionType = PayloadAction<Date> \n\nexport const userQueryEndDateSlice = createSlice({ \n  name: \"domain/users/query/endDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserQueryEndDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userQueryEndDateSliceReducer = userQueryEndDateSlice.reducer\nexport const userQueryEndDateActions = userQueryEndDateSlice.actions\n\n\n/**\n *\n * domain.users.query.sort state Slice (no side effects)\n *\n **/\n// action type             \nexport type UserQuerySortActionType = PayloadAction<UserSortEnum> \n\nexport const userQuerySortSlice = createSlice({ \n  name: \"domain/users/query/sort\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: UserQuerySortActionType) => action.payload,\n    clear: (state: string) => UserSortEnum.DATE_DESC,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const userQuerySortSliceReducer = userQuerySortSlice.reducer\nexport const userQuerySortActions = userQuerySortSlice.actions\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { getBillingAddressId, getShippingAddressId, toAddressString } from 'domain/user';\nimport { CustomerAddressesFormDataType, CustomerAddressesFormValidationDataType, defaultUserAccountValidationAddressData, generateDefaultCustomerAddressesFormData, UserAddressType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountAddressSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteUserAddressActionCreator, patchUserAddressActionCreator, postUserAddressActionCreator, putUserAddressActionCreator } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type AdminCustomerAddressFormPropsType = {\n  addresses: UserAddressType[]\n  userId: string\n}\n\n/**\n * member or admin account form component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCustomerAddressForm: React.FunctionComponent<AdminCustomerAddressFormPropsType> = ({ addresses, userId }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // temp user account state\n  const [curAdminCustomerAddressState, setAdminCustomerAddressState] = React.useState<CustomerAddressesFormDataType>(generateDefaultCustomerAddressesFormData());\n\n  // validation logic (should move to hooks)\n  const [curAdminCustomerAddressValidationState, setAdminCustomerAddressValidationState] = React.useState<CustomerAddressesFormValidationDataType>(defaultUserAccountValidationAddressData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curAdminCustomerAddressState,\n    curValidationDomain: curAdminCustomerAddressValidationState,\n    schema: userAccountAddressSchema,\n    setValidationDomain: setAdminCustomerAddressValidationState,\n    defaultValidationDomain: defaultUserAccountValidationAddressData,\n  })\n\n  // event handlers\n  const handleAddress1InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress1 = e.currentTarget.value\n    updateValidationAt(\"address1\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address1: nextAddress1\n    }));\n\n  }\n\n  const handleAddress2InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress2 = e.currentTarget.value\n    updateValidationAt(\"address2\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address2: nextAddress2\n    }));\n\n  }\n\n  const handleCityInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCity = e.currentTarget.value\n    updateValidationAt(\"city\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      city: nextCity\n    }));\n  }\n\n  const handleProvinceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProvince = e.currentTarget.value\n    updateValidationAt(\"province\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      province: nextProvince\n    }));\n  }\n\n  const handleCountryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountry = e.currentTarget.value\n    updateValidationAt(\"country\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      country: nextCountry\n    }));\n  }\n\n  const handlePostalCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPostalCode = e.currentTarget.value\n    updateValidationAt(\"postalCode\", e.currentTarget.value);\n    setAdminCustomerAddressState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      postalCode: nextPostalCode\n    }));\n  }\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler to submit\n  const handleAdminCustomerSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curAdminCustomerAddressState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n\n\n      console.log(\"passed\")\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n        dispatch(\n          postUserAddressActionCreator({\n            userId: userId,\n            address1: curAdminCustomerAddressState.address1,\n            address2: curAdminCustomerAddressState.address2,\n            city: curAdminCustomerAddressState.city,\n            province: curAdminCustomerAddressState.province,\n            country: curAdminCustomerAddressState.country,\n            postalCode: curAdminCustomerAddressState.postalCode,\n            isBillingAddress: false,\n            isShippingAddress: false,\n          })\n        )\n      } else {\n        console.log(\"this one is to update existing one\")\n        dispatch(\n          putUserAddressActionCreator({\n            userId: userId,\n            addressId: curAdminCustomerAddressState.addressId,\n            address1: curAdminCustomerAddressState.address1,\n            address2: curAdminCustomerAddressState.address2,\n            city: curAdminCustomerAddressState.city,\n            province: curAdminCustomerAddressState.province,\n            country: curAdminCustomerAddressState.country,\n            postalCode: curAdminCustomerAddressState.postalCode,\n            isBillingAddress: curAdminCustomerAddressState.isBillingAddress,\n            isShippingAddress: curAdminCustomerAddressState.isShippingAddress,\n          })\n        )\n      }\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewAddressBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setAdminCustomerAddressState(generateDefaultCustomerAddressesFormData())\n    setAdminCustomerAddressValidationState(defaultUserAccountValidationAddressData)\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing address number\n  const handleDeleteAddressClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing address event triggered\")\n\n    const addressId = e.currentTarget.getAttribute(\"data-address-id\")\n\n    console.log(\"target address id to be remvoed: \" + addressId);\n\n    dispatch(\n      deleteUserAddressActionCreator({\n        userId: userId,\n        addressId: addressId,\n      })\n    )\n    // request\n  }\n\n  // event handler to click an address list item to update address\n  const handleAddressItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetAddressId: string = e.currentTarget.getAttribute(\"data-address-id\");\n    const targetAddress = addresses.find((address: UserAddressType) => {\n      return address.addressId == targetAddressId\n    })\n\n    setAdminCustomerAddressState(targetAddress);\n    setAdminCustomerAddressValidationState(defaultUserAccountValidationAddressData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // shipping & billing address selection stuff\n  const [curShippingId, setShippingId] = React.useState<string>(getShippingAddressId(addresses));\n  const [curBillingId, setBillingId] = React.useState<string>(getBillingAddressId(addresses));\n\n  const handleBillingAddressChange = (e: React.MouseEvent<HTMLLabelElement>, addressId: string) => {\n\n    setBillingId(addressId)\n\n    dispatch(\n      patchUserAddressActionCreator({ \n        userId: userId,\n        addressId: addressId, \n        type: \"billing\" \n      })\n    );\n  }\n\n  const handleShippingAddressChange = (e: React.MouseEvent<HTMLLabelElement>, addressId: string) => {\n\n    setShippingId(addressId)\n\n    dispatch(\n      patchUserAddressActionCreator({ \n        userId: userId,\n        addressId: addressId, \n        type: \"shipping\" \n      })\n    );\n  }\n  // render functions\n\n  // display current address number list\n  const renderCurAddressListComponent: () => React.ReactNode = () => {\n\n    return addresses.map((address: UserAddressType) => {\n\n      console.log(\"render address compoennt: \" + address.addressId)\n\n      return (\n        <ListItem key={address.addressId} >\n          <ListItemAvatar>\n            <Avatar>\n              <HomeIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={toAddressString(address)}\n            secondary={\n              <React.Fragment>\n                {/**\n                * not use usual radio button group because of two different radio group with the same list item\n                *\n                *   - ref: https://stackoverflow.com/questions/37150254/radiobuttongroup-within-nested-list \n                **/}\n                <FormControlLabel\n                  value={address.addressId}\n                  data-billing-address-id={address.addressId}\n                  checked={curShippingId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curShippingId === address.addressId ? \"shipping\" : \"\"}\n                  name=\"user-billing-address\"\n                  onClick={(e) => handleShippingAddressChange(e, address.addressId)}\n                />\n                <FormControlLabel\n                  value={address.addressId}\n                  data-shipping-address-id={address.addressId}\n                  checked={curBillingId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curBillingId === address.addressId ? \"billing\" : \"\"}\n                  name=\"user-shipping-address\"\n                  onClick={(e) => handleBillingAddressChange(e, address.addressId)}\n                />\n                <IconButton edge=\"end\" aria-label=\"delete\" data-address-id={address.addressId} onClick={handleDeleteAddressClickEvent}>\n                  <DeleteIcon />\n                </IconButton>\n                <IconButton edge=\"end\" aria-label=\"edit\" data-address-id={address.addressId} onClick={handleAddressItemClickEvent}>\n                  <EditIcon />\n                </IconButton>\n              </React.Fragment>\n            }\n          />\n          <ListItemSecondaryAction>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new address number\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Addresses\"}\n      </Typography>\n      <Box component=\"div\">\n        {(addresses.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Registered Any Address Yet.\"}\n          </Typography>\n        )}\n        {(addresses.length > 0 &&\n          <List className={classes.listBox}>\n            {renderCurAddressListComponent()}\n          </List>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewAddressBtnClickEvent}>\n            Add New Address\n        </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"address1\"\n            label=\"Address 1\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.address1}\n            onChange={handleAddress1InputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.address1}\n            error={curAdminCustomerAddressValidationState.address1 !== \"\"}\n\n          />\n          <TextField\n            id=\"address2\"\n            label=\"Address 2\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.address2}\n            onChange={handleAddress2InputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.address2}\n            error={curAdminCustomerAddressValidationState.address2 !== \"\"}\n\n          />\n          <TextField\n            id=\"city\"\n            label=\"City\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.city}\n            onChange={handleCityInputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.city}\n            error={curAdminCustomerAddressValidationState.city !== \"\"}\n          />\n          <TextField\n            id=\"province\"\n            label=\"Province\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.province}\n            onChange={handleProvinceInputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.province}\n            error={curAdminCustomerAddressValidationState.province !== \"\"}\n          />\n          <TextField\n            id=\"country\"\n            label=\"Country\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.country}\n            onChange={handleCountryInputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.country}\n            error={curAdminCustomerAddressValidationState.country !== \"\"}\n          />\n          <TextField\n            id=\"postal-code\"\n            label=\"Postal Code\"\n            className={classes.formControl}\n            value={curAdminCustomerAddressState.postalCode}\n            onChange={handlePostalCodeInputChangeEvent}\n            helperText={curAdminCustomerAddressValidationState.postalCode}\n            error={curAdminCustomerAddressValidationState.postalCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleAdminCustomerSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default AdminCustomerAddressForm\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { defaultUserBasicAccountData, defaultUserBasicAccountValidationData, UserBasicAccountDataType, UserBasicAccountValidationDataType, UserType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountSchema } from 'hooks/validation/rules';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { putUserActionCreator } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\ndeclare type AdminCustomerBasicFormPropsType = {\n  user?: UserType\n}\n\n/**\n * member or admin account form component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCustomerBasicForm: React.FunctionComponent<AdminCustomerBasicFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch();\n\n  // temp user account state\n  const [curAdminCustomerState, setAdminCustomerState] = React.useState<UserBasicAccountDataType>(defaultUserBasicAccountData)\n\n  // use effect to update user state if exists after render jsx\n  React.useEffect(() => {\n\n    if (props.user) {\n      setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n        ...prev,\n        firstName: props.user.firstName,\n        lastName: props.user.lastName,\n        email: props.user.email,\n      }))\n    }\n\n  }, [])\n\n  // validation logic (should move to hooks)\n  const [curAdminCustomerValidationState, setAdminCustomerValidationState] = React.useState<UserBasicAccountValidationDataType>(defaultUserBasicAccountValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curAdminCustomerState,\n    curValidationDomain: curAdminCustomerValidationState,\n    schema: userAccountSchema,\n    setValidationDomain: setAdminCustomerValidationState,\n    defaultValidationDomain: defaultUserBasicAccountValidationData,\n  })\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  const handleConfirmInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextConfirm = e.currentTarget.value\n    updateValidationAt(\"confirm\", e.currentTarget.value);\n    setAdminCustomerState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      confirm: nextConfirm\n    }));\n  }\n\n\n  // event handler to submit\n  const handleAdminCustomerSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curAdminCustomerState)\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      dispatch(\n        putUserActionCreator({\n          userId: props.user.userId,\n          firstName: curAdminCustomerState.firstName,\n          lastName: curAdminCustomerState.lastName,\n          email: curAdminCustomerState.email,\n          ...(curAdminCustomerState.password ? { password: curAdminCustomerState.password } : {}),\n        })\n      );\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // handle password show stuff\n  const [isPasswordShow, setPasswordShow] = React.useState<boolean>(false);\n  const handleClickShowPassword = (e: React.MouseEvent<HTMLElement>) => {\n    setPasswordShow((prev: boolean) => !prev);\n  }\n  const handleMouseDownPassword = (e: React.MouseEvent<HTMLElement>) => {\n    setPasswordShow((prev: boolean) => !prev);\n  }\n\n  const [isConfirmShow, setConfirmShow] = React.useState<boolean>(false);\n  const handleClickShowConfirm = (e: React.MouseEvent<HTMLElement>) => {\n    setConfirmShow((prev: boolean) => !prev);\n  }\n  const handleMouseDownConfirm = (e: React.MouseEvent<HTMLElement>) => {\n    setConfirmShow((prev: boolean) => !prev);\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Basic\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"first-name\"\n          label=\"First Name\"\n          className={classes.formControl}\n          value={curAdminCustomerState.firstName}\n          onChange={handleFirstNameInputChangeEvent}\n          helperText={curAdminCustomerValidationState.firstName}\n          error={curAdminCustomerValidationState.firstName !== \"\"}\n\n        />\n        <TextField\n          id=\"last-name\"\n          label=\"Last Name\"\n          className={classes.formControl}\n          value={curAdminCustomerState.lastName}\n          onChange={handleLastNameInputChangeEvent}\n          helperText={curAdminCustomerValidationState.lastName}\n          error={curAdminCustomerValidationState.lastName !== \"\"}\n        />\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          className={classes.formControl}\n          value={curAdminCustomerState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curAdminCustomerValidationState.email}\n          error={curAdminCustomerValidationState.email !== \"\"}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curAdminCustomerState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curAdminCustomerValidationState.password}\n          error={curAdminCustomerValidationState.password !== \"\"}\n          // not working. endAdorment TODO: fix this\n          inputProps={{\n            endadornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {isPasswordShow ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n        <TextField\n          id=\"confirm\"\n          label=\"Confirm\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curAdminCustomerState.confirm}\n          onChange={handleConfirmInputChangeEvent}\n          helperText={curAdminCustomerValidationState.confirm}\n          error={curAdminCustomerValidationState.confirm !== \"\"}\n          // not working. endAdorment TODO: fix this\n          inputProps={{\n            endadornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle confirm visibility\"\n                  onClick={handleClickShowConfirm}\n                  onMouseDown={handleMouseDownConfirm}\n                >\n                  {isConfirmShow ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAdminCustomerSaveClickEvent}>\n            Save\n        </Button>\n        </Box>\n      </form>\n    </React.Fragment>\n  )\n}\n\nexport default AdminCustomerBasicForm\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport { CustomerPhonesFormDataType, CustomerPhonesFormValidationDataType, defaultUserAccountValidationPhoneData, generateDefaultCustomerPhonesFormData, UserPhoneType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountPhoneSchema } from 'hooks/validation/rules';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteUserPhoneActionCreator, patchUserPhoneActionCreator, postUserPhoneActionCreator, putUserPhoneActionCreator } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\nimport { getPrimaryPhoneId } from 'domain/user';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type AdminCustomerPhoneFormPropsType = {\n  phones: UserPhoneType[]\n  userId: string\n}\n\n/**\n * member or admin account form component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCustomerPhoneForm: React.FunctionComponent<AdminCustomerPhoneFormPropsType> = ({ phones, userId }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // temp user account state\n  const [curAdminCustomerPhoneState, setAdminCustomerPhoneState] = React.useState<CustomerPhonesFormDataType>(generateDefaultCustomerPhonesFormData());\n\n  // validation logic (should move to hooks)\n  const [curAdminCustomerPhoneValidationState, setAdminCustomerPhoneValidationState] = React.useState<CustomerPhonesFormValidationDataType>(defaultUserAccountValidationPhoneData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curAdminCustomerPhoneState,\n    curValidationDomain: curAdminCustomerPhoneValidationState,\n    schema: userAccountPhoneSchema,\n    setValidationDomain: setAdminCustomerPhoneValidationState,\n    defaultValidationDomain: defaultUserAccountValidationPhoneData,\n  })\n\n  // event handlers\n  const handlePhoneInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPhoneNumber = e.currentTarget.value\n    updateValidationAt(\"phoneNumber\", e.currentTarget.value);\n    setAdminCustomerPhoneState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      phoneNumber: nextPhoneNumber\n    }));\n\n  }\n\n  const handleCountryCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountryCode = e.currentTarget.value\n    updateValidationAt(\"countryCode\", e.currentTarget.value);\n    setAdminCustomerPhoneState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      countryCode: nextCountryCode\n    }));\n  }\n\n\n  // event handler to submit\n  const handleAdminCustomerSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curAdminCustomerPhoneState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n\n        dispatch(\n          postUserPhoneActionCreator({\n            userId: userId,\n            phoneNumber: curAdminCustomerPhoneState.phoneNumber,\n            countryCode: curAdminCustomerPhoneState.countryCode,\n            isSelected: curAdminCustomerPhoneState.isSelected,\n          })\n        )\n\n      } else {\n        console.log(\"this one is to update existing one\")\n        dispatch(\n          putUserPhoneActionCreator({\n            userId: userId,\n            phoneId: curAdminCustomerPhoneState.phoneId,\n            phoneNumber: curAdminCustomerPhoneState.phoneNumber,\n            countryCode: curAdminCustomerPhoneState.countryCode,\n            isSelected: curAdminCustomerPhoneState.isSelected,\n          })\n        )\n      }\n\n      setModalOpen(false);\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewPhoneBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setAdminCustomerPhoneState(generateDefaultCustomerPhonesFormData())\n    setAdminCustomerPhoneValidationState(defaultUserAccountValidationPhoneData)\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing phone number\n  const handleDeletePhoneClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing phone number event triggered\")\n\n    const phoneId = e.currentTarget.getAttribute(\"data-phone-id\")\n\n    console.log(\"going to delete phone whose id is : \" + phoneId)\n\n    dispatch(\n      deleteUserPhoneActionCreator({\n        userId: userId,\n        phoneId: phoneId \n      })\n    )\n  }\n\n  // event handler to click an phone list item to update phone\n  const handlePhoneItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetPhoneId: string = e.currentTarget.getAttribute(\"data-phone-id\");\n    const targetPhone = phones.find((phone: UserPhoneType) => {\n      return phone.phoneId == targetPhoneId\n    })\n\n    setAdminCustomerPhoneState(targetPhone);\n    setAdminCustomerPhoneValidationState(defaultUserAccountValidationPhoneData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // cur primary phone id\n  const curPrimaryId = getPrimaryPhoneId(phones) \n\n  console.log(\"cur primary phone id: \" + curPrimaryId)\n\n\n  const handlePhonePrimaryChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    const nextPrimePhoneId = e.currentTarget.value;\n\n    dispatch(\n      patchUserPhoneActionCreator({ phoneId: nextPrimePhoneId, userId: userId  }) \n    );\n\n  }\n\n\n  // render functions\n\n  // display current phone number list\n  const renderCurPhoneListComponent: () => React.ReactNode = () => {\n    return phones.map((phone: UserPhoneType) => {\n      return (\n        <ListItem key={phone.phoneId} data-phone-id={phone.phoneId} onClick={handlePhoneItemClickEvent}>\n          <ListItemAvatar>\n            <Avatar>\n              <PhoneIphoneIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={phone.phoneNumber}\n            secondary={phone.countryCode}\n          />\n          <ListItemSecondaryAction>\n            <FormControlLabel\n              value={phone.phoneId}\n              control={<Radio />}\n              label={(curPrimaryId == phone.phoneId) ? \"primary\" : \"\"}\n            />\n            <IconButton edge=\"end\" aria-label=\"delete\" data-phone-id={phone.phoneId} onClick={handleDeletePhoneClickEvent}>\n              <DeleteIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new phone number\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Phones\"}\n      </Typography>\n      <Box component=\"div\">\n        {(phones.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Registered Any Phone Yet.\"}\n          </Typography>\n        )}\n        {(phones.length > 0 &&\n          <RadioGroup\n            value={curPrimaryId}\n            aria-label=\"phone\"\n            name=\"user-phone-radio\"\n            onChange={handlePhonePrimaryChange}\n          >\n            <List className={classes.listBox}>\n              {renderCurPhoneListComponent()}\n            </List>\n          </RadioGroup>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewPhoneBtnClickEvent}>\n            Add New Phone\n        </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"phoneNumber\"\n            label=\"Phone\"\n            className={classes.formControl}\n            value={curAdminCustomerPhoneState.phoneNumber}\n            onChange={handlePhoneInputChangeEvent}\n            helperText={curAdminCustomerPhoneValidationState.phoneNumber}\n            error={curAdminCustomerPhoneValidationState.phoneNumber !== \"\"}\n\n          />\n          <TextField\n            id=\"country-code\"\n            label=\"Country Code\"\n            className={classes.formControl}\n            value={curAdminCustomerPhoneState.countryCode}\n            onChange={handleCountryCodeInputChangeEvent}\n            helperText={curAdminCustomerPhoneValidationState.countryCode}\n            error={curAdminCustomerPhoneValidationState.countryCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleAdminCustomerSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default AdminCustomerPhoneForm\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { UserType } from 'domain/user/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteUserAvatarImageActionCreator, postUserAvatarImageActionCreator } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    avatarBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: `${theme.spacing(4)}px 0`,\n    },\n    avatar: {\n      width: 100,\n      height: 100,\n      boxShadow: theme.shadows[5],\n    },\n    btnBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\ndeclare type AdminCustomerAvatarFormPropsType = {\n  user?: UserType\n}\n\n/**\n * member avatar form component \n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCustomerAvatarForm: React.FunctionComponent<AdminCustomerAvatarFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch()\n  /**\n   * file uploading stuff\n   **/\n  const [curFile, setFile] = React.useState<File>(null);\n  const [curFilePath, setFilePath] = React.useState<string>(null);\n  const imageInputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (props.user && props.user.avatarImagePath) {\n      setFilePath(API1_URL + props.user.avatarImagePath)\n    }\n  }, [\n    JSON.stringify(props.user) \n  ])\n\n  const handleTriggerClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (imageInputRef.current) {\n      imageInputRef.current.click();\n    }\n  }\n\n  const handleFileChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    setFile(e.currentTarget.files[0])\n    const path = URL.createObjectURL(e.currentTarget.files[0])\n    setFilePath(path);\n  }\n\n\n  const handleUploadClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (!curFile) {\n      enqueueSnackbar(\"Please choose an image before uploading.\", { variant: \"error\" });\n      return false;\n    }\n\n    dispatch(\n      postUserAvatarImageActionCreator({ avatarImage: curFile, userId: props.user.userId })\n    )\n  }\n\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(\n      deleteUserAvatarImageActionCreator({ userId: props.user.userId })\n    )\n\n    setFilePath(\"\");\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" component=\"h6\" align=\"center\" className={classes.title} >\n        {\"Avatar\"}\n      </Typography>\n      <Box className={classes.avatarBox}>\n        <Avatar\n          src={curFilePath}\n          classes={{\n            root: classes.avatar,\n          }}\n        />\n      </Box>\n      <Box className={classes.btnBox}>\n        <IconButton onClick={handleDeleteClick}>\n          <DeleteForeverIcon />\n        </IconButton>\n        <input\n          accept=\"image/*\"\n          className={null}\n          id=\"contained-button-file\"\n          multiple\n          hidden\n          type=\"file\"\n          ref={imageInputRef}\n          onChange={handleFileChange}\n        />\n        <label htmlFor=\"contained-button-file\">\n          <IconButton onClick={handleTriggerClick}>\n            <ImageIcon />\n          </IconButton>\n        </label>\n        <IconButton onClick={handleUploadClick}>\n          <BackupIcon />\n        </IconButton>\n      </Box>\n    </React.Fragment>\n  )\n}\n\nexport default AdminCustomerAvatarForm\n\n\n\n","import Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { UserType } from 'domain/user/types';\nimport * as React from 'react';\nimport AdminCustomerAddressForm from './AdminCustomerAddressForm';\nimport AdminCustomerBasicForm from './AdminCustomerBasicForm';\nimport AdminCustomerPhoneForm from './AdminCustomerPhoneForm';\nimport AdminCustomerAvatarForm from './AdminCustomerAvatarForm';\nimport TextField from '@material-ui/core/TextField';\n\ninterface AdminCustomerFormPropsType {\n  user: UserType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    orderDetailBox: {\n\n    },\n    title: {\n      textAlign: \"center\",\n      fontWeight: theme.typography.fontWeightBold\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminCustomerForm: React.FunctionComponent<AdminCustomerFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  /**\n   * test order date\n   **/\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n        className={classes.orderDetailBox}\n      >\n        <TextField\n          id=\"customer-id\"\n          label=\"Customer Id\"\n          className={classes.formControl}\n          value={props.user.userId}\n          inputProps={{\n            readOnly: true,\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n        className={classes.orderDetailBox}\n      >\n        <AdminCustomerAvatarForm user={props.user}/>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n        className={classes.orderDetailBox}\n      >\n        <AdminCustomerBasicForm user={props.user}/>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n      >\n        <AdminCustomerPhoneForm phones={props.user.phones} userId={props.user.userId} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n      >\n        <AdminCustomerAddressForm addresses={props.user.addresses}  userId={props.user.userId} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AdminCustomerForm\n","import Drawer from '@material-ui/core/Drawer';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminCustomerForm from '../AdminCustomerForm';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport Divider from '@material-ui/core/Divider';\nimport { UserType } from 'domain/user/types';\n\ndeclare type AdminCustomerFormDrawerPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  user: UserType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    drawer: {\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    drawerPaper: {\n      paddingBottom: theme.spacing(2),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n    closeFormBox: {\n      position: \"sticky\", // not working\n      width: \"100%\",\n      textAlign: \"center\",\n    }\n  }),\n);\n\nconst AdminCustomerFormDrawer: React.FunctionComponent<AdminCustomerFormDrawerPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n\n  const classes = useStyles();\n\n  const toggleDrawer = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  const handleNavToggleClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.setFormOpen(!props.curFormOpen);\n  }\n\n  const handleCloseEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.setFormOpen(false);\n  }\n\n  // render function\n\n  // render nav items\n  return (\n    <React.Fragment>\n      <Drawer\n        className={classes.drawer}\n        variant={'temporary'}\n        anchor=\"bottom\"\n        open={props.curFormOpen}\n        onClose={toggleDrawer(false)}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Box component=\"div\" className={classes.closeFormBox}>\n          <IconButton onClick={handleCloseEvent}>\n            <GetAppIcon />            \n          </IconButton>\n        </Box>\n        <Divider variant=\"middle\" />\n        <AdminCustomerForm user={props.user} />\n      </Drawer>\n    </React.Fragment>\n  )\n}\n\nexport default AdminCustomerFormDrawer\n\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userQueryEndDateActions, userQueryStartDateActions } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst UserDateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeUserQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeUserQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(userQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(userQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default UserDateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { UserSortEnum } from 'domain/user/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userQuerySortActions } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst userSortList = [\n  {\n    value: UserSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: UserSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n]\n\n\nconst UserSortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeUserQuerySortSelector())\n\n  const handleUserSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(userQuerySortActions.update(e.currentTarget.value as UserSortEnum))\n  }\n\n  const renderUserSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderUserSortRadioInputs updated\");\n    return userSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"user-sort\" name=\"user-sort\" value={curSort} onChange={handleUserSortInputChangeEvent}>\n          {renderUserSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default UserSortTabPanel\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport UserDateFilterTabPanel from './TabPanel/UserDateFilterTabPanel';\nimport UserSortTabPanel from './TabPanel/UserSortTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabBox: {\n      // for search controller which is position: absolute\n      position: \"relative\",\n    },\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n      zIndex: 1,\n      boxShadow: theme.shadows[8],\n    },\n    tabRoot: {\n      minWidth: 50,\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst AdminUserSearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeProductQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeProductQuerySelector());\n\n  return (\n    <Box component=\"div\" className={classes.tabBox}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          classes={{\n            root: classes.tabRoot,\n          }}\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" classes={{ root: classes.tabRoot }} {...a11yProps(0)} />\n          <Tab label=\"Date\" classes={{ root: classes.tabRoot }} {...a11yProps(1)} />\n          <Tab label=\"Sort\" classes={{ root: classes.tabRoot }} {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <UserDateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <UserSortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default AdminUserSearchController\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridPageChangeParams, GridRowsProp } from '@material-ui/data-grid';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { UserType } from 'domain/user/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUserActionCreator, userPaginationPageActions } from 'reducers/slices/domain/user';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminCustomerFormDrawer from '../AdminCustomerFormDrawer';\nimport AdminUserSearchController from '../AdminCustomerSearchController';\nimport Avatar from '@material-ui/core/Avatar';\nimport { FetchStatusEnum } from 'src/app';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\ndeclare type AdminCustomerGridViewPropsType = {\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(4),\n    },\n    loadingBox: {\n      height: \"80vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: UserType[]) => GridRowsProp = (domains) => {\n  return domains.map((domain: UserType) => {\n    return {\n      id: domain.userId,\n      avatar: domain.avatarImagePath,\n      name: domain.firstName + \" \" + domain.lastName,\n      email: domain.email,\n      type: domain.userType.userType,\n      status: domain.userType,\n      //orders: domain.orders.length,\n      //reviews: domain.reviews.length,\n      actions: domain.userId,\n    }\n  })\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>, onDelete: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit, onDelete) => {\n  return [\n    { \n      field: 'avatar', \n      headerName: \"Avatar\", \n      width: 100,\n      renderCell: (params: GridCellParams) => (\n        <Avatar\n          src={params.value? API1_URL + params.value : null}\n        />\n      ),\n    },\n    { field: 'name', headerName: 'Name', width: 150 },\n    { field: 'email', headerName: 'Email', width: 150 },\n    { field: 'type', headerName: 'Type', width: 150 },\n    { field: 'status', headerName: 'Status', width: 150 },\n    //{\n    //  field: 'orders',\n    //  headerName: 'Orders',\n    //  width: 150,\n    //},\n    //{\n    //  field: 'reviews',\n    //  headerName: 'Reviews',\n    //  width: 150,\n    //},\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-user-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n          <IconButton data-user-id={params.value} onClick={onDelete}>\n            <RemoveCircleIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ];\n}\n\n/**\n * admin product management component\n *\n **/\nconst AdminCustomerGridView: React.FunctionComponent<AdminCustomerGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // domain cur item\n  const curUserList = useSelector(mSelector.makeUserSelector())\n\n  // cur selected user item\n  const [curUserId, setUserId] = React.useState<string>(null);\n\n  const curQueryString = useSelector(mSelector.makeUserQuerySelector());\n\n  const pagination = useSelector(mSelector.makeProductPaginationSelector())\n\n  // fetch user\n  React.useEffect(() => {\n    dispatch(fetchUserActionCreator())\n  }, [\n    JSON.stringify(curQueryString),\n    pagination.page \n  ])\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false);\n\n  // deletion dialog stuff\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false);\n\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    // request (permenently)\n    api.request({\n      method: 'DELETE',\n      url: API1_URL + `/users/${curUserId}`\n    }).then((data) => {\n\n      dispatch(fetchUserActionCreator())\n\n      enqueueSnackbar(\"deleted successfully.\", { variant: \"success\" })\n    }).catch((error: AxiosError) => {\n      enqueueSnackbar(error.message, { variant: \"error\" })\n    })\n  }\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const userId = e.currentTarget.getAttribute(\"data-user-id\")\n    setUserId(userId);\n\n    setFormOpen(true);\n\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setDeleteDialogOpen(true);\n\n    const userId = e.currentTarget.getAttribute(\"data-user-id\")\n    setUserId(userId);\n  }\n\n  // pagination event handler\n  const handlePageChange = (param: GridPageChangeParams) => {\n    // need to decrement since we incremented when display\n    const nextPage = param.page;\n\n    dispatch(userPaginationPageActions.update(nextPage))\n  }\n\n  // fetch result\n  // fetch order fetching result\n  const curFetchCustomerStatus = useSelector(mSelector.makeFetchUserFetchStatusSelector())\n  if (curFetchCustomerStatus === FetchStatusEnum.FETCHING) {\n    return (\n      <Box className={classes.loadingBox}>\n        <CircularProgress />\n      </Box>\n    )\n  } else if (curFetchCustomerStatus === FetchStatusEnum.FAILED) {\n    return (\n      <Box className={classes.loadingBox}>\n        <Typography variant=\"body1\" component=\"h2\" >\n          {\"failed to fetch data... please try again...\"}\n        </Typography>\n      </Box>\n    )\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Customer List\"\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <AdminUserSearchController />\n        <DataGrid\n          rows={generateRows(curUserList)}\n          columns={generateColumns(handleEditClick, handleDeleteClick)}\n          page={pagination.page} // don't forget to increment when display\n          pageSize={pagination.limit}\n          rowCount={pagination.totalElements}\n          onPageChange={handlePageChange}\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      <AdminCustomerFormDrawer\n        curFormOpen={curFormOpen}\n        setFormOpen={setFormOpen}\n        user={curUserList.find((user: UserType) => user.userId === curUserId)}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"user-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"user-deletion-dialog\">User Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this user permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            User Email: <b>{curUserList.find((user: UserType) => user.userId === curUserId) && curUserList.find((user: UserType) => user.userId === curUserId).email}</b>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  )\n}\n\nexport default AdminCustomerGridView\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport AdminCustomerGridView from './AdminCustomerGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n *  - TODO: implement grid row click to display its detail.\n *\n *    - currently, (+) button opens the detaul drawer. fix this.\n *\n **/\nconst AdminCustomer: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminCustomerGridView />\n    </Box>\n  )\n}\n\nexport default AdminCustomer\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { UserType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { adminLoginSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { authActions } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { useHistory } from 'react-router';\n\n\nexport declare type AdminLoginDataType = {\n  email: string\n  password: string\n}\n\nconst defaultAdminLoginData: AdminLoginDataType = {\n  email: \"\",\n  password: \"\",\n}\n\nif (NODE_ENV !== \"production\") {\n  defaultAdminLoginData.email = \"test_admin@test.com\"\n  defaultAdminLoginData.password = \"test_password\"\n}\n\nexport declare type AdminLoginValidationDataType = {\n  email?: string\n  password?: string\n}\n\nconst defaultAdminLoginValidationData: AdminLoginValidationDataType = {\n  email: \"\",\n  password: \"\",\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      maxWidth: 300,\n      width: \"80%\",\n      margin: \"20px auto\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n    },\n    forgetPasswordBox: {\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(2, 0, 2, 0),\n    },\n  }),\n);\n\n/**\n * admin login page \n *\n **/\nconst AdminLogin: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n  \n  // dispatch\n  const dispatch = useDispatch();\n  \n  // redirect to previous url if exist\n  const curPreviousUrl = useSelector(mSelector.makePreviousUrlSelector());\n\n  // history \n  const history = useHistory();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curAdminLoginState, setAdminLoginState] = React.useState<AdminLoginDataType>(defaultAdminLoginData);\n\n  // validation logic (should move to hooks)\n  const [curAdminLoginValidationState, setAdminLoginValidationState] = React.useState<AdminLoginValidationDataType>(defaultAdminLoginValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curAdminLoginState,\n    curValidationDomain: curAdminLoginValidationState,\n    schema: adminLoginSchema,\n    setValidationDomain: setAdminLoginValidationState,\n    defaultValidationDomain: defaultAdminLoginValidationData,\n  })\n\n  // event handlers\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setAdminLoginState((prev: AdminLoginDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setAdminLoginState((prev: AdminLoginDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curAdminLoginState)\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/authenticate`,\n        data: curAdminLoginState,\n      }).then((data) => {\n        /**\n         *  add new phone\n         **/\n        const loggedInUser: UserType = data.data.user;\n        dispatch(authActions.loginWithUser(loggedInUser))\n        \n        // make sure this work.\n        // this does not work esp when there is no previous url.\n        //\n        // solution: to use redux state to store the previous url.\n        //history.back(); \n        \n        let nextDest = \"/admin\"\n        \n        if (curPreviousUrl) {\n          nextDest = curPreviousUrl\n        }\n\n        /**\n         * don't confused with 'history' (window) and 'history' (react-router-dom)\n         *\n         * window: history.pushState()\n         *\n         * react-router-dom: history.push() <- use this one.\n         *\n         **/\n        history.push(nextDest);\n\n        enqueueSnackbar(\"added successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      direction=\"column\"\n      className={classes.box}\n    >\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"login-logo\">\n        <SentimentSatisfiedOutlinedIcon />\n      </IconButton>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Admin Login\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          className={classes.formControl}\n          value={curAdminLoginState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curAdminLoginValidationState.email}\n          error={curAdminLoginValidationState.email !== \"\"}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curAdminLoginState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curAdminLoginValidationState.password}\n          error={curAdminLoginValidationState.password !== \"\"}\n        />\n        <Box component=\"div\" className={classes.forgetPasswordBox} >\n          <Typography variant=\"body2\" component=\"p\">\n            <Link component={RRLink} to=\"/admin/forget-password\">\n              forget your password?\n            </Link>\n          </Typography>\n        </Box>\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleUserAccountSaveClickEvent}>\n            Login\n            </Button>\n        </Box>\n      </form>\n    </Grid>\n  )\n}\n\nexport default AdminLogin\n\n\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport merge from \"lodash/merge\";\nimport remove from 'lodash/remove';\nimport { OrderType, OrderEventType, OrderSortEnum, OrderEventCriteria, OrderCriteria, SessionTimeoutOrderEventCriteria } from \"domain/order/types\";\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request\nexport const fetchOrderActionCreator = createAction(\"saga/domain/order/fetch\")\nexport const fetchOrderActionTypeName = fetchOrderActionCreator().type\n\n// for GET by Id request\nexport const fetchSingleOrderActionCreator = createAction<{ orderId: string }>(\"saga/domain/order/fetchSingle\")\nexport const fetchSingleOrderActionTypeName = fetchSingleOrderActionCreator().type\n\n// for POST (add order with clientSecret) request\nexport declare type PostOrderActionType = OrderCriteria  \nexport const postOrderActionCreator = createAction<PostOrderActionType>(\"saga/domain/order/post\")\nexport const postOrderActionTypeName = postOrderActionCreator().type\n\n// for PUT (replace) request\nexport const putOrderActionCreator = createAction<OrderType>(\"saga/domain/order/put\")\nexport const putOrderActionTypeName = putOrderActionCreator().type\n\n// for DELETE (delete single cart item) request\nexport const deleteSingleOrderActionCreator = createAction<OrderType>(\"saga/domain/order/deleteSingle\")\nexport const deleteSingleOrderActionTypeName = deleteSingleOrderActionCreator().type\n\n// for DELETE (delete all of cart items) request\nexport const deleteOrderActionCreator = createAction<OrderType>(\"saga/domain/order/delete\")\nexport const deleteOrderActionTypeName = deleteOrderActionCreator().type\n\n// for POST (add a new order event) request\nexport declare type PostOrderEventActionType = OrderEventCriteria  & { orderId: string }\nexport const postOrderEventActionCreator = createAction<PostOrderEventActionType>(\"saga/domain/order/event/post\")\nexport const postOrderEventActionTypeName = postOrderEventActionCreator().type\n\n// for PUT (replace a order event) request\nexport declare type PutOrderEventActionType = OrderEventCriteria & { orderId: string } \nexport const putOrderEventActionCreator = createAction<PutOrderEventActionType>(\"saga/domain/order/event/put\")\nexport const putOrderEventActionTypeName = putOrderEventActionCreator().type\n\n// for DELETE (delete single order event) request\nexport declare type DeleteSingleOrderEventActionType = { orderEventId: string, orderId: string } \nexport const deleteSingleOrderEventActionCreator = createAction<DeleteSingleOrderEventActionType>(\"saga/domain/order/event/deleteSingle\")\nexport const deleteSingleOrderEventActionTypeName = deleteSingleOrderEventActionCreator().type\n\n// for POST (add a new session timeout order event) request\nexport declare type PostSessionTimeoutOrderEventActionType = SessionTimeoutOrderEventCriteria & { orderId: string } \nexport const postSessionTimeoutOrderEventActionCreator = createAction<PostSessionTimeoutOrderEventActionType>(\"saga/domain/order/event/session-timeout/post\")\nexport const postSessionTimeoutOrderEventActionTypeName = postSessionTimeoutOrderEventActionCreator().type\n/**\n *\n * domain.orders state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderActionType = PayloadAction<OrderType[]> \n\nexport const orderSlice = createSlice({ \n  name: \"domain/order\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    /**\n     * be careful that duplicate might exist.\n     *\n     * - not unique.\n     *\n     **/\n    concat: (state: OrderType[], action: OrderActionType) => {\n      return state.concat(action.payload); \n    },\n\n    // use when update existing one (only apply for array: don't use for object)\n    updateOne: (state: OrderType[], action: PayloadAction<OrderType>) => {\n      return state.map((domain: OrderType) => {\n        if (domain.orderId === action.payload.orderId) {\n          return action.payload\n        }\n        return domain\n      })\n    },\n\n\n    // use when you want to replace\n    update: (state: OrderType[], action: OrderActionType) => action.payload,\n\n    // use when you want to remove a single entity\n    delete: (state: OrderType[], action: PayloadAction<OrderType>) => {\n      remove(state, (order: OrderType) => order.orderId == action.payload.orderId)\n      return state;\n    },\n\n    appendEvent: (state: OrderType[], action: PayloadAction<{ orderId: string, event: OrderEventType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].orderId == action.payload.orderId) {\n          state[i].orderEvents.push(action.payload.event)\n        }\n      }\n      return state\n    },\n\n    /**\n     * replace the whole order. this is because deleting an order event affects the other properties of the order.\n     **/\n    replace: (state: OrderType[], action: PayloadAction<{ orderId: string, order: OrderType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].orderId == action.payload.orderId) {\n          state[i] = action.payload.order;\n        }\n      }\n      return state\n    },\n\n    deleteEvent: (state: OrderType[], action: PayloadAction<{ orderId: string, eventId: string }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].orderId == action.payload.orderId) {\n          state[i].orderEvents = state[i].orderEvents.filter((orderEvent: OrderEventType) => orderEvent.orderEventId != action.payload.eventId) \n        }\n      }\n      return state\n    },\n\n    updateEvent: (state: OrderType[], action: PayloadAction<{ orderId: string, event: OrderEventType }>) => {\n      for (let i = 0; i < state.length; i++) {\n        if (state[i].orderId == action.payload.orderId) {\n          state[i].orderEvents = state[i].orderEvents.map((orderEvent: OrderEventType) => {\n            if (orderEvent.orderEventId == action.payload.event.orderEventId) {\n              return action.payload.event \n            }\n            return orderEvent\n          })\n        }\n      }\n      return state\n    },\n\n    clear: (state: OrderType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderSliceReducer = orderSlice.reducer\nexport const orderActions = orderSlice.actions\n\n/**\n *\n * domain.orders.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderPaginationPageActionType = PayloadAction<number> \n\nexport const orderPaginationPageSlice = createSlice({ \n  name: \"domain/orders/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderPaginationPageSliceReducer = orderPaginationPageSlice.reducer\nexport const orderPaginationPageActions = orderPaginationPageSlice.actions\n\n\n/**\n *\n * domain.orders.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderPaginationLimitActionType = PayloadAction<number> \n\nexport const orderPaginationLimitSlice = createSlice({ \n  name: \"domain/orders/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderPaginationLimitSliceReducer = orderPaginationLimitSlice.reducer\nexport const orderPaginationLimitActions = orderPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.orders.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const orderPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/orders/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderPaginationTotalPagesSliceReducer = orderPaginationTotalPagesSlice.reducer\nexport const orderPaginationTotalPagesActions = orderPaginationTotalPagesSlice.actions\n\n/**\n *\n * domain.orders.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const orderPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/orders/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: OrderPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 0,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderPaginationTotalElementsSliceReducer = orderPaginationTotalElementsSlice.reducer\nexport const orderPaginationTotalElementsActions = orderPaginationTotalElementsSlice.actions\n\n\n\n/**\n *\n * domain.orders.query.searchQuery state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderQuerySearchQueryActionType = PayloadAction<string> \n\nexport const orderQuerySearchQuerySlice = createSlice({ \n  name: \"domain/orders/query/searchQuery\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderQuerySearchQueryActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderQuerySearchQuerySliceReducer = orderQuerySearchQuerySlice.reducer\nexport const orderQuerySearchQueryActions = orderQuerySearchQuerySlice.actions\n\n\n/**\n *\n * domain.orders.query.orderStatus state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderQueryOrderStatusActionType = PayloadAction<string> \n\nexport const orderQueryOrderStatusSlice = createSlice({ \n  name: \"domain/orders/query/orderStatus\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderQueryOrderStatusActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderQueryOrderStatusSliceReducer = orderQueryOrderStatusSlice.reducer\nexport const orderQueryOrderStatusActions = orderQueryOrderStatusSlice.actions\n\n\n/**\n *\n * domain.orders.query.startDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderQueryStartDateActionType = PayloadAction<Date> \n\nexport const orderQueryStartDateSlice = createSlice({ \n  name: \"domain/orders/query/startDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderQueryStartDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderQueryStartDateSliceReducer = orderQueryStartDateSlice.reducer\nexport const orderQueryStartDateActions = orderQueryStartDateSlice.actions\n\n\n/**\n *\n * domain.orders.query.endDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderQueryEndDateActionType = PayloadAction<Date> \n\nexport const orderQueryEndDateSlice = createSlice({ \n  name: \"domain/orders/query/endDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderQueryEndDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderQueryEndDateSliceReducer = orderQueryEndDateSlice.reducer\nexport const orderQueryEndDateActions = orderQueryEndDateSlice.actions\n\n\n/**\n *\n * domain.orders.query.sort state Slice (no side effects)\n *\n **/\n// action type             \nexport type OrderQuerySortActionType = PayloadAction<OrderSortEnum> \n\nexport const orderQuerySortSlice = createSlice({ \n  name: \"domain/orders/query/sort\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: OrderQuerySortActionType) => action.payload,\n    clear: (state: string) => OrderSortEnum.DATE_DESC,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const orderQuerySortSliceReducer = orderQuerySortSlice.reducer\nexport const orderQuerySortActions = orderQuerySortSlice.actions\n\n\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { defaultOrderEventData, OrderEventType, orderStatusBagList, OrderStatusEnum, OrderType } from 'domain/order/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postOrderEventActionCreator, putOrderEventActionCreator } from 'reducers/slices/domain/order';\nimport { AuthType, UserTypeEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { postAuthOrderEventActionCreator } from 'reducers/slices/app';\n\ninterface OrderEventUpdateFormDialogPropsType {\n  open: boolean\n  onClose: React.EventHandler<React.MouseEvent<HTMLButtonElement>>\n  orderEvent: OrderEventType\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      textAlign: \"center\",\n      margin: theme.spacing(1),\n    },\n    txtFieldBase: {\n      width: \"80%\",\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n    },\n  }),\n);\n\nconst OrderEventUpdateFormDialog: React.FunctionComponent<OrderEventUpdateFormDialogPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  // order event form stuff\n  const auth: AuthType = useSelector(mSelector.makeAuthSelector())\n  const [curOrderEventState, setOrderEventState] = React.useState<OrderEventType>(defaultOrderEventData);\n\n  // update/create logic for product\n  //  - true: create\n  //  - false: update\n  // if props.product exists, it updates, otherwise, new\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (props.orderEvent) {\n      setNew(false);\n      setOrderEventState(props.orderEvent)\n    } else {\n      setNew(true);\n      setOrderEventState(defaultOrderEventData)\n    }\n  }, [\n      JSON.stringify(props.orderEvent)\n    ])\n\n  /**\n   * update btn click event handler\n   **/\n  const handleFormSaveClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    /**\n     * skip validation since there is less fields to validate (overkill)\n     *\n     **/\n    if (auth.userType === UserTypeEnum.ADMIN) {\n      // admin\n      if (isNew) {\n        console.log(\"new order event creation\")\n        // request\n        dispatch(\n          postOrderEventActionCreator({\n            orderStatus: curOrderEventState.orderStatus,\n            orderId: props.order.orderId,\n            note: curOrderEventState.note,\n            userId: auth.user.userId,\n          })\n        )\n      } else {\n        console.log(\"update order event\")\n        // request\n        dispatch(\n          putOrderEventActionCreator({\n            orderEventId: curOrderEventState.orderEventId,\n            orderId: props.order.orderId,\n            note: curOrderEventState.note,\n            userId: auth.user.userId,\n          })\n        )\n      }\n    } else {\n      // member\n      if (isNew) {\n        // request\n        dispatch(\n          postAuthOrderEventActionCreator({\n            orderStatus: curOrderEventState.orderStatus,\n            orderId: props.order.orderId,\n            note: curOrderEventState.note,\n            userId: auth.user.userId,\n          })\n        )\n      }\n    }\n\n  }\n\n  const handleNoteInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextNote = e.currentTarget.value\n    setOrderEventState((prev: OrderEventType) => ({\n      ...prev,\n      note: nextNote\n    }));\n  }\n\n  const handleOrderStatusInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextOrderStatus = e.target.value as OrderStatusEnum;\n    setOrderEventState((prev: OrderEventType) => ({\n      ...prev,\n      orderStatus: nextOrderStatus\n    }));\n  }\n\n  // next addable option based on user type\n  const nextOrderEventOptions = React.useMemo(() => {\n    if (auth.userType === UserTypeEnum.MEMBER) {\n      console.log(\"next addable optons: member\")\n      // member\n      return props.order.nextMemberOrderEventOptions\n    } else {\n      // admin\n      console.log(\"next addable optons: admin\")\n      return props.order.nextAdminOrderEventOptions\n    }\n  }, [JSON.stringify(props.order)])\n\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"order-event-update-dialog\">\n      <DialogTitle id=\"order-event-update-dialog-title\">Order Event Form</DialogTitle>\n      <DialogContent>\n        <form className={classes.form} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"order-event-order-status\"\n            label=\"Order Status\"\n            className={`${classes.txtFieldBase}`}\n            select\n            value={curOrderEventState.orderStatus}\n            onChange={handleOrderStatusInputChangeEvent}\n            disabled={isNew ? false : true} // if existing order event, you can't edit this\n          >\n            {(!isNew && curOrderEventState &&  // this is to display the order status of existing order event. nothing relating to new order event.\n              <MenuItem key={curOrderEventState.orderStatus} value={curOrderEventState.orderStatus}>\n                {curOrderEventState.orderStatus}\n              </MenuItem>\n            )}\n            {(nextOrderEventOptions.map((orderStatus: OrderStatusEnum) => (\n              <MenuItem key={orderStatus} value={orderStatus}>\n                {orderStatus}\n              </MenuItem>\n            )))}\n          </TextField>\n          <TextField\n            id=\"order-event-note\"\n            label=\"Note\"\n            placeholder={\"Optional\"}\n            multiline\n            rows={3}\n            className={`${classes.txtFieldBase}`}\n            value={curOrderEventState.note}\n            onChange={handleNoteInputChangeEvent}\n          />\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleFormSaveClick} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default OrderEventUpdateFormDialog\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport { OrderEventType, orderStatusBagList, OrderType } from 'domain/order/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteSingleOrderEventActionCreator } from 'reducers/slices/domain/order';\nimport { toDateString } from 'src/utils';\nimport OrderEventUpdateFormDialog from '../OrderEventUpdateFormDialog';\nimport { mSelector } from 'src/selectors/selector';\nimport { UserTypeEnum } from 'src/app';\n\n/**\n * TODO: review this when test data is available.\n *\n *  - logic about order events\n *\n *    - the admin can delete an existing order event if undoable.\n *\n *    - whether existing order event is editable/deletable or not depends on orderEvent.undoable.\n *\n *    - the amdin can edit all order event only about 'note'.\n *\n *    - the admin can edit delete an existing order event if it is undoable and it is the last order event. the other order events are not deletable even if it is undoable.\n *\n **/\n\ninterface OrderTimelinePropsType {\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: `${theme.spacing(1)}px auto`,\n      maxWidth: 700,\n    },\n    paper: {\n      padding: '6px 16px',\n    },\n    secondaryTail: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    btnBox: {\n      textAlign: \"center\",\n    },\n    addBtn: {\n      margin: theme.spacing(1),\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst OrderTimeline: React.FunctionComponent<OrderTimelinePropsType> = ({ order }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // cur selected orderEvent item\n  const [curOrderEvent, setOrderEvent] = React.useState<OrderEventType>(null);\n\n  // update form dialog open\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false)\n\n  // delete confirm dialog open\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false)\n\n  // event handlers to order event \n  const handleEditClick = (e: React.MouseEvent<HTMLButtonElement>, orderEventId: string) => {\n\n    console.log(\"selected order event id: \" + orderEventId)\n\n    const targetOrderEvent = order.orderEvents.find((orderEvent: OrderEventType) => orderEvent.orderEventId == orderEventId)\n\n    console.log(\"selected order event:\")\n    console.log(targetOrderEvent)\n\n    setOrderEvent(targetOrderEvent);\n\n    setFormOpen(true);\n\n  }\n\n  const handleDeleteClick = (e: React.MouseEvent<HTMLButtonElement>, orderEventId: string) => {\n    setDeleteDialogOpen(true);\n    const targetOrderEvent = order.orderEvents.find((orderEvent: OrderEventType) => orderEvent.orderEventId == orderEventId)\n\n    setOrderEvent(targetOrderEvent);\n  }\n\n  /**\n   * update form event handlers\n   **/\n  const handleFormCloseClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setFormOpen(false);\n  }\n\n  /**\n   * deletion confirm dialog event handlers\n   **/\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    /**\n     * DELETE request\n     **/\n    dispatch(\n      deleteSingleOrderEventActionCreator({\n        orderEventId: curOrderEvent.orderEventId,\n        orderId: order.orderId,\n      })\n    )\n  }\n\n  // handle add new order event\n  const handleAddNewClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setOrderEvent(null)\n    setFormOpen(true);\n  }\n\n  // next addable option based on user type\n  const nextOrderEventOptions = React.useMemo(() => {\n    if (auth.userType === UserTypeEnum.MEMBER) {\n      console.log(\"next addable optons: member\")\n      // member\n      return order.nextMemberOrderEventOptions\n    } else {\n      // admin\n      console.log(\"next addable optons: admin\")\n      return order.nextAdminOrderEventOptions\n    }\n  }, [JSON.stringify(order)])\n\n  const renderTimelineContent: (orderEvent: OrderEventType, latestOrderEvent: OrderEventType) => React.ReactNode = (orderEvent, latestOrderEvent) => {\n\n    const OrderStatusIcon = orderStatusBagList[orderEvent.orderStatus].icon\n    const orderStatusObj = orderStatusBagList[orderEvent.orderStatus]\n\n    return (\n      <TimelineItem key={orderEvent.orderEventId}>\n        <TimelineOppositeContent>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {toDateString(orderEvent.createdAt)}\n          </Typography>\n        </TimelineOppositeContent>\n        <TimelineSeparator>\n          <TimelineDot\n            style={{\n              backgroundColor: \"#fff\",\n              color: orderStatusObj.color,\n            }}\n          >\n            <OrderStatusIcon />\n          </TimelineDot>\n          <TimelineConnector />\n        </TimelineSeparator>\n        <TimelineContent>\n          <Paper elevation={3} className={classes.paper}>\n            <Typography variant=\"subtitle1\" component=\"h1\">\n              {orderStatusObj.label}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n              {orderStatusObj.defaultNote}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n              {orderEvent.note}\n            </Typography>\n            <Divider />\n            <Box>\n              {(auth.userType === UserTypeEnum.ADMIN &&\n                <IconButton onClick={(e) => handleEditClick(e, orderEvent.orderEventId)}>\n                  <EditIcon />\n                </IconButton>\n              )}\n              {(auth.userType === UserTypeEnum.ADMIN && orderEvent.undoable && orderEvent.orderEventId === latestOrderEvent.orderEventId &&\n                <IconButton onClick={(e) => handleDeleteClick(e, orderEvent.orderEventId)}>\n                  <RemoveCircleIcon />\n                </IconButton>\n              )}\n            </Box>\n          </Paper>\n        </TimelineContent>\n      </TimelineItem>\n    )\n  }\n\n  const renderTimeline: () => React.ReactNode = () => {\n    return order.orderEvents.map((orderEvent: OrderEventType, index: number) => {\n      return renderTimelineContent(orderEvent, order.latestOrderEvent)\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Timeline align=\"alternate\" className={classes.root}>\n        {renderTimeline()}\n        <Box className={classes.btnBox}>\n          <Button\n            className={classes.addBtn}\n            disabled={!nextOrderEventOptions || nextOrderEventOptions.length === 0}\n            onClick={(e) => handleAddNewClick(e)}\n          >\n            {\"Add New Order Event\"}\n          </Button>\n        </Box>\n      </Timeline>\n      {/** update form dialog **/}\n      <OrderEventUpdateFormDialog\n        onClose={handleFormCloseClick}\n        open={curFormOpen}\n        orderEvent={curOrderEvent}\n        order={order}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"order-event-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"order-event-deletion-dialog\">Order Event Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this order event permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            Order Event Id: <b>{curOrderEvent && curOrderEvent.orderEventId}</b>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  )\n}\n\nexport default OrderTimeline\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport Badge from '@material-ui/core/Badge';\n\ninterface ColorCellPropsType {\n  value: string\n  checked?: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"inline-block\",\n      boxShadow: theme.shadows[3],\n      width: 25,\n      height: 25,\n      margin: theme.spacing(0, 1),\n    },\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst ColorCell: React.FunctionComponent<ColorCellPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  if (props.checked) {\n    return (\n      <Badge color=\"secondary\" variant=\"dot\">\n        <Avatar\n          className={classes.root}\n          style={{\n            backgroundColor: props.value\n          }}\n        >\n          {\"\"}\n        </Avatar>\n      </Badge>\n    )\n  }\n\n  return (\n    <Avatar\n      className={classes.root}\n      style={{\n        backgroundColor: props.value\n      }}\n    >\n      {\"\"}\n    </Avatar>\n  )\n}\n\nexport default ColorCell\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface SizeCellPropsType {\n  value: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      boxShadow: theme.shadows[3],\n      width: 25,\n      height: 25,\n      margin: theme.spacing(0, 1),\n    },\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst SizeCell: React.FunctionComponent<SizeCellPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Avatar\n      className={classes.root}\n    >\n      {props.value}\n    </Avatar>\n  )\n}\n\nexport default SizeCell\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { ProductType, ProductVariantType } from 'domain/product/types';\nimport * as React from 'react';\nimport SampleSelfImage from 'static/self.jpeg';\nimport { OrderDetailType } from 'domain/order/types';\nimport ColorCell from '../GridData/ColorCell';\nimport SizeCell from '../GridData/SizeCell';\nimport Box from '@material-ui/core/Box';\n\n/**\n * need 'orderDetail' or 'product/variant'\n *\n **/\ninterface ProductHorizontalCardPropsType {\n  orderDetail?: OrderDetailType\n  product?: ProductType\n  variant?: ProductVariantType\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: `${theme.spacing(1)}px auto`,\n      maxWidth: 700,\n    },\n    card: {\n      display: \"flex\",\n      flexWrap: \"nowrap\"\n    },\n    cardHeader: {\n      width: \"100%\",\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    },\n    actionBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst ProductHorizontalCard: React.FunctionComponent<ProductHorizontalCardPropsType> = ({ orderDetail, product, variant }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const productName = (product) ? product.productName : orderDetail.productName\n  const productBaseUnitPrice = (product) ? product.productBaseUnitPrice : orderDetail.productUnitPrice\n  const productColor = (variant) ? variant.variantColor : orderDetail.productColor\n  const productSize = (variant) ? variant.productSize.productSizeName : orderDetail.productSize\n\n\n  return (\n    <Card className={`${classes.card} ${classes.root}`}>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={<Avatar alt=\"\" src={SampleSelfImage} />}\n        title={productName}\n        subheader={`$${productBaseUnitPrice}`}\n        action={\n          <Box component=\"div\" className={classes.actionBox}>\n            <ColorCell value={productColor} />\n            <SizeCell value={productSize} />\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          </Box>\n        }\n      >\n      </CardHeader>\n    </Card>\n  )\n}\n\nexport default ProductHorizontalCard\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport * as React from 'react';\nimport { UserTypeEnum } from 'src/app';\nimport SampleSelfImage from 'static/self.jpeg';\n\ninterface UserCardPropsType {\n  firstName: string\n  lastName: string\n  userType: UserTypeEnum\n  email: string\n  avatarImagePath: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: `${theme.spacing(1)}px auto`,\n      maxWidth: 700,\n    },\n    title: {\n      textAlign: \"center\",\n    },\n    card: {\n      display: \"flex\",\n      flexWrap: \"nowrap\"\n    },\n    cardHeader: {\n      width: \"100%\",\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst UserCard: React.FunctionComponent<UserCardPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const imagePath = props.avatarImagePath ? API1_URL + props.avatarImagePath : \"\"\n\n  return (\n    <Card className={`${classes.card} ${classes.root}`}>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={\n          <Avatar alt=\"\" src={imagePath} />\n        }\n        title={`${props.firstName} ${props.lastName} (${props.userType})`}\n        subheader={props.email}\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n      >\n      </CardHeader>\n    </Card>\n  )\n}\n\nexport default UserCard\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { UserAddressType } from 'domain/user/types';\nimport * as React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      /**\n       * TODO: need to match height with other elements (e.g., shipping, billing card)\n       *\n       *  - don't do \"100%\". it overflows. i dont know why.\n       **/\n      height: \"90%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\ndeclare type AddressCardPropsType = {\n  headerIcon: React.ReactNode\n  title: string\n  address: UserAddressType\n}\n\nconst AddressCard: React.FunctionComponent<AddressCardPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            {props.headerIcon}\n          </Avatar>\n        }\n        title={props.title}\n      />\n      <CardContent>\n        {!props.address &&\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" >\n            {\"Oops. You haven't selected your address.\"}\n          </Typography>\n        }\n        {props.address &&\n          <React.Fragment>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.address1} ${props.address.address2}`}\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.city} ${props.address.province}`}\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.country} ${props.address.postalCode}`}\n            </Typography>\n          </React.Fragment>\n        }\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default AddressCard\n\n\n\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport { UserPhoneType } from 'domain/user/types';\nimport * as React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      /**\n       * TODO: need to match height with other elements (e.g., shipping, billing card)\n       *\n       *  - don't do \"100%\". it overflows. i don't know why.\n       **/\n      height: \"90%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: theme.spacing(1),\n    },\n    content: {\n    },\n  }),\n);\n\ndeclare type PhoneCardPropsType = {\n  phone: string\n}\n\nconst PhoneCard: React.FunctionComponent<PhoneCardPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            <PhoneIphoneIcon />\n          </Avatar>\n        }\n        title={\"Phone #\"}\n      />\n      <CardContent className={classes.content}>\n        {!props.phone &&\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" >\n            {\"Oops. You haven't selected your primary phone.\"}\n          </Typography>\n        }\n        {props.phone &&\n          <Typography variant=\"body1\" component=\"p\">\n            {`${props.phone}`}\n          </Typography>\n        }\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default PhoneCard\n\n\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { OrderType } from 'domain/order/types';\nimport * as React from 'react';\n\ninterface OrderDetailPropsType {\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textAlign: \"center\",\n    },\n    textFieldBox: {\n      textAlign: \"center\",\n    },\n    textField: {\n      margin: theme.spacing(1),\n    }\n  }),\n);\n\n/**\n * order detail component\n **/\nconst OrderDetail: React.FunctionComponent<OrderDetailPropsType> = ({ order }) => {\n\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Box component=\"div\" className={classes.textFieldBox}>\n        <TextField\n          id=\"order-number\"\n          label=\"Order #\"\n          className={`${classes.textField}`}\n          value={order.orderNumber}\n          inputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          id=\"order-product-cost\"\n          label=\"Product Cost\"\n          className={`${classes.textField}`}\n          value={order.productCost}\n          inputProps={{\n            readOnly: true,\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <TextField\n          id=\"order-tax-cost\"\n          label=\"Tax Cost\"\n          className={`${classes.textField}`}\n          value={order.taxCost}\n          inputProps={{\n            readOnly: true,\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <TextField\n          id=\"order-total-cost\"\n          label=\"Total Cost\"\n          className={`${classes.textField}`}\n          value={order.taxCost + order.productCost}\n          inputProps={{\n            readOnly: true,\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n      </Box>\n    </React.Fragment>\n  )\n}\n\nexport default OrderDetail\n","import Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport OrderTimeline from 'components/common/OrderTimeline';\nimport ProductHorizontalCard from 'components/common/ProductCard/ProductHorizontalCard';\nimport UserCard from 'components/common/UserCard';\nimport { OrderDetailType, OrderType } from 'domain/order/types';\nimport * as React from 'react';\nimport { UserTypeEnum } from 'src/app';\nimport AddressCard from './AddressCard';\nimport PhoneCard from './PhoneCard';\nimport OrderDetail from 'components/common/OrderDetail';\n\ninterface AdminOrderFormPropsType {\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    orderDetailBox: {\n\n    },\n    title: {\n      textAlign: \"center\",\n      fontWeight: theme.typography.fontWeightBold\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminOrderForm: React.FunctionComponent<AdminOrderFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n        className={classes.orderDetailBox}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Basic Information\"}\n        </Typography>\n        <OrderDetail order={props.order} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Customer\"}\n        </Typography>\n          <UserCard \n            firstName={props.order.orderFirstName}\n            lastName={props.order.orderLastName}\n            email={props.order.orderEmail}\n            userType={props.order.user ? props.order.user.userType.userType : UserTypeEnum.GUEST}\n            avatarImagePath={props.order.user ? props.order.user.avatarImagePath : null}\n          />\n        <Grid\n          container\n          justify=\"center\"\n        >\n          <Grid\n            item\n            xs={12}\n            md={4}\n\n          >\n            <PhoneCard phone={props.order.orderPhone} />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={4}\n          >\n            <AddressCard\n              address={props.order.shippingAddress}\n              headerIcon={<LocalShippingIcon />}\n              title={\"Shipping Address\"}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={4}\n          >\n            <AddressCard\n              address={props.order.billingAddress}\n              headerIcon={<ReceiptIcon />}\n              title={\"Billing Address\"}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Products\"}\n        </Typography>\n        {\n          props.order.orderDetails.map((orderDetail: OrderDetailType, index: number) => (\n            <ProductHorizontalCard orderDetail={orderDetail} key={index} />\n          ))\n        }\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Status\"}\n        </Typography>\n        <OrderTimeline order={props.order} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AdminOrderForm\n\n","import Drawer from '@material-ui/core/Drawer';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminOrderForm from '../AdminOrderForm';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport { OrderType } from 'domain/order/types';\n\ndeclare type AdminOrderFormDrawerPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    drawer: {\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    drawerPaper: {\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n    closeFormBox: {\n      position: \"sticky\", // not working\n      width: \"100%\",\n      textAlign: \"center\",\n    }\n  }),\n);\n\n/**\n * reuse this for member order management too.\n *\n **/\nconst AdminOrderFormDrawer: React.FunctionComponent<AdminOrderFormDrawerPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n\n  const classes = useStyles();\n\n  const toggleDrawer = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  const handleNavToggleClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.setFormOpen(!props.curFormOpen);\n  }\n\n  const handleCloseEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.setFormOpen(false);\n  }\n\n  // render function\n\n  // render nav items\n  return (\n    <React.Fragment>\n      <Drawer\n        className={classes.drawer}\n        variant={'temporary'}\n        anchor=\"bottom\"\n        open={props.curFormOpen}\n        onClose={toggleDrawer(false)}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Box component=\"div\" className={classes.closeFormBox}>\n          <IconButton onClick={handleCloseEvent}>\n            <GetAppIcon />            \n          </IconButton>\n        </Box>\n        <AdminOrderForm order={props.order} />\n      </Drawer>\n    </React.Fragment>\n  )\n}\n\nexport default AdminOrderFormDrawer\n\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryStartDateActions, productQueryEndDateActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\nimport { orderQueryEndDateActions, orderQueryStartDateActions } from 'reducers/slices/domain/order';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst OrderDateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeOrderQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeOrderQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(orderQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(orderQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default OrderDateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ProductSortEnum } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQuerySortActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\nimport { orderQuerySortActions } from 'reducers/slices/domain/order';\nimport { OrderSortEnum } from 'domain/order/types';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst orderSortList = [\n  {\n    value: OrderSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: OrderSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n]\n\n\nconst OrderSortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeOrderQuerySortSelector())\n\n  const handleOrderSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(orderQuerySortActions.update(e.currentTarget.value as OrderSortEnum))\n  }\n\n  const renderOrderSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderOrderSortRadioInputs updated\");\n    return orderSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"order-sort\" name=\"order-sort\" value={curSort} onChange={handleOrderSortInputChangeEvent}>\n          {renderOrderSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default OrderSortTabPanel\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport { OrderStatusEnum, orderStatusLabelList } from 'domain/order/types';\nimport { orderQueryOrderStatusActions } from 'reducers/slices/domain/order';\n\n//interface OrderStatusFilterTabPanelPropsType {\n//  curOrderStatusId: string\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst OrderStatusFilterTabPanel: React.FunctionComponent<{}> = ({\n  \n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // categories option\n  const curOrderStatusList = Object.values(OrderStatusEnum) \n\n  // cur query orderstatus id \n  const curOrderStatus = useSelector(mSelector.makeOrderQueryOrderStatusSelector())\n\n  // event handler change\n  const handleOrderStatusInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(orderQueryOrderStatusActions.update(e.currentTarget.value));\n  }\n\n  const renderOrderStatusRadioInputs: () => React.ReactNode = () => {\n    return curOrderStatusList.map((orderStatus: OrderStatusEnum) => {\n      return (\n        <FormControlLabel\n          value={orderStatus}\n          control={<Radio />}\n          label={orderStatusLabelList[orderStatus]}\n          key={orderStatus}\n        />\n      )\n    })\n  }\n\n  console.log(\"cur orderStatus id (query string)\");\n  console.log(curOrderStatus);\n\n  /**\n   *\n   * bug?: https://stackoverflow.com/questions/58952742/how-can-i-control-a-radiogroup-from-material-ui\n   *\n   *  - 'value' should not be null/undefined at RadioGroup otherwise, it won't check even if you clicked.\n   *\n   * solution: data type inconsistency \n   *\n   *  when adding 'toString()' to 'value', it solved this problem.\n   *\n   *  - https://github.com/mui-org/material-ui/issues/16272\n   *\n   **/\n  return (\n    <Box p={3}>\n      <RadioGroup aria-label=\"product-orderStatus\" name=\"product-orderStatus-filter-radio\" value={curOrderStatus} onChange={handleOrderStatusInputChangeEvent}>\n        <FormControlLabel value={null} control={<Radio />} label={\"All\"} key={null} />\n        {renderOrderStatusRadioInputs()}\n      </RadioGroup>\n    </Box>\n  )\n}\n\nexport default OrderStatusFilterTabPanel\n\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport OrderDateFilterTabPanel from './TabPanel/OrderDateFilterTabPanel';\nimport OrderSortTabPanel from './TabPanel/OrderSortTabPanel';\nimport OrderStatusFilterTabPanel from './TabPanel/OrderStatusFilterTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabBox: {\n      // for search controller which is position: absolute\n      position: \"relative\",\n    },\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n      zIndex: 1,\n      boxShadow: theme.shadows[8],\n    },\n    tabRoot: {\n      minWidth: 50,\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst AdminOrderSearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeProductQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeProductQuerySelector());\n\n  return (\n    <Box component=\"div\" className={classes.tabBox}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          classes={{\n            root: classes.tabRoot,\n          }}\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" classes={{ root: classes.tabRoot }} {...a11yProps(0)} />\n          <Tab label=\"Order Status\" classes={{ root: classes.tabRoot }} {...a11yProps(1)} />\n          <Tab label=\"Date\" classes={{ root: classes.tabRoot }} {...a11yProps(2)} />\n          <Tab label=\"Sort\" classes={{ root: classes.tabRoot }} {...a11yProps(3)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <OrderStatusFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <OrderDateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={3} \n        className={classes.tabPanel}\n        render={() => <OrderSortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default AdminOrderSearchController\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridPageChangeParams, GridRowsProp } from '@material-ui/data-grid';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { getCurOrderStatus } from 'domain/order';\nimport { OrderType } from 'domain/order/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchOrderActionCreator, orderPaginationPageActions } from 'reducers/slices/domain/order';\nimport { FetchStatusEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminOrderFormDrawer from '../AdminOrderFormDrawer';\nimport AdminOrderSearchController from '../AdminOrderSearchController';\n\ndeclare type AdminOrderGridViewPropsType = {\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(4),\n    },\n    loadingBox: {\n      height: \"80vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: OrderType[]) => GridRowsProp = (domains) => {\n  return domains.map((domain: OrderType) => {\n    return {\n      id: domain.orderNumber,\n      date: domain.createdAt,\n      cost: domain.productCost, // TODO: implement this at the backend \n      status: getCurOrderStatus(domain), //domain.orderEvents[domain.orderEvents.length - 1].orderStatus,\n      actions: domain.orderId,\n    }\n  })\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit) => {\n  return [\n    { field: 'id', headerName: 'ID', width: 150 },\n    { field: 'date', headerName: 'Order Date', width: 150 },\n    { field: 'cost', headerName: 'Cost', width: 150 },\n    { field: 'status', headerName: 'Status', width: 150 },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-order-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ];\n}\n\n/**\n * admin product management component\n *\n **/\nconst AdminOrderGridView: React.FunctionComponent<AdminOrderGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // domain cur item\n  const curOrderList = useSelector(mSelector.makeOrderSelector());\n\n  /**\n   * WARN: don't create duplicated data like 'curOrder' as state.\n   *\n   * breaking the rule of 'a single source of truth'. when you need to refer to data, always go to redux store. !!!\n   *\n   **/\n\n  // cur selected order item\n  const [curOrderId, setOrderId] = React.useState<string>(null);\n\n  const pagination = useSelector(mSelector.makeProductPaginationSelector())\n\n  const curQueryString = useSelector(mSelector.makeOrderQuerySelector())\n\n  // fetch order fetching result\n  const curFetchOrderStatus = useSelector(mSelector.makeFetchOrderFetchStatusSelector())\n\n  // fetch order\n  React.useEffect(() => {\n    dispatch(fetchOrderActionCreator())\n  }, [\n      JSON.stringify(curQueryString),\n      pagination.page\n    ])\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false);\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const orderId = e.currentTarget.getAttribute(\"data-order-id\")\n    setOrderId(orderId);\n    setFormOpen(true);\n  }\n\n  // pagination event handler\n\n  const handlePageChange = (param: GridPageChangeParams) => {\n    // need to decrement since we incremented when display\n    const nextPage = param.page;\n\n    dispatch(orderPaginationPageActions.update(nextPage))\n  }\n\n  // fetch result\n  if (curFetchOrderStatus === FetchStatusEnum.FETCHING) {\n    return (\n      <Box className={classes.loadingBox}>\n        <CircularProgress />\n      </Box>\n    )\n  } else if (curFetchOrderStatus === FetchStatusEnum.FAILED) {\n    return (\n      <Box className={classes.loadingBox}>\n        <Typography variant=\"body1\" component=\"h2\" >\n          {\"failed to fetch data... please try again...\"}\n        </Typography>\n      </Box>\n    )\n  }\n\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"List\"\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <AdminOrderSearchController />\n        <DataGrid\n          rows={generateRows(curOrderList)}\n          columns={generateColumns(handleEditClick)}\n          page={pagination.page} // don't forget to increment when display\n          pageSize={pagination.limit}\n          rowCount={pagination.totalElements}\n          onPageChange={handlePageChange}\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      <AdminOrderFormDrawer\n        curFormOpen={curFormOpen}\n        setFormOpen={setFormOpen}\n        order={curOrderList.find((order: OrderType) => order.orderId === curOrderId)}\n      />\n    </Card>\n  )\n}\n\nexport default AdminOrderGridView\n\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport AdminOrderGridView from './AdminOrderGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n *  - TODO: implement grid row click to display its detail.\n *\n *    - currently, (+) button opens the detaul drawer. fix this.\n *\n **/\nconst AdminOrder: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminOrderGridView />\n    </Box>\n  )\n}\n\nexport default AdminOrder\n\n\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { NormalizedProductType, ProductSortEnum, ProductType, ProductVariantType, ProductCriteria, ProductVariantCriteria } from \"domain/product/types\";\nimport merge from \"lodash/merge\";\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request with cache\nexport const fetchProductWithCacheActionCreator = createAction(\"saga/domain/product/fetch/cache\")\nexport const fetchProductWithCacheActionTypeName = fetchProductWithCacheActionCreator().type\n\n// for GET request with cache\nexport const fetchSingleProductWithCacheActionCreator = createAction(\"saga/domain/product/fetchSingle/cache\")\nexport const fetchSingleProductWithCacheActionTypeName = fetchSingleProductWithCacheActionCreator().type\n\n// for GET request\nexport const fetchProductActionCreator = createAction(\"saga/domain/product/fetch\")\nexport const fetchProductActionTypeName = fetchProductActionCreator().type\n\n// for GET by Id request\nexport declare type FetchSingleProductActionType = { productId: string } \nexport const fetchSingleProductActionCreator = createAction<FetchSingleProductActionType>(\"saga/domain/product/fetchSingle\")\nexport const fetchSingleProductActionTypeName = fetchSingleProductActionCreator().type\n\n// for GET request \nexport const fetchPublicProductActionCreator = createAction(\"saga/domain/product/fetchPublic\")\nexport const fetchPublicProductActionTypeName = fetchPublicProductActionCreator().type\n\n// for POST (add a new cart item) request\nexport declare type PostProductActionType = ProductCriteria \nexport const postProductActionCreator = createAction<PostProductActionType>(\"saga/domain/product/post\")\nexport const postProductActionTypeName = postProductActionCreator().type\n\n// for PUT (replace) request\nexport declare type PutProductActionType = ProductCriteria \nexport const putProductActionCreator = createAction<PutProductActionType>(\"saga/domain/product/put\")\nexport const putProductActionTypeName = putProductActionCreator().type\n\n// for DELETE (delete single cart item) request\nexport declare type DeleteSingleProductActionType = { productId: string } \nexport const deleteSingleProductActionCreator = createAction<DeleteSingleProductActionType>(\"saga/domain/product/deleteSingle\")\nexport const deleteSingleProductActionTypeName = deleteSingleProductActionCreator().type\n\n// for DELETE (delete all of cart items) request\nexport const deleteProductActionCreator = createAction<ProductType>(\"saga/domain/product/delete\")\nexport const deleteProductActionTypeName = deleteProductActionCreator().type\n\n// for POST (add a new cart item) request\nexport declare type PostProductVariantActionType = ProductVariantCriteria & { productId: string }\nexport const postProductVariantActionCreator = createAction<PostProductVariantActionType>(\"saga/domain/product/variant/post\")\nexport const postProductVariantActionTypeName = postProductVariantActionCreator().type\n\n// for PUT (replace) request\nexport declare type PutProductVariantActionType = ProductVariantCriteria & { productId: string }\nexport const putProductVariantActionCreator = createAction<PutProductVariantActionType>(\"saga/domain/product/variant/put\")\nexport const putProductVariantActionTypeName = putProductVariantActionCreator().type\n\n// for DELETE (delete single cart item) request\nexport declare type DeleteSingleProductVariantActionType = { variantId: string, productId: string } \nexport const deleteSingleProductVariantActionCreator = createAction<DeleteSingleProductVariantActionType>(\"saga/domain/product/variant/deleteSingle\")\nexport const deleteSingleProductVariantActionTypeName = deleteSingleProductVariantActionCreator().type\n\n/**\n *\n * domain.products.data state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductActionType = PayloadAction<NormalizedProductType> \n\nexport const productSlice = createSlice({ \n  name: \"domain/product/data\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when update existing one\n    merge: (state: NormalizedProductType, action: ProductActionType) => merge(state, action.payload),\n\n    // use when you want to replace\n    update: (state: NormalizedProductType, action: ProductActionType) => action.payload,\n\n    // use when you want to remove a single entity\n    delete: (state: NormalizedProductType, action: PayloadAction<{ productId: string }>) =>  {\n      delete state[action.payload.productId]\n      return state\n    },\n\n    appendVariant: (state: NormalizedProductType, action: PayloadAction<{ productId: string, variant: ProductVariantType }>) => {\n      state[action.payload.productId].variants.push(action.payload.variant)\n      return state\n    },\n\n    updateVariant: (state: NormalizedProductType, action: PayloadAction<{ productId: string, targetVariant: ProductVariantType }>) => {\n      state[action.payload.productId].variants = state[action.payload.productId].variants.map((variant: ProductVariantType) => {\n        if (variant.variantId == action.payload.targetVariant.variantId) {\n          return action.payload.targetVariant\n        }\n        return variant\n      })\n      return state\n    },\n\n    deleteVariant: (state: NormalizedProductType, action: PayloadAction<{ productId: string, variantId: string }>) => {\n      state[action.payload.productId].variants = state[action.payload.productId].variants.filter((variant: ProductVariantType) => variant.variantId != action.payload.variantId)\n      return state\n    },\n\n    clear: (state: NormalizedProductType) => ({}),\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productSliceReducer = productSlice.reducer\nexport const productActions = productSlice.actions\n\n\n/**\n *\n * domain.products.query.searchQuery state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQuerySearchQueryActionType = PayloadAction<string> \n\nexport const productQuerySearchQuerySlice = createSlice({ \n  name: \"domain/products/query/searchQuery\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQuerySearchQueryActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQuerySearchQuerySliceReducer = productQuerySearchQuerySlice.reducer\nexport const productQuerySearchQueryActions = productQuerySearchQuerySlice.actions\n\n\n/**\n *\n * domain.products.query.categoryId state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryCategoryIdActionType = PayloadAction<string> \n\nexport const productQueryCategoryIdSlice = createSlice({ \n  name: \"domain/products/query/categoryId\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryCategoryIdActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryCategoryIdSliceReducer = productQueryCategoryIdSlice.reducer\nexport const productQueryCategoryIdActions = productQueryCategoryIdSlice.actions\n\n\n/**\n *\n * domain.products.query.minPrice state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryMinPriceActionType = PayloadAction<number> \n\nexport const productQueryMinPriceSlice = createSlice({ \n  name: \"domain/products/query/minPrice\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryMinPriceActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryMinPriceSliceReducer = productQueryMinPriceSlice.reducer\nexport const productQueryMinPriceActions = productQueryMinPriceSlice.actions\n\n\n/**\n *\n * domain.products.query.maxPrice state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryMaxPriceActionType = PayloadAction<number> \n\nexport const productQueryMaxPriceSlice = createSlice({ \n  name: \"domain/products/query/maxPrice\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryMaxPriceActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryMaxPriceSliceReducer = productQueryMaxPriceSlice.reducer\nexport const productQueryMaxPriceActions = productQueryMaxPriceSlice.actions\n\n\n/**\n *\n * domain.products.query.reviewPoint state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryReviewPointActionType = PayloadAction<number> \n\nexport const productQueryReviewPointSlice = createSlice({ \n  name: \"domain/products/query/reviewPoint\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryReviewPointActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryReviewPointSliceReducer = productQueryReviewPointSlice.reducer\nexport const productQueryReviewPointActions = productQueryReviewPointSlice.actions\n\n\n/**\n *\n * domain.products.query.isDiscount state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryIsDiscountActionType = PayloadAction<boolean> \n\nexport const productQueryIsDiscountSlice = createSlice({ \n  name: \"domain/products/query/isDiscount\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryIsDiscountActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryIsDiscountSliceReducer = productQueryIsDiscountSlice.reducer\nexport const productQueryIsDiscountActions = productQueryIsDiscountSlice.actions\n\n\n/**\n *\n * domain.products.query.startDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryStartDateActionType = PayloadAction<Date> \n\nexport const productQueryStartDateSlice = createSlice({ \n  name: \"domain/products/query/startDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryStartDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryStartDateSliceReducer = productQueryStartDateSlice.reducer\nexport const productQueryStartDateActions = productQueryStartDateSlice.actions\n\n\n/**\n *\n * domain.products.query.endDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQueryEndDateActionType = PayloadAction<Date> \n\nexport const productQueryEndDateSlice = createSlice({ \n  name: \"domain/products/query/endDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQueryEndDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQueryEndDateSliceReducer = productQueryEndDateSlice.reducer\nexport const productQueryEndDateActions = productQueryEndDateSlice.actions\n\n\n/**\n *\n * domain.products.query.sort state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductQuerySortActionType = PayloadAction<ProductSortEnum> \n\nexport const productQuerySortSlice = createSlice({ \n  name: \"domain/products/query/sort\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductQuerySortActionType) => action.payload,\n    clear: (state: string) => ProductSortEnum.DATE_DESC,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productQuerySortSliceReducer = productQuerySortSlice.reducer\nexport const productQuerySortActions = productQuerySortSlice.actions\n\n\n/**\n *\n * domain.products.pagination state Slice (no side effects).\n *\n * you CANNOT use this since you register reducers for each property (not as whole object)\n *\n **/\n// action type             \n//export type ProductPaginationActionType = PayloadAction<DomainPaginationType> \n//\n//export const productPaginationSlice = createSlice({ \n//  name: \"domain/products/pagination\", // a name used in action type\n//  initialState: {},        \n//  reducers: {              \n//    /**\n//     *\n//     *  a property name gonna be the name of action\n//     *  its value is the reduce\n//     *\n//     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n//     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n//     *\n//     **/\n//\n//    // use when you want to replace\n//    update: (state: DomainPaginationType, action: ProductPaginationActionType) => {\n//      console.log(\"inside pagination action\");\n//      console.log(action.payload)\n//      return action.payload\n//    },\n//    clear: (state: string) => ({\n//      page: 0,\n//      limit: 20,\n//      totalPages: 1,\n//    }),\n//  },\n//  /**\n//   * extraReducers property\n//   *\n//   * You can respond to other action types besides the types it has generated. \n//   *\n//   **/\n//}) \n//\n//export const productPaginationSliceReducer = productPaginationSlice.reducer\n//export const productPaginationActions = productPaginationSlice.actions\n\n\n/**\n *\n * domain.products.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductPaginationPageActionType = PayloadAction<number> \n\nexport const productPaginationPageSlice = createSlice({ \n  name: \"domain/products/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productPaginationPageSliceReducer = productPaginationPageSlice.reducer\nexport const productPaginationPageActions = productPaginationPageSlice.actions\n\n\n/**\n *\n * domain.products.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductPaginationLimitActionType = PayloadAction<number> \n\nexport const productPaginationLimitSlice = createSlice({ \n  name: \"domain/products/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productPaginationLimitSliceReducer = productPaginationLimitSlice.reducer\nexport const productPaginationLimitActions = productPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.products.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const productPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/products/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ProductPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productPaginationTotalPagesSliceReducer = productPaginationTotalPagesSlice.reducer\nexport const productPaginationTotalPagesActions = productPaginationTotalPagesSlice.actions\n\n\n/**\n *\n * domain.products.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const productPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/products/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: ProductPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 0,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productPaginationTotalElementsSliceReducer = productPaginationTotalElementsSlice.reducer\nexport const productPaginationTotalElementsActions = productPaginationTotalElementsSlice.actions\n\n\n/**\n *\n * domain.products.curItems state Slice (no side effects)\n *\n **/\n// action type             \nexport type ProductcurItemsActionType = PayloadAction<string[]> \n\nexport const productCurItemsSlice = createSlice({ \n  name: \"domain/products/curItems\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string[], action: ProductcurItemsActionType) => action.payload,\n    clear: (state: string[]) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const productCurItemsSliceReducer = productCurItemsSlice.reducer\nexport const productCurItemsActions = productCurItemsSlice.actions\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport SampleProductImage from 'static/sample-product-1-1.jpg';\nimport { ProductImageType } from 'domain/product/types';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    avatarBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: `${theme.spacing(1)}px 0`,\n    },\n    avatar: {\n      width: 100,\n      height: 100,\n      boxShadow: theme.shadows[5],\n    },\n    root: {\n      maxWidth: 200,\n      margin: theme.spacing(1),\n    },\n    media: {\n      // aspect ratio: 1:1\n      height: 0,\n      paddingTop: '100%',\n      marginTop: '30',\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\ninterface ProductImageFormPropsType {\n  productImages: ProductImageType[],\n  productImageFiles: File[],\n  onUpdate: (file: File, path: string, index: number) => void\n  onRemove: (index: number) => void \n}\n\n/**\n * admin product images upload component \n *\n **/\nconst ProductImagesForm: React.FunctionComponent<ProductImageFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  /**\n   * file uploading stuff\n   **/\n  const length = 5;\n  const imageInputRefs = React.useRef<HTMLInputElement[]>(Array(length).fill(null));\n\n  const handleTriggerClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    const index = parseInt(e.currentTarget.getAttribute(\"data-image-index\")) as number\n\n    if (imageInputRefs.current[index]) {\n      imageInputRefs.current[index].click();\n    }\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\n    const index = parseInt(e.currentTarget.getAttribute(\"data-image-index\")) as number\n\n    const newFile = e.currentTarget.files[0];\n    const newPath = URL.createObjectURL(e.currentTarget.files[0])\n\n    props.onUpdate(newFile, newPath, index);\n\n  }\n\n  const handleRemoveFileClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    const index = parseInt(e.currentTarget.getAttribute(\"data-image-index\")) as number\n\n    props.onRemove(index)\n  }\n\n  // render helper\n  const renderImageCards: () => React.ReactNode = () => {\n    return props.productImageFiles.map((file: File, index: number) => {\n\n      return (\n        <Card className={classes.root} key={index}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label={`product-image-${index + 1}`}>\n                {index}\n              </Avatar>\n            }\n            title={`Product Image ${index + 1}`}\n            subheader={index === 0 ? `Primary` : \"\"}\n          />\n          <CardMedia\n            className={classes.media}\n            image={!props.productImages[index].isChange ? API1_URL + props.productImages[index].productImagePath : props.productImages[index].productImagePath}\n            title={file ? file.name : \"\"}\n          />\n          <CardActions disableSpacing>\n            <IconButton data-image-index={index} onClick={handleRemoveFileClick}>\n              <DeleteForeverIcon />\n            </IconButton>\n            <input\n              accept=\"image/*\"\n              className={null}\n              id={`product-image-input-${index}`}\n              multiple\n              hidden\n              type=\"file\"\n              ref={(el) => imageInputRefs.current[index] = el}\n              data-image-index={index}\n              onChange={handleFileChange}\n            />\n            <label htmlFor={`product-image-input-${index}`}>\n              <IconButton data-image-index={index} onClick={handleTriggerClick}>\n                <ImageIcon />\n              </IconButton>\n            </label>\n          </CardActions>\n        </Card>\n      )\n    })\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      {renderImageCards()}\n    </Grid>\n  )\n}\n\nexport default ProductImagesForm\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { CategoryType, defaultProductOnlyData, defaultProductValidationData, ProductDataType, ProductType, ProductValidationDataType } from 'domain/product/types';\nimport { useValidation } from 'hooks/validation';\nimport { productSchema } from 'hooks/validation/rules';\nimport cloneDeep from 'lodash/cloneDeep';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCategoryActionCreator } from 'reducers/slices/domain/category';\nimport { postProductActionCreator, putProductActionCreator } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\nimport { renameFile } from 'src/utils';\nimport ProductImagesForm from './ProductImagesForm';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\ninterface AdminProductFormPropsType {\n  product: ProductType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n    },\n    subtitle: {\n      margin: theme.spacing(1, 0),\n      fontWeight: theme.typography.fontWeightBold\n    },\n    errorMsg: {\n      color: theme.palette.error.main,\n      fontSize: theme.typography.subtitle2.fontSize,\n    },\n    txtFieldBase: {\n      width: \"80%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    productNameInput: {\n      minWidth: 280,\n      maxWidth: 600,\n    },\n    productDescriptionInput: {\n      minWidth: 280,\n      width: \"100%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    productPathInput: {\n      maxWidth: 600,\n      minWidth: 280,\n    },\n    productPriceInput: {\n      maxWidth: 200,\n      minWidth: 200,\n    },\n    productSizeInput: {\n      maxWidth: 200,\n      minWidth: 200,\n    },\n    productCategoryInput: {\n      maxWidth: 200,\n      minWidth: 200,\n    },\n    productDateInput: {\n    },\n    productNoteInput: {\n      minWidth: 280,\n      width: \"100%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    actionBox: {\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminProductForm = React.forwardRef<any, AdminProductFormPropsType>((props, ref) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch()\n\n  /**\n   *\n   * need to do 'merge({}, defaultProductOnlyData, props.product)' since props.product does not include 'productImageFiles'.\n   * \n   **/\n  const [curProductState, setProductState] = React.useState<ProductDataType>(props.product ? merge({}, defaultProductOnlyData, props.product) : defaultProductOnlyData);\n\n  // update/create logic for product\n  //  - true: create\n  //  - false: update\n  // if props.product exists, it updates, otherwise, new\n  const [isNew, setNew] = React.useState<boolean>(props.product ? false : true);\n\n  // validation logic (should move to hooks)\n  const [curProductValidationState, setProductValidationState] = React.useState<ProductValidationDataType>(defaultProductValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curProductState,\n    curValidationDomain: curProductValidationState,\n    schema: productSchema,\n    setValidationDomain: setProductValidationState,\n    defaultValidationDomain: defaultProductValidationData,  \n  })\n\n  // test category list\n  const categoryList = useSelector(mSelector.makeCategorySelector())\n\n  // category if not store in redux store\n  React.useEffect(() => {\n    dispatch(fetchCategoryActionCreator());\n  }, [])\n\n  // set default category after category list is filled\n  React.useEffect(() => {\n\n    if (!curProductState.category && categoryList.length > 0) {\n      setProductState((prev: ProductDataType) => ({\n        ...prev,\n        category: categoryList[0],\n      }))\n    }\n    \n  }, [\n    categoryList.length \n  ])\n\n  // event handlers\n  const handleProductNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductName = e.currentTarget.value\n    updateValidationAt(\"productName\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productName: nextProductName\n    }));\n  }\n\n  const handleProductDescriptionInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductDescription = e.currentTarget.value\n    updateValidationAt(\"productDescription\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productDescription: nextProductDescription\n    }));\n  }\n\n  const handleProductPathInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductPath = e.currentTarget.value\n    updateValidationAt(\"productPath\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productPath: nextProductPath\n    }));\n  }\n\n  const handleProductCategoryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    // DON'T USE 'e.currentTarget.value' for select input (material-ui)\n    const nextCategoryId = e.target.value;\n\n    const nextCategory = categoryList.find((category: CategoryType) => nextCategoryId === category.categoryId)\n    // must not be null\n    updateValidationAt(\"category\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      category: nextCategory\n    }));\n  }\n\n  const handleProductReleaseDateChange = (date: Date | null) => {\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      releaseDate: date\n    }));\n  };\n\n  const handleProductBaseUnitPriceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductBaseUnitPrice = e.currentTarget.value\n    console.log(\"product base unit price\")\n    updateValidationAt(\"productBaseUnitPrice\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productBaseUnitPrice: parseFloat(nextProductBaseUnitPrice)\n    }));\n  }\n\n  const handleProductBaseDiscountChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductBaseDiscount: boolean = e.currentTarget.checked\n    updateValidationAt(\"isDiscount\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      isDiscount: nextProductBaseDiscount,\n    }));\n  }\n\n  const handleProductBaseDiscountPriceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductBaseDiscountPrice = e.currentTarget.value\n    updateValidationAt(\"productBaseDiscountPrice\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productBaseDiscountPrice: parseFloat(nextProductBaseDiscountPrice)\n    }));\n  }\n\n  const handleProductBaseDiscountStartDateChange = (date: Date | null) => {\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productBaseDiscountStartDate: date\n    }));\n  };\n\n  const handleProductBaseDiscountEndDateChange = (date: Date | null) => {\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      productBaseDiscountEndDate: date\n    }));\n  };\n\n  const handleProductNoteInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductNote = e.currentTarget.value\n    updateValidationAt(\"note\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      note: nextProductNote\n    }));\n  }\n\n  const handleProductPublicChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductPublic: boolean = e.currentTarget.checked\n    updateValidationAt(\"isPublic\", e.currentTarget.value);\n    setProductState((prev: ProductDataType) => ({\n      ...prev,\n      isPublic: nextProductPublic,\n    }));\n  }\n\n  // product image state update\n  const updateProductImage = (file: File, path: string, index: number) => {\n\n    const nextState = cloneDeep(curProductState)\n    const renamedFile = renameFile(file, curProductState.productImages[index].productImageName);\n    nextState.productImageFiles[index] = renamedFile \n    nextState.productImages[index].productImagePath = path\n    nextState.productImages[index].isChange = true\n\n\n    updateValidationAt(\"productImages\", nextState.productImages);\n    setProductState(nextState)\n  }\n\n  const removeProductImage = (index: number) => {\n\n    const nextState = cloneDeep(curProductState)\n    nextState.productImageFiles[index] = null\n    nextState.productImages[index].productImagePath = \"\"\n    nextState.productImages[index].isChange = true\n\n    updateValidationAt(\"productImages\", nextState.productImages);\n    setProductState(nextState)\n  }\n\n  /**\n   * call child function from parent \n   *\n   * ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  React.useImperativeHandle(ref, () => ({\n\n    // event handler to submit\n    handleSaveClickEvent: (e: React.MouseEvent<HTMLButtonElement>) => {\n\n      const isValid: boolean = isValidSync(curProductState)\n\n      console.log(isValid);\n\n      /**\n       * product images uploading logic.\n       *\n       * - productImages: an object include image public path to the image.\n       *\n       *  - this does not used as request body. even if it is included in the request body, it is not processed at backend.\n       *\n       * - productImageFiles: File[]\n       *\n       *  - this is used to upload the iamges to the api.\n       *\n       *  - need validation.\n       *\n       *  - this is processed at the backend to store the image and generate public path.\n       *\n       *\n       **/\n\n      if (isValid) {\n\n        // pass \n        console.log(\"passed\")\n        if (isNew) {\n          console.log(\"new product creation\")\n          // request\n          dispatch(\n            postProductActionCreator({\n              productName: curProductState.productName,\n              productDescription: curProductState.productDescription,\n              productPath: curProductState.productPath,\n              productBaseUnitPrice: curProductState.productBaseUnitPrice,\n              productBaseDiscountPrice: curProductState.productBaseDiscountPrice,\n              productBaseDiscountStartDate: curProductState.productBaseDiscountStartDate,\n              productBaseDiscountEndDate: curProductState.productBaseDiscountEndDate,\n              isDiscount: curProductState.isDiscount,\n              isPublic: curProductState.isPublic,\n              category: curProductState.category,\n              releaseDate: curProductState.releaseDate,\n              note: curProductState.note,\n              productImageFiles: curProductState.productImageFiles,\n              productImages: curProductState.productImages,\n            }) \n          )\n\n        } else {\n          console.log(\"new product creation\")\n          // request\n          dispatch(\n            putProductActionCreator({\n              productId: curProductState.productId,\n              productName: curProductState.productName,\n              productDescription: curProductState.productDescription,\n              productPath: curProductState.productPath,\n              productBaseUnitPrice: curProductState.productBaseUnitPrice,\n              productBaseDiscountPrice: curProductState.productBaseDiscountPrice,\n              productBaseDiscountStartDate: curProductState.productBaseDiscountStartDate,\n              productBaseDiscountEndDate: curProductState.productBaseDiscountEndDate,\n              isDiscount: curProductState.isDiscount,\n              isPublic: curProductState.isPublic,\n              category: curProductState.category,\n              releaseDate: curProductState.releaseDate,\n              note: curProductState.note,\n              productImageFiles: curProductState.productImageFiles,\n              productImages: curProductState.productImages,\n            }) \n          )\n          \n        }\n      } else {\n        console.log(\"failed\")\n        updateAllValidation()\n      }\n    }\n  }));\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"product-name\"\n        label=\"Name\"\n        className={`${classes.txtFieldBase} ${classes.productNameInput}`}\n        value={curProductState.productName}\n        onChange={handleProductNameInputChangeEvent}\n        helperText={curProductValidationState.productName}\n        error={curProductValidationState.productName !== \"\"}\n      />\n      <TextField\n        id=\"product-description\"\n        label=\"Description\"\n        multiline\n        rows={4}\n        className={`${classes.productDescriptionInput}`}\n        value={curProductState.productDescription}\n        onChange={handleProductDescriptionInputChangeEvent}\n        helperText={curProductValidationState.productDescription}\n        error={curProductValidationState.productDescription !== \"\"}\n      />\n      <TextField\n        id=\"product-path\"\n        label=\"Product Path\"\n        className={`${classes.txtFieldBase} ${classes.productNameInput}`}\n        value={curProductState.productPath}\n        onChange={handleProductPathInputChangeEvent}\n        helperText={curProductValidationState.productPath}\n        error={curProductValidationState.productPath !== \"\"}\n      />\n      <TextField\n        id=\"product-category\"\n        label=\"Category\"\n        className={`${classes.txtFieldBase} ${classes.productNameInput}`}\n        select\n        value={curProductState.category ? curProductState.category.categoryId : \"1\"}\n        onChange={handleProductCategoryInputChangeEvent}\n        helperText={curProductValidationState.category}\n        error={curProductValidationState.category !== \"\"}\n      >\n        {categoryList.map((category: CategoryType) => (\n          <MenuItem key={category.categoryId} value={category.categoryId}>\n            {category.categoryName}\n          </MenuItem>\n        ))}\n      </TextField>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"product-release-date\"\n          label=\"Release Date\"\n          format=\"MM/dd/yyyy\"\n          value={curProductState.releaseDate}\n          onChange={handleProductReleaseDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change release date',\n          }}\n          className={classes.productDateInput}\n        />\n      </MuiPickersUtilsProvider>\n      {/** Base **/}\n      <Typography variant=\"subtitle1\" component=\"h6\" align=\"left\" className={classes.subtitle}>\n        Base\n      </Typography>\n      <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\" className={classes.subtitle}>\n        the base inforamtion takes over any variant informatiion if you don't specify these information on each variant.\n      </Typography>\n      <TextField\n        id=\"product-base-unit-price\"\n        label=\"Unit Price\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productPriceInput}`}\n        value={curProductState.productBaseUnitPrice}\n        onChange={handleProductBaseUnitPriceInputChangeEvent}\n        helperText={curProductValidationState.productBaseUnitPrice}\n        error={curProductValidationState.productBaseUnitPrice !== \"\"}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n      /><br />\n      {/** isDiscount **/}\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curProductState.isDiscount}\n            onChange={handleProductBaseDiscountChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Discount?\"\n      /><br />\n      <TextField\n        id=\"product-base-discount-price\"\n        label=\"Discount Price\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productPriceInput}`}\n        value={curProductState.productBaseDiscountPrice}\n        onChange={handleProductBaseDiscountPriceInputChangeEvent}\n        helperText={curProductValidationState.productBaseDiscountPrice}\n        error={curProductValidationState.productBaseDiscountPrice !== \"\"}\n        disabled={!curProductState.isDiscount}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n      /><br />\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"product-base-discount-start-date\"\n          label=\"Discount Start Date\"\n          format=\"MM/dd/yyyy\"\n          value={curProductState.productBaseDiscountStartDate}\n          onChange={handleProductBaseDiscountStartDateChange}\n          disabled={!curProductState.isDiscount}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n          className={classes.productDateInput}\n        />\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"product-base-discount-end-date\"\n          label=\"Discount End Date\"\n          format=\"MM/dd/yyyy\"\n          disabled={!curProductState.isDiscount}\n          value={curProductState.productBaseDiscountEndDate}\n          onChange={handleProductBaseDiscountEndDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n          className={classes.productDateInput}\n        />\n      </MuiPickersUtilsProvider>\n      {/** images **/}\n      <Typography variant=\"subtitle1\" component=\"h6\" align=\"left\" className={classes.subtitle}>\n        Images\n      </Typography>\n      <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\" className={classes.subtitle}>\n        You can upload up to 5 images and the first image is used as primary one.\n      </Typography>\n      <Box className={classes.errorMsg}>\n        {curProductValidationState.productImages}\n      </Box>\n      <ProductImagesForm\n        productImages={curProductState.productImages}\n        productImageFiles={curProductState.productImageFiles}\n        onUpdate={updateProductImage}\n        onRemove={removeProductImage}\n      />\n      {/** note **/}\n      <TextField\n        id=\"product-note\"\n        label=\"Product Note\"\n        multiline\n        rows={8}\n        className={`${classes.productNoteInput}`}\n        value={curProductState.note}\n        onChange={handleProductNoteInputChangeEvent}\n        helperText={curProductValidationState.note}\n        error={curProductValidationState.note !== \"\"}\n      />\n      {/** PUblish **/}\n      <Typography variant=\"subtitle1\" component=\"h6\" align=\"left\" className={classes.subtitle}>\n        Publish\n      </Typography>\n      <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\" className={classes.subtitle}>\n        To publish this product, you need to add at least one variant. You can add as many variants as you want at its management page. Click the link at 'Variants' column of your target product. \n      </Typography>\n      <Box className={classes.errorMsg}>\n        {curProductValidationState.isPublic}\n      </Box>\n      <FormControlLabel\n        control={\n          <Checkbox\n            icon={<FavoriteBorder />}\n            checkedIcon={<Favorite />}\n            checked={curProductState.isPublic}\n            onChange={handleProductPublicChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Ready to Publish?\"\n      /><br />\n    </form>\n  )\n});\n\nexport default AdminProductForm\n\n\n\n","import Dialog from '@material-ui/core/Dialog';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminProductForm from '../AdminProductForm';\nimport { ProductType } from 'domain/product/types';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\ndeclare type AdminProductFormDialogPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  curProduct: ProductType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    dialog: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    dialogPaper: {\n      width: 240,\n    },\n    dialogContentRoot: {\n      padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n  }),\n);\n\nconst AdminProductFormDialog: React.FunctionComponent<AdminProductFormDialogPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const toggleDialog = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  /**\n   * call child function from parent \n   *\n   * - ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  const childRef = React.useRef(null);\n\n  // render nav items\n  return (\n    <Dialog fullScreen={fullScreen} open={props.curFormOpen} onClose={toggleDialog(false)} aria-labelledby=\"admin-product-form-dialog\">\n      <DialogTitle id=\"admin-product-form-dialog-title\">Product Form</DialogTitle>\n      <DialogContent classes={{\n        root: classes.dialogContentRoot,\n      }}>\n        <AdminProductForm product={props.curProduct} ref={childRef}/>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={(e) => childRef.current.handleSaveClickEvent(e)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AdminProductFormDialog\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CategoryType } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCategoryWithCacheActionCreator } from 'reducers/slices/domain/category';\nimport { productQueryCategoryIdActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface CategoryFilterTabPanelPropsType {\n//  curCategoryId: string\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst CategoryFilterTabPanel: React.FunctionComponent<{}> = ({\n  \n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // categories option\n  const curCategoryList = useSelector(mSelector.makeCategorySelector())\n\n  // cur query category id \n  const curCategoryId = useSelector(mSelector.makeProductQueryCategoryIdSelector())\n\n  // fetch categories if not fetched before\n  React.useEffect(() => {\n    dispatch(fetchCategoryWithCacheActionCreator())\n  }, [])\n\n  // event handler change\n  const handleCategoryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(productQueryCategoryIdActions.update(e.currentTarget.value));\n  }\n\n  const renderCategoryRadioInputs: () => React.ReactNode = () => {\n    return curCategoryList.map((category: CategoryType) => {\n      return (\n        <FormControlLabel\n          value={category.categoryId.toString()}\n          control={<Radio />}\n          label={category.categoryName}\n          key={category.categoryId}\n        />\n      )\n    })\n  }\n\n  console.log(\"cur category id (query string)\");\n  console.log(curCategoryId);\n\n  /**\n   *\n   * bug?: https://stackoverflow.com/questions/58952742/how-can-i-control-a-radiogroup-from-material-ui\n   *\n   *  - 'value' should not be null/undefined at RadioGroup otherwise, it won't check even if you clicked.\n   *\n   * solution: data type inconsistency \n   *\n   *  when adding 'toString()' to 'value', it solved this problem.\n   *\n   *  - https://github.com/mui-org/material-ui/issues/16272\n   *\n   **/\n  return (\n    <Box p={3}>\n      <RadioGroup aria-label=\"product-category\" name=\"product-category-filter-radio\" value={curCategoryId.toString()} onChange={handleCategoryInputChangeEvent}>\n        <FormControlLabel value={\"0\"} control={<Radio />} label={\"All\"} key={\"0\"} />\n        {renderCategoryRadioInputs()}\n      </RadioGroup>\n    </Box>\n  )\n}\n\nexport default CategoryFilterTabPanel\n\n","import Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryIsDiscountActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface DiscountFilterTabPanelPropsType {\n//  curDiscountCheck: boolean\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst DiscountFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const curIsDiscount = useSelector(mSelector.makeProductQueryIsDiscountSelector())\n\n  const dispatch = useDispatch();\n  const handleDiscountCheckChangeEvent = (event: any, newValue: boolean) => {\n    dispatch(productQueryIsDiscountActions.update(newValue))\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Discount\n      </Typography>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curIsDiscount}\n            onChange={handleDiscountCheckChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Discount Only\"\n      />\n    </Box>\n  )\n}\n\nexport default DiscountFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryMaxPriceActions, productQueryMinPriceActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface PriceFilterTabPanelPropsType {\n//  curMinPrice: number\n//  curMaxPrice: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst marks = [\n  {\n    value: 0,\n    label: '$0',\n  },\n  {\n    value: 10,\n    label: '$10',\n  },\n  {\n    value: 20,\n    label: '$20',\n  },\n  {\n    value: 50,\n    label: '$50',\n  },\n  {\n    value: 100,\n    label: '$100',\n  },\n  {\n    value: 200,\n    label: '$200',\n  },\n  {\n    value: 300,\n    label: '$300',\n  },\n  {\n    value: 1000,\n    label: '$1,000',\n  },\n];\n\nconst PriceFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const curMinPrice = useSelector(mSelector.makeProductQueryMinPriceSelector());\n  const curMaxPrice = useSelector(mSelector.makeProductQueryMaxPriceSelector());\n\n  const [curPrices, setPrices] = React.useState<number[]>([curMinPrice, curMaxPrice]);\n\n  const handleMinChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(productQueryMinPriceActions.update(nextPrice));\n  }\n\n  const handleMaxChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(productQueryMaxPriceActions.update(nextPrice))\n  }\n\n\n  function valuetext(value: number) {\n    return `$${value}`;\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, newValue: number[]) => {\n\n    let nextMinPrice;\n    let nextMaxPrice;\n\n    /** \n     * if min value exceed the max value, switch it, and vice versa.\n     **/\n\n    if (newValue[0] <= newValue[1]) {\n      nextMinPrice = newValue[0];\n      nextMaxPrice = newValue[1];\n    } else {\n      nextMinPrice = newValue[1];\n      nextMaxPrice = newValue[0];\n    }\n\n    console.log(\"next min price: \" + nextMinPrice)\n    console.log(\"next max price: \" + nextMaxPrice)\n\n    dispatch(productQueryMinPriceActions.update(nextMinPrice));\n    dispatch(productQueryMaxPriceActions.update(nextMaxPrice))\n\n    setPrices([nextMinPrice, nextMaxPrice])\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Price Range\n      </Typography>\n      <Slider\n        step={10}\n        value={curPrices}\n        onChange={handleChange}\n        marks={marks}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        getAriaValueText={valuetext}\n      />\n    </Box>\n  )\n}\n\nexport default PriceFilterTabPanel\n\n\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryStartDateActions, productQueryEndDateActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst ReleaseDateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeProductQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeProductQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(productQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(productQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default ReleaseDateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport Rating from '@material-ui/lab/Rating/Rating';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryReviewPointActions } from 'reducers/slices/domain/product';\nimport Button from '@material-ui/core/Button';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReviewFilterTabPanelPropsType {\n//  curReviewPoint: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst ReviewFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curReviewPoint = useSelector(mSelector.makeProductQueryReviewPointSelector())\n\n  const handleReviewPointChangeEvent = (event: any, newValue: number) => {\n    dispatch(productQueryReviewPointActions.update(newValue))\n  };\n\n  const handleReset: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(productQueryReviewPointActions.clear())\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n        Review Point\n      </Typography>\n      <Box className={classes.contentBox}>\n        <Rating\n          name=\"product-filter-review-point\"\n          onChange={handleReviewPointChangeEvent}\n          precision={0.5}\n          value={curReviewPoint}\n        />\n        <Button onClick={handleReset}>\n          Reset\n      </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ReviewFilterTabPanel\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ProductSortEnum } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQuerySortActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst productSortList = [\n  {\n    value: ProductSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: ProductSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n  {\n    value: ProductSortEnum.ALPHABETIC_ASC,\n    label: \"Alphabetical Asc\",\n  },\n  {\n    value: ProductSortEnum.ALPHABETIC_DESC,\n    label: \"Alphabetical Desc\",\n  },\n  {\n    value: ProductSortEnum.PRICE_ASC,\n    label: \"Cheap\",\n  },\n  {\n    value: ProductSortEnum.PRICE_DESC,\n    label: \"Expensive\",\n  },\n]\n\n\nconst SortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeProductQuerySortSelector())\n\n  const handleProductSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(productQuerySortActions.update(e.currentTarget.value as ProductSortEnum))\n  }\n\n  const renderProductSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderProductSortRadioInputs updated\");\n    return productSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"product-sort\" name=\"product-sort\" value={curSort} onChange={handleProductSortInputChangeEvent}>\n          {renderProductSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default SortTabPanel\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport CategoryFilterTabPanel from './TabPanel/CategoryFilterTabPanel';\nimport DiscountFilterTabPanel from './TabPanel/DiscountFilterTabPanel';\nimport PriceFilterTabPanel from './TabPanel/PriceFilterTabPanel';\nimport ReleaseDateFilterTabPanel from './TabPanel/ReleaseDateFilterTabPanel';\nimport ReviewFilterTabPanel from './TabPanel/ReviewFilterTabPanel';\nimport SortTabPanel from './TabPanel/SortTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabBox: {\n      // for search controller which is position: absolute\n      position: \"relative\",\n    },\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n      zIndex: 1,\n      boxShadow: theme.shadows[8],\n    },\n    tabRoot: {\n      minWidth: 50,\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst AdminProductSearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeProductQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeProductQuerySelector());\n\n  return (\n    <Box component=\"div\" className={classes.tabBox}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          classes={{\n            root: classes.tabRoot,\n          }}\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" classes={{ root: classes.tabRoot }} {...a11yProps(0)} />\n          <Tab label=\"Category\" classes={{ root: classes.tabRoot }} {...a11yProps(1)} />\n          <Tab label=\"Price\" classes={{ root: classes.tabRoot }} {...a11yProps(2)} />\n          <Tab label=\"Review\" classes={{ root: classes.tabRoot }} {...a11yProps(3)} />\n          <Tab label=\"Discount\" classes={{ root: classes.tabRoot }} {...a11yProps(4)} />\n          <Tab label=\"Release Date\" classes={{ root: classes.tabRoot }} {...a11yProps(5)} />\n          <Tab label=\"Sort\" classes={{ root: classes.tabRoot }} {...a11yProps(6)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <CategoryFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <PriceFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={3} \n        className={classes.tabPanel}\n        render={() => <ReviewFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={4} \n        className={classes.tabPanel}\n        render={() => <DiscountFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={5} \n        className={classes.tabPanel}\n        render={() => <ReleaseDateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={6} \n        className={classes.tabPanel}\n        render={() => <SortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default AdminProductSearchController\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridPageChangeParams, GridRowsProp } from '@material-ui/data-grid';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { ProductType } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { deleteSingleProductActionCreator, fetchProductActionCreator, productPaginationPageActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminProductFormDialog from '../AdminProductFormDialog';\nimport AdminProductSearchController from '../ADminProductSearchController';\nimport { FetchStatusEnum } from 'src/app';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ndeclare type AdminProductGridViewPropsType = {\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(4),\n    },\n    loadingBox: {\n      height: \"80vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: ProductType[]) => GridRowsProp = (domains) => {\n  return domains.map((domain: ProductType) => {\n    return {\n      id: domain.productId,\n      name: domain.productName,\n      path: domain.productPath,\n      category: domain.category.categoryName,\n      unitPrice: domain.productBaseUnitPrice,\n      discount: domain.isDiscount,\n      releaseDate: domain.releaseDate,\n      publish: domain.isPublic,\n      variants: {\n        count: domain.variants.length,\n        productId: domain.productId,\n      },\n      actions: domain.productId,\n    }\n  });\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>, onDelete: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit, onDelete) => {\n  return [\n    { field: 'name', headerName: 'Name', width: 150 },\n    { field: 'unitPrice', headerName: 'Unit Price', width: 150 },\n    { field: 'path', headerName: 'Path', width: 150 },\n    { field: 'category', headerName: 'Category', width: 150 },\n    { field: 'discount', headerName: 'Discount', width: 150 },\n    { field: 'releaseDate', headerName: 'Release Date', width: 150 },\n    { field: 'publish', headerName: 'Publish', width: 150 },\n    {\n      field: 'variants',\n      headerName: 'Variants',\n      width: 150,\n      renderCell: (params: GridCellParams) => {\n        const count = (params.value as { count: number, productId: string }).count\n        const productId = (params.value as { count: number, productId: string }).productId\n        return (\n          <React.Fragment>\n            <Link component={RRLink} to={`/admin/product-variants?productId=${productId}`}>\n              {count}\n            </Link>\n          </React.Fragment>\n        )\n      },\n    },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-product-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n          <IconButton data-product-id={params.value} onClick={onDelete}>\n            <RemoveCircleIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ]\n}\n\n/**\n * admin product management component\n *\n **/\nconst AdminProductGridView: React.FunctionComponent<AdminProductGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  const curProductList = useSelector(mSelector.makeProductWithoutCacheSelector())\n\n  // cur selected product item\n  const [curProduct, setProduct] = React.useState<ProductType>(null);\n\n  const pagination = useSelector(mSelector.makeProductPaginationSelector())\n\n  const curQueryString = useSelector(mSelector.makeProductQuerySelector())\n\n  // fetch product\n  React.useEffect(() => {\n    dispatch(fetchProductActionCreator())\n  }, [\n    JSON.stringify(curQueryString),\n    pagination.page\n  ])\n\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false);\n\n  const handleNewFormToggleBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n    setFormOpen(!curFormOpen)\n  }\n\n  // deletion dialog stuff\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false);\n\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    // request\n    dispatch(\n      deleteSingleProductActionCreator({ productId: curProduct.productId }) \n    )\n  }\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const productId = e.currentTarget.getAttribute(\"data-product-id\")\n\n    const targetProduct = curProductList.find((product: ProductType) => product.productId == productId)\n\n    setProduct(targetProduct);\n\n    setFormOpen(true);\n\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setDeleteDialogOpen(true);\n\n    const productId = e.currentTarget.getAttribute(\"data-product-id\")\n\n    const targetProduct = curProductList.find((product: ProductType) => product.productId == productId)\n\n    setProduct(targetProduct);\n  }\n\n  const handlePageChange = (param: GridPageChangeParams) => {\n    // need to decrement since we incremented when display\n    const nextPage = param.page;\n\n    dispatch(productPaginationPageActions.update(nextPage))\n  }\n\n  // fetch result\n  // fetch order fetching result\n  const curFetchProductStatus = useSelector(mSelector.makeFetchProductFetchStatusSelector())\n  if (curFetchProductStatus === FetchStatusEnum.FETCHING) {\n    return (\n      <Box className={classes.loadingBox}>\n        <CircularProgress />\n      </Box>\n    )\n  } else if (curFetchProductStatus === FetchStatusEnum.FAILED) {\n    return (\n      <Box className={classes.loadingBox}>\n        <Typography variant=\"body1\" component=\"h2\" >\n          {\"failed to fetch data... please try again...\"}\n        </Typography>\n      </Box>\n    )\n  }\n\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Product List\"\n        action={\n          <IconButton aria-label=\"add\" onClick={handleNewFormToggleBtnClickEvent}>\n            <AddCircleIcon />\n          </IconButton>\n        }\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <AdminProductSearchController />        \n        <DataGrid\n          rows={generateRows(curProductList)}\n          columns={generateColumns(handleEditClick, handleDeleteClick)}\n          page={pagination.page} // don't forget to increment when display\n          pageSize={pagination.limit}\n          rowCount={pagination.totalElements}\n          onPageChange={handlePageChange}\n          // not gonna use pagination of this DataGrid\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      {/** update/create product (without its variants) **/}\n      <AdminProductFormDialog\n        curFormOpen={curFormOpen}\n        setFormOpen={setFormOpen}\n        curProduct={curProduct}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"product-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"product-deletion-dialog\">Product Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this product permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            Product Name: <b>{curProduct && curProduct.productName}</b>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  )\n}\n\nexport default AdminProductGridView\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport AdminProductGridView from './AdminProductGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst AdminProduct: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminProductGridView />\n    </Box>\n  )\n}\n\nexport default AdminProduct\n","import DateFnsUtils from '@date-io/date-fns';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { defaultProductVariantData, defaultProductVariantValidationData, ProductVariantDataType, ProductVariantSizeType, ProductVariantType, ProductVariantValidationDataType, productVariantSizeObj } from 'domain/product/types';\nimport { useValidation } from 'hooks/validation';\nimport { productVariantSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { ChromePicker, ColorResult } from 'react-color';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { postProductVariantActionCreator, putProductVariantActionCreator } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\ninterface AdminProductVariantFormPropsType {\n  productVariant: ProductVariantType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n    },\n    subtitle: {\n      margin: theme.spacing(1, 0),\n      fontWeight: theme.typography.fontWeightBold\n    },\n    noteMsg: {\n      color: theme.palette.secondary.main,\n      fontSize: theme.typography.caption.fontSize,\n    },\n    smallCheckBox: {\n      verticalAlign: \"bottom\",\n      marginLeft: 0,\n    },\n    txtFieldBase: {\n      width: \"80%\",\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    productNameInput: {\n      minWidth: 300,\n      maxWidth: 600,\n    },\n    productDescriptionInput: {\n      minWidth: 300,\n    },\n    productPathInput: {\n      maxWidth: 600,\n      minWidth: 300,\n    },\n    productPriceInput: {\n      maxWidth: 200,\n      minWidth: 200,\n    },\n    productSizeInput: {\n      maxWidth: 200,\n      minWidth: 200,\n      marginRight: theme.spacing(3),\n    },\n    productCategoryInput: {\n      maxWidth: 200,\n      minWidth: 200,\n    },\n    productDateInput: {\n    },\n    actionBox: {\n    },\n  }),\n);\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n/**\n * admin product variant management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminProductVariantForm = React.forwardRef<any, AdminProductVariantFormPropsType>((props, ref) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // query params\n  const query = useQuery();\n  const targetProductId = query.get(\"productId\")\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const dispatch = useDispatch()\n\n  // update/create logic for product\n  //  - true: create\n  //  - false: update\n  // if props.product exists, it updates, otherwise, new\n  const [isNew, setNew] = React.useState<boolean>(props.productVariant ? false : true);\n\n  // temp user account state\n  const [curProductVariantState, setProductVariantState] = React.useState<ProductVariantDataType>(props.productVariant ? props.productVariant : defaultProductVariantData);\n\n  // validation logic (should move to hooks)\n  const [curProductVariantValidationState, setProductVariantValidationState] = React.useState<ProductVariantValidationDataType>(defaultProductVariantValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curProductVariantState,\n    curValidationDomain: curProductVariantValidationState,\n    schema: productVariantSchema,\n    setValidationDomain: setProductVariantValidationState,\n    defaultValidationDomain: defaultProductVariantValidationData,\n  })\n\n  // unit price disable stuff\n  const [curUnitPriceDisable, setUnitPriceDisable] = React.useState<boolean>(false);\n\n  const handleUnitPriceDisable: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductVariantUnitPriceDisable: boolean = e.currentTarget.checked\n    setUnitPriceDisable(nextProductVariantUnitPriceDisable)\n    if (nextProductVariantUnitPriceDisable) {\n      setProductVariantState((prev: ProductVariantDataType) => ({\n        ...prev,\n        variantUnitPrice: null,\n      }))\n    } else {\n      setProductVariantState((prev: ProductVariantDataType) => ({\n        ...prev,\n        variantUnitPrice: 1,\n      }))\n    }\n  }\n\n  // test product variant size list\n  // #TODO: replace with real one when you are ready\n  const productVariantSizeList = Object.values(productVariantSizeObj)\n\n  // event handlers\n  const handleProductVariantUnitPriceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantUnitPrice = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantUnitPrice\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantUnitPrice: parseInt(nextVariantUnitPrice)\n    }));\n  }\n\n  // event handlers\n  const handleProductVariantSizeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    /**\n     * DON'T user 'e.currentTarget' for select\n     **/\n    const nextVariantSize = productVariantSizeList.find((size: ProductVariantSizeType) => e.target.value === size.productSizeId)\n    // must not be null\n    updateValidationAt(\"productSize\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      productSize: nextVariantSize\n    }));\n  }\n\n  const handleProductVariantColorInputChangeEvent: (color: ColorResult, event: React.ChangeEvent<HTMLInputElement>) => void = (color, event) => {\n    updateValidationAt(\"variantColor\", color.hex);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantColor: color.hex,\n    }));\n  }\n\n  // event handlers\n  const handleProductVariantStockInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantStock = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantStock\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantStock: parseInt(nextVariantStock)\n    }));\n  }\n\n  const handleProductVariantWeightInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantWeight = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantWeight\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantWeight: parseInt(nextVariantWeight)\n    }));\n  }\n\n  const handleProductVariantLengthInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantLength = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantLength\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantLength: parseInt(nextVariantLength)\n    }));\n  }\n\n  const handleProductVariantWidthInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantWidth = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantWidth\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantWidth: parseInt(nextVariantWidth)\n    }));\n  }\n\n  const handleProductVariantHeightInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextVariantHeight = e.currentTarget.value\n    // must not be null\n    updateValidationAt(\"variantHeight\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantHeight: parseInt(nextVariantHeight)\n    }));\n  }\n\n  const handleProductVariantDiscountChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductVariantDiscount: boolean = e.currentTarget.checked\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      isDiscount: nextProductVariantDiscount,\n    }));\n  }\n\n  const handleProductVariantDiscountPriceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProductVariantDiscountPrice = e.currentTarget.value\n    //updateValidationAt(\"productBaseDiscountPrice\", e.currentTarget.value);\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantDiscountPrice: parseFloat(nextProductVariantDiscountPrice),\n    }));\n  }\n\n  const handleProductVariantDiscountStartDateChange = (date: Date | null) => {\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantDiscountStartDate: date,\n    }));\n  };\n\n  const handleProductVariantDiscountEndDateChange = (date: Date | null) => {\n    setProductVariantState((prev: ProductVariantDataType) => ({\n      ...prev,\n      variantDiscountEndDate: date,\n    }));\n  };\n\n  /**\n   * call child function from parent \n   *\n   * ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  React.useImperativeHandle(ref, () => ({\n\n    // event handler to submit\n    handleSaveClickEvent: (e: React.MouseEvent<HTMLButtonElement>) => {\n\n      const isValid: boolean = isValidSync(curProductVariantState)\n\n      console.log(isValid);\n\n      if (isValid) {\n        // pass \n        console.log(\"passed\")\n\n        if (isNew) {\n          console.log(\"new product creation\")\n          // request\n          dispatch(\n            postProductVariantActionCreator({\n              ...curProductVariantState,\n              productId: targetProductId,\n            }) \n          )\n\n        } else {\n          console.log(\"new product creation\")\n          // request\n          dispatch(\n            putProductVariantActionCreator({\n              ...curProductVariantState,\n              productId: targetProductId,\n            }) \n          )\n        }\n      } else {\n        console.log(\"failed\")\n        updateAllValidation()\n      }\n    }\n  }))\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"variant-unit-price\"\n        label=\"Unit Price\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productPriceInput}`}\n        value={curProductVariantState.variantUnitPrice}\n        onChange={handleProductVariantUnitPriceInputChangeEvent}\n        helperText={curProductVariantValidationState.variantUnitPrice}\n        error={curProductVariantValidationState.variantUnitPrice !== \"\"}\n        disabled={curUnitPriceDisable}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n      />\n      <FormControlLabel\n        className={classes.smallCheckBox}\n        control={\n          <Checkbox\n            checked={curUnitPriceDisable}\n            onChange={handleUnitPriceDisable}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label={\n          <Typography variant=\"subtitle2\" component=\"span\" color=\"textSecondary\">\n            {\"Same as Product Base?\"}\n          </Typography>\n        }\n      /><br />\n      <FormLabel>\n        {\"Variant Color\"}\n      </FormLabel>\n      <ChromePicker\n        color={curProductVariantState.variantColor}\n        onChangeComplete={handleProductVariantColorInputChangeEvent}\n      />\n      <TextField\n        id=\"product-variant-size\"\n        label=\"Size\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        select\n        value={curProductVariantState.productSize ? curProductVariantState.productSize.productSizeId : \"1\"}\n        onChange={handleProductVariantSizeInputChangeEvent}\n        helperText={curProductVariantValidationState.productSize}\n        error={curProductVariantValidationState.productSize !== \"\"}\n      >\n        {productVariantSizeList.map((size: ProductVariantSizeType) => (\n          <MenuItem key={size.productSizeId} value={size.productSizeId}>\n            {size.productSizeName}\n          </MenuItem>\n        ))}\n      </TextField><br />\n      <TextField\n        id=\"product-variant-stock\"\n        label=\"Stock\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        value={curProductVariantState.variantStock}\n        onChange={handleProductVariantStockInputChangeEvent}\n        helperText={curProductVariantValidationState.variantStock}\n        error={curProductVariantValidationState.variantStock !== \"\"}\n      /><br />\n      <TextField\n        id=\"product-variant-weight\"\n        label=\"Weight\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        value={curProductVariantState.variantWeight}\n        onChange={handleProductVariantWeightInputChangeEvent}\n        helperText={curProductVariantValidationState.variantWeight}\n        error={curProductVariantValidationState.variantWeight !== \"\"}\n        InputProps={{\n          endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\n        }}\n      />\n      <TextField\n        id=\"product-variant-length\"\n        label=\"Length\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        value={curProductVariantState.variantLength}\n        onChange={handleProductVariantLengthInputChangeEvent}\n        helperText={curProductVariantValidationState.variantLength}\n        error={curProductVariantValidationState.variantLength !== \"\"}\n        InputProps={{\n          endAdornment: <InputAdornment position=\"end\">Cm</InputAdornment>,\n        }}\n      />\n      <TextField\n        id=\"product-variant-width\"\n        label=\"Width\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        value={curProductVariantState.variantWidth}\n        onChange={handleProductVariantWidthInputChangeEvent}\n        helperText={curProductVariantValidationState.variantWidth}\n        error={curProductVariantValidationState.variantWidth !== \"\"}\n        InputProps={{\n          endAdornment: <InputAdornment position=\"end\">Cm</InputAdornment>,\n        }}\n      />\n      <TextField\n        id=\"product-variant-height\"\n        label=\"Height\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productSizeInput}`}\n        value={curProductVariantState.variantHeight}\n        onChange={handleProductVariantHeightInputChangeEvent}\n        helperText={curProductVariantValidationState.variantHeight}\n        error={curProductVariantValidationState.variantHeight !== \"\"}\n        InputProps={{\n          endAdornment: <InputAdornment position=\"end\">Cm</InputAdornment>,\n        }}\n      /><br />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curProductVariantState.isDiscount}\n            onChange={handleProductVariantDiscountChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Variant Discount?\"\n      /><br />\n      <TextField\n        id=\"product-variant-discount-price\"\n        label=\"Discount Price\"\n        type=\"number\"\n        className={`${classes.txtFieldBase} ${classes.productPriceInput}`}\n        value={curProductVariantState.variantDiscountPrice}\n        onChange={handleProductVariantDiscountPriceInputChangeEvent}\n        helperText={curProductVariantValidationState.variantDiscountPrice}\n        error={curProductVariantValidationState.variantDiscountPrice !== \"\"}\n        disabled={!curProductVariantState.isDiscount}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n        }}\n      /><br />\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"product-variant-discount-start-date\"\n          label=\"Discount Start Date\"\n          format=\"MM/dd/yyyy\"\n          value={curProductVariantState.variantDiscountStartDate}\n          onChange={handleProductVariantDiscountStartDateChange}\n          disabled={!curProductVariantState.isDiscount}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n          className={classes.productDateInput}\n        />\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"product-variant-discount-end-date\"\n          label=\"Discount End Date\"\n          format=\"MM/dd/yyyy\"\n          value={curProductVariantState.variantDiscountEndDate}\n          onChange={handleProductVariantDiscountEndDateChange}\n          disabled={!curProductVariantState.isDiscount}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n          className={classes.productDateInput}\n        />\n      </MuiPickersUtilsProvider>\n    </form>\n  )\n})\n\nexport default AdminProductVariantForm\n","import Dialog from '@material-ui/core/Dialog';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminProductVariantForm from '../AdminProductVariantForm';\nimport { ProductVariantType } from 'domain/product/types';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\ndeclare type AdminProductVariantFormDialogPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  curProductVariant: ProductVariantType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    dialog: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    dialogPaper: {\n      width: 240,\n    },\n    dialogContentRoot: {\n      padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n  }),\n);\n\nconst AdminProductVariantFormDialog: React.FunctionComponent<AdminProductVariantFormDialogPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const toggleDialog = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  /**\n   * call child function from parent \n   *\n   * - ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  const childRef = React.useRef(null);\n\n  // render nav items\n  return (\n    <Dialog fullScreen={fullScreen} open={props.curFormOpen} onClose={toggleDialog(false)} aria-labelledby=\"admin-productVariant-form-dialog\">\n      <DialogTitle id=\"admin-productVariant-form-dialog-title\">Product Variant Form</DialogTitle>\n      <DialogContent classes={{\n        root: classes.dialogContentRoot,\n      }}>\n        <AdminProductVariantForm productVariant={props.curProductVariant} ref={childRef}/>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={(e) => childRef.current.handleSaveClickEvent(e)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AdminProductVariantFormDialog\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridRowsProp } from '@material-ui/data-grid';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport ColorCell from 'components/common/GridData/ColorCell';\nimport SizeCell from 'components/common/GridData/SizeCell';\nimport { ProductVariantType, ProductType } from 'domain/product/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { deleteSingleProductVariantActionCreator, fetchSingleProductActionCreator } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminProductVariantFormDialog from '../AdminProductVariantFormDialog';\n\ndeclare type AdminProductVariantGridViewPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: ProductVariantType[], product: ProductType) => GridRowsProp = (domains, product) => {\n\n  return domains.map((domain: ProductVariantType) => {\n    return {\n      id: domain.variantId,\n      size: domain.productSize.productSizeName,\n      color: domain.variantColor,\n      unitPrice: domain.variantUnitPrice ? domain.variantUnitPrice : product.productBaseUnitPrice,\n      stock: domain.variantStock,\n      discount: domain.isDiscount,\n      soldCount: domain.soldCount,\n      weight: domain.variantWeight,\n      actions: domain.variantId,\n    }\n  });\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>, onDelete: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit, onDelete) => {\n  return [\n    { field: 'id', headerName: 'ID', width: 80 },\n    {\n      field: 'size',\n      headerName: 'Size',\n      width: 100,\n      renderCell: (params: GridCellParams) => (<SizeCell value={params.value as string} />)\n    },\n    {\n      field: 'color',\n      headerName: 'Color',\n      width: 100,\n      renderCell: (params: GridCellParams) => (<ColorCell value={params.value as string} />)\n    },\n    { field: 'unitPrice', headerName: 'Unit Price', width: 100 },\n    { field: 'stock', headerName: 'Stock #', width: 100 },\n    { field: 'discount', headerName: 'Discount', width: 100 },\n    { field: 'soldCount', headerName: 'Sold #', width: 100 },\n    { field: 'weight', headerName: 'Weight', width: 100 },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 100,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-variant-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n          <IconButton data-variant-id={params.value} onClick={onDelete}>\n            <RemoveCircleIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ]\n}\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n/**\n * admin product variant management component\n *\n **/\nconst AdminProductVariantGridView: React.FunctionComponent<AdminProductVariantGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // query params\n  const query = useQuery();\n  const targetProductId = query.get(\"productId\")\n\n  const dispatch = useDispatch()\n\n  // cur selected product item\n  const curProduct = useSelector(mSelector.makeProductVariantByProductIdSelector(targetProductId));\n\n  // if the product is not in redux store, we need to fetch from the backend.\n  React.useEffect(() => {\n    if (!curProduct) {\n      dispatch(\n        fetchSingleProductActionCreator({ productId: targetProductId })\n      )\n    }\n  }, [\n\n    ])\n\n\n  const [curProductVariant, setProductVariant] = React.useState<ProductVariantType>(null);\n\n  /**\n   * TODO: useEffect to fetch the target product in the case where the product does not exist in redux store.\n   *\n   *  - e.g., if visit this page without admin product page, it causes 500 errors since we can populate the products by visiting the admin product page first.\n   *\n   **/\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleNewProductVariantFormToggleBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n    props.setFormOpen(!props.curFormOpen)\n  }\n\n  // deletion dialog stuff\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false);\n\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    // request\n    dispatch(\n      deleteSingleProductVariantActionCreator({\n        productId: targetProductId,\n        variantId: curProductVariant.variantId,\n      }) \n    )\n  }\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const variantId = e.currentTarget.getAttribute(\"data-variant-id\")\n\n    const targetProduct = curProduct.variants.find((productVariant: ProductVariantType) => productVariant.variantId == variantId)\n\n    setProductVariant(targetProduct);\n\n    props.setFormOpen(true);\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const variantId = e.currentTarget.getAttribute(\"data-variant-id\")\n\n    const targetProduct = curProduct.variants.find((productVariant: ProductVariantType) => productVariant.variantId == variantId)\n\n    setDeleteDialogOpen(true);\n\n    setProductVariant(targetProduct);\n  }\n\n  if (!curProduct) {\n    return (<p>Fetching Data...</p>)\n  }\n\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Product Variant List\"\n        action={\n          <IconButton aria-label=\"add\" onClick={handleNewProductVariantFormToggleBtnClickEvent}>\n            <AddCircleIcon />\n          </IconButton>\n        }\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <DataGrid\n          autoHeight\n          rows={generateRows(curProduct.variants, curProduct)}\n          columns={generateColumns(handleEditClick, handleDeleteClick)}\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      {/** create/update varaints **/}\n      <AdminProductVariantFormDialog\n        curFormOpen={props.curFormOpen}\n        setFormOpen={props.setFormOpen}\n        curProductVariant={curProductVariant}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"product-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"product-deletion-dialog\">Product Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this product varaint permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            Product Variant Id: <b>{curProductVariant && curProductVariant.variantId}</b>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  )\n}\n\nexport default AdminProductVariantGridView\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminProductVariantGridView from './AdminProductVariantGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n **/\nconst AdminProductVariant: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false) \n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminProductVariantGridView \n        curFormOpen={curFormOpen} \n        setFormOpen={setFormOpen} \n      />\n      {/** <AdminProductVariantNewCard /> **/}\n    </Box>\n  )\n}\n\nexport default AdminProductVariant\n\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport merge from \"lodash/merge\";\nimport { ReviewType, ReviewSortEnum, ReviewCriteria } from \"domain/review/type\";\nimport remove from 'lodash/remove';\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request with cache\nexport const fetchReviewWithCacheActionCreator = createAction(\"saga/domain/review/fetch/cache\")\nexport const fetchReviewWithCacheActionTypeName = fetchReviewWithCacheActionCreator().type\n\n// for GET request\nexport const fetchReviewActionCreator = createAction(\"saga/domain/review/fetch\")\nexport const fetchReviewActionTypeName = fetchReviewActionCreator().type\n\n// for POST (add a new review item) request\nexport declare type PostReviewActionType = ReviewCriteria\nexport const postReviewActionCreator = createAction<PostReviewActionType>(\"saga/domain/review/post\")\nexport const postReviewActionTypeName = postReviewActionCreator().type\n\n// for PUT (replace) request\nexport declare type PutReviewActionType = ReviewCriteria\nexport const putReviewActionCreator = createAction<PutReviewActionType>(\"saga/domain/review/put\")\nexport const putReviewActionTypeName = putReviewActionCreator().type\n\n// for DELETE (delete single review item) request\nexport declare type DeleteSingleReviewActionType = { reviewId: string }\nexport const deleteSingleReviewActionCreator = createAction<DeleteSingleReviewActionType>(\"saga/domain/review/deleteSingle\")\nexport const deleteSingleReviewActionTypeName = deleteSingleReviewActionCreator().type\n\n// for DELETE (delete all of review items) request\nexport const deleteReviewActionCreator = createAction<ReviewType>(\"saga/domain/review/delete\")\nexport const deleteReviewActionTypeName = deleteReviewActionCreator().type\n\n/**\n * domain.reviews state Slice (no side effect)\n *\n **/\n// action type             \nexport type ReviewActionType = PayloadAction<ReviewType[]> \n\nexport const reviewSlice = createSlice({ \n  name: \"domain/reviews\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    /**\n     * be careful that duplicate might exist.\n     *\n     * - not unique.\n     *\n     **/\n    concat: (state: ReviewType[], action: ReviewActionType) => {\n      return state.concat(action.payload); \n    },\n\n    // use when update existing one (only apply for array: don't use for object)\n    updateOne: (state: ReviewType[], action: PayloadAction<ReviewType>) => {\n      return state.map((domain: ReviewType) => {\n        if (domain.reviewId === action.payload.reviewId) {\n          return action.payload\n        }\n        return domain\n      })\n    },\n\n    append: (state: ReviewType[], action: PayloadAction<ReviewType>) => merge(state, [action.payload]),\n\n    // use when you want to replace the whole array\n    update: (state: ReviewType[], action: ReviewActionType) => {\n      return action.payload;\n    },\n    // use when you want to remove a single entity\n    delete: (state: ReviewType[], action: PayloadAction<{ reviewId: string }>) => {\n      /**\n       * mutable.\n       * original one: the rest of elements\n       * return one: the removed elements\n       **/\n      remove(state, (review: ReviewType) => review.reviewId == action.payload.reviewId)\n      return state\n    },\n\n    clear: (state: ReviewType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewSliceReducer = reviewSlice.reducer\nexport const reviewActions = reviewSlice.actions\n\n/**\n *\n * domain.reviews.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewPaginationPageActionType = PayloadAction<number> \n\nexport const reviewPaginationPageSlice = createSlice({ \n  name: \"domain/reviews/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewPaginationPageSliceReducer = reviewPaginationPageSlice.reducer\nexport const reviewPaginationPageActions = reviewPaginationPageSlice.actions\n\n\n/**\n *\n * domain.reviews.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewPaginationLimitActionType = PayloadAction<number> \n\nexport const reviewPaginationLimitSlice = createSlice({ \n  name: \"domain/reviews/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewPaginationLimitSliceReducer = reviewPaginationLimitSlice.reducer\nexport const reviewPaginationLimitActions = reviewPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.reviews.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const reviewPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/reviews/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewPaginationTotalPagesSliceReducer = reviewPaginationTotalPagesSlice.reducer\nexport const reviewPaginationTotalPagesActions = reviewPaginationTotalPagesSlice.actions\n\n/**\n *\n * domain.reviews.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const reviewPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/reviews/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: ReviewPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 0,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewPaginationTotalElementsSliceReducer = reviewPaginationTotalElementsSlice.reducer\nexport const reviewPaginationTotalElementsActions = reviewPaginationTotalElementsSlice.actions\n\n\n/**\n *\n * domain.reviews.query.searchQuery state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQuerySearchQueryActionType = PayloadAction<string> \n\nexport const reviewQuerySearchQuerySlice = createSlice({ \n  name: \"domain/reviews/query/searchQuery\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQuerySearchQueryActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQuerySearchQuerySliceReducer = reviewQuerySearchQuerySlice.reducer\nexport const reviewQuerySearchQueryActions = reviewQuerySearchQuerySlice.actions\n\n\n\n/**\n *\n * domain.reviews.query.reviewPoint state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryReviewPointActionType = PayloadAction<number> \n\nexport const reviewQueryReviewPointSlice = createSlice({ \n  name: \"domain/reviews/query/reviewPoint\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryReviewPointActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryReviewPointSliceReducer = reviewQueryReviewPointSlice.reducer\nexport const reviewQueryReviewPointActions = reviewQueryReviewPointSlice.actions\n\n\n/**\n *\n * domain.reviews.query.isVerified state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryIsVerifiedActionType = PayloadAction<boolean> \n\nexport const reviewQueryIsVerifiedSlice = createSlice({ \n  name: \"domain/reviews/query/isVerified\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryIsVerifiedActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryIsVerifiedSliceReducer = reviewQueryIsVerifiedSlice.reducer\nexport const reviewQueryIsVerifiedActions = reviewQueryIsVerifiedSlice.actions\n\n\n/**\n *\n * domain.reviews.query.startDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryStartDateActionType = PayloadAction<Date> \n\nexport const reviewQueryStartDateSlice = createSlice({ \n  name: \"domain/reviews/query/startDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryStartDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryStartDateSliceReducer = reviewQueryStartDateSlice.reducer\nexport const reviewQueryStartDateActions = reviewQueryStartDateSlice.actions\n\n\n/**\n *\n * domain.reviews.query.endDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryEndDateActionType = PayloadAction<Date> \n\nexport const reviewQueryEndDateSlice = createSlice({ \n  name: \"domain/reviews/query/endDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryEndDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryEndDateSliceReducer = reviewQueryEndDateSlice.reducer\nexport const reviewQueryEndDateActions = reviewQueryEndDateSlice.actions\n\n\n/**\n *\n * domain.reviews.query.productId state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryProductIdActionType = PayloadAction<string> \n\nexport const reviewQueryProductIdSlice = createSlice({ \n  name: \"domain/reviews/query/productId\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryProductIdActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryProductIdSliceReducer = reviewQueryProductIdSlice.reducer\nexport const reviewQueryProductIdActions = reviewQueryProductIdSlice.actions\n\n\n\n/**\n *\n * domain.reviews.query.userId state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQueryUserIdActionType = PayloadAction<string> \n\nexport const reviewQueryUserIdSlice = createSlice({ \n  name: \"domain/reviews/query/userId\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQueryUserIdActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQueryUserIdSliceReducer = reviewQueryUserIdSlice.reducer\nexport const reviewQueryUserIdActions = reviewQueryUserIdSlice.actions\n\n\n\n\n/**\n *\n * domain.reviews.query.sort state Slice (no side effects)\n *\n **/\n// action type             \nexport type ReviewQuerySortActionType = PayloadAction<ReviewSortEnum> \n\nexport const reviewQuerySortSlice = createSlice({ \n  name: \"domain/reviews/query/sort\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: ReviewQuerySortActionType) => action.payload,\n    clear: (state: string) => ReviewSortEnum.DATE_DESC,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const reviewQuerySortSliceReducer = reviewQuerySortSlice.reducer\nexport const reviewQuerySortActions = reviewQuerySortSlice.actions\n","/**\n * domain behaviors about review\n *\n **/\nexport const getStatus: (isVerify: boolean) => string = (isVerify) => {\n  return isVerify ? \"approved\" : \"pending\"\n}\n","import FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Rating from '@material-ui/lab/Rating';\nimport ProductHorizontalCard from 'components/common/ProductCard/ProductHorizontalCard';\nimport UserCard from 'components/common/UserCard';\nimport { defaultReviewValidationData, ReviewDataType, ReviewType, ReviewValidationDataType } from 'domain/review/type';\nimport { useValidation } from 'hooks/validation';\nimport { reviewSchema } from 'hooks/validation/rules';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { putReviewActionCreator } from 'reducers/slices/domain/review';\n\ninterface AdminReviewFormPropsType {\n  review: ReviewType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    orderDetailBox: {\n\n    },\n    title: {\n      textAlign: \"center\",\n      fontWeight: theme.typography.fontWeightBold\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    txtFieldBase: {\n      width: \"80%\",\n      maxWidth: 500,\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    actionBox: {\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst AdminReviewForm = React.forwardRef<any, AdminReviewFormPropsType>((props, ref) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  // temp user account state\n  const [curReviewState, setReviewState] = React.useState<ReviewDataType>(props.review);\n\n  // validation logic (should move to hooks)\n  const [curReviewValidationState, setReviewValidationState] = React.useState<ReviewValidationDataType>(defaultReviewValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curReviewState,\n    curValidationDomain: curReviewValidationState,\n    schema: reviewSchema,\n    setValidationDomain: setReviewValidationState,\n    defaultValidationDomain: defaultReviewValidationData,\n  })\n\n  // event handlers\n  const handleReviewTitleInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextReviewTitle = e.currentTarget.value\n    updateValidationAt(\"reviewTitle\", e.currentTarget.value);\n    setReviewState((prev: ReviewDataType) => ({\n      ...prev,\n      reviewTitle: nextReviewTitle\n    }));\n  }\n\n  const handleReviewDescriptionInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextReviewDescription = e.currentTarget.value\n    updateValidationAt(\"reviewDescription\", e.currentTarget.value);\n    setReviewState((prev: ReviewDataType) => ({\n      ...prev,\n      reviewDescription: nextReviewDescription\n    }));\n  }\n\n  const handleReviewPointInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextReviewPoint = e.currentTarget.value\n    updateValidationAt(\"reviewPoint\", e.currentTarget.value);\n    setReviewState((prev: ReviewDataType) => ({\n      ...prev,\n      reviewPoint: parseFloat(nextReviewPoint)\n    }));\n  }\n\n  const handleNoteInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextNote = e.currentTarget.value\n    updateValidationAt(\"note\", e.currentTarget.value);\n    setReviewState((prev: ReviewDataType) => ({\n      ...prev,\n      note: nextNote\n    }));\n  }\n\n  const handleReviewIsVerifiedInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextReviewIsVerified = e.currentTarget.checked\n    updateValidationAt(\"isVerified\", e.currentTarget.checked);\n    setReviewState((prev: ReviewDataType) => ({\n      ...prev,\n      isVerified: nextReviewIsVerified\n    }));\n  }\n\n  /**\n   * call child function from parent \n   *\n   * ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  React.useImperativeHandle(ref, () => ({\n\n    // event handler to submit\n    handleSaveClickEvent: (e: React.MouseEvent<HTMLButtonElement>) => {\n      const isValid: boolean = isValidSync(curReviewState)\n\n      console.log(isValid);\n\n      if (isValid) {\n        // pass \n        console.log(\"passed\")\n        console.log(\"update review\")\n\n        dispatch(\n          putReviewActionCreator({\n            reviewId: curReviewState.reviewId,\n            isVerified: curReviewState.isVerified,\n            reviewTitle: curReviewState.reviewTitle,\n            reviewDescription: curReviewState.reviewDescription,\n            note: curReviewState.note,\n            reviewPoint: curReviewState.reviewPoint,\n            productId: curReviewState.product.productId,\n            userId: curReviewState.user.userId,\n          })\n        );\n      } else {\n        console.log(\"failed\")\n        updateAllValidation()\n      }\n    }\n  }))\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Reviewing Customer\"}\n        </Typography>\n        <UserCard\n          firstName={curReviewState.user.firstName}\n          lastName={curReviewState.user.lastName}\n          email={curReviewState.user.email}\n          userType={curReviewState.user.userType.userType}\n          avatarImagePath={curReviewState.user.avatarImagePath}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Reviewed Product\"}\n        </Typography>\n        <ProductHorizontalCard product={props.review.product} variant={props.review.product.variants[0]} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        className={classes.orderDetailBox}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Review Form\"}\n        </Typography>\n        <form className={classes.form} noValidate autoComplete=\"off\">\n          <Typography component=\"legend\">click/touch stars to rate this product.</Typography>\n          <Rating\n            name=\"review-point\"\n            precision={0.1}\n            value={curReviewState.reviewPoint}\n            onChange={handleReviewPointInputChangeEvent}\n            className={`${classes.txtFieldBase}`}\n            size=\"large\"\n          /><br />\n          <TextField\n            id=\"review-title\"\n            label=\"Review Title\"\n            className={`${classes.txtFieldBase}`}\n            value={curReviewState.reviewTitle}\n            onChange={handleReviewTitleInputChangeEvent}\n            helperText={curReviewValidationState.reviewTitle}\n            error={curReviewValidationState.reviewTitle !== \"\"}\n          /><br />\n          <TextField\n            id=\"review-description\"\n            label=\"Review Description\"\n            multiline\n            rows={6}\n            className={`${classes.txtFieldBase}`}\n            value={curReviewState.reviewDescription}\n            onChange={handleReviewDescriptionInputChangeEvent}\n            helperText={curReviewValidationState.reviewDescription}\n            error={curReviewValidationState.reviewDescription !== \"\"}\n          /><br />\n          <TextField\n            id=\"review-note\"\n            label=\"Review Note (Only Visible Admin)\"\n            multiline\n            rows={6}\n            className={`${classes.txtFieldBase}`}\n            value={curReviewState.note}\n            onChange={handleNoteInputChangeEvent}\n            helperText={curReviewValidationState.note}\n            error={curReviewValidationState.note !== \"\"}\n          /><br />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={curReviewState.isVerified}\n                onChange={handleReviewIsVerifiedInputChangeEvent}\n                name=\"review-is-verified\" />\n            }\n            className={`${classes.txtFieldBase}`}\n            label=\"Verified\"\n          /><br />\n        </form>\n      </Grid>\n    </Grid>\n  )\n})\n\nexport default AdminReviewForm\n\n\n","import Dialog from '@material-ui/core/Dialog';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport AdminReviewForm from '../AdminReviewForm';\nimport { ReviewType } from 'domain/review/type';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\ndeclare type AdminReviewFormDialogPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n  review: ReviewType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    dialog: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    dialogPaper: {\n      width: 240,\n    },\n    dialogContentRoot: {\n      padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n  }),\n);\n\nconst AdminReviewFormDialog: React.FunctionComponent<AdminReviewFormDialogPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const toggleDialog = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  /**\n   * call child function from parent \n   *\n   * - ref: https://stackoverflow.com/questions/37949981/call-child-method-from-parent\n   *\n   **/\n  const childRef = React.useRef(null);\n\n  // render nav items\n  return (\n    <Dialog fullScreen={fullScreen} open={props.curFormOpen} onClose={toggleDialog(false)} aria-labelledby=\"admin-review-form-dialog\">\n      <DialogTitle id=\"admin-review-form-dialog-title\">Review Form</DialogTitle>\n      <DialogContent classes={{\n        root: classes.dialogContentRoot,\n      }}>\n        <AdminReviewForm review={props.review} ref={childRef}/>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={(e) => childRef.current.handleSaveClickEvent(e)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AdminReviewFormDialog\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { reviewQueryStartDateActions, reviewQueryEndDateActions } from 'reducers/slices/domain/review';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst DateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeReviewQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeReviewQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(reviewQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(reviewQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default DateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport Rating from '@material-ui/lab/Rating/Rating';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { reviewQueryReviewPointActions } from 'reducers/slices/domain/review';\nimport Button from '@material-ui/core/Button';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReviewFilterTabPanelPropsType {\n//  curReviewPoint: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst ReviewPointFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curReviewPoint = useSelector(mSelector.makeReviewQueryReviewPointSelector())\n\n  const handleReviewPointChangeEvent = (event: any, newValue: number) => {\n    dispatch(reviewQueryReviewPointActions.update(newValue))\n  };\n\n  const handleReset: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(reviewQueryReviewPointActions.clear())\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n        Review Point\n      </Typography>\n      <Box className={classes.contentBox}>\n        <Rating\n          name=\"review-filter-review-point\"\n          onChange={handleReviewPointChangeEvent}\n          precision={0.5}\n          value={curReviewPoint}\n        />\n        <Button onClick={handleReset}>\n          Reset\n      </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ReviewPointFilterTabPanel\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { reviewQuerySortActions } from 'reducers/slices/domain/review';\nimport { mSelector } from 'src/selectors/selector';\nimport { ReviewSortEnum } from 'domain/review/type';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst reviewSortList = [\n  {\n    value: ReviewSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: ReviewSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n  {\n    value: ReviewSortEnum.REVIEW_POINT_ASC,\n    label: \"Lower Point\",\n  },\n  {\n    value: ReviewSortEnum.REVIEW_POINT_DESC,\n    label: \"Higher Point\",\n  },\n]\n\n\nconst SortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeReviewQuerySortSelector())\n\n  const handleReviewSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(reviewQuerySortActions.update(e.currentTarget.value as ReviewSortEnum))\n  }\n\n  const renderReviewSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderReviewSortRadioInputs updated\");\n    return reviewSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"review-sort\" name=\"review-sort\" value={curSort} onChange={handleReviewSortInputChangeEvent}>\n          {renderReviewSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default SortTabPanel\n","import Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { reviewQueryIsVerifiedActions } from 'reducers/slices/domain/review';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface VerifiedFilterTabPanelPropsType {\n//  curVerifiedCheck: boolean\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst VerifiedFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const curIsVerified = useSelector(mSelector.makeReviewQueryIsVerifiedSelector())\n\n  const dispatch = useDispatch();\n  const handleVerifiedCheckChangeEvent = (event: any, newValue: boolean) => {\n    dispatch(reviewQueryIsVerifiedActions.update(newValue))\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Verified\n      </Typography>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curIsVerified}\n            onChange={handleVerifiedCheckChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Verified Only\"\n      />\n    </Box>\n  )\n}\n\nexport default VerifiedFilterTabPanel\n\n\n\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport DateFilterTabPanel from './TabPanel/DateFilterTabPanel';\nimport ReviewPointFilterTabPanel from './TabPanel/ReviewPointFilterTabPanel';\nimport SortTabPanel from './TabPanel/SortTabPanel';\nimport VerifiedFilterTabPanel from './TabPanel/VerifiedFilterTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabBox: {\n      // for search controller which is position: absolute\n      position: \"relative\",\n    },\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n      zIndex: 1,\n      boxShadow: theme.shadows[8],\n    },\n    tabRoot: {\n      minWidth: 50,\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst AdminReviewSearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeReviewQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeReviewQuerySelector());\n\n  return (\n    <Box component=\"div\" className={classes.tabBox}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          classes={{\n            root: classes.tabRoot,\n          }}\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" classes={{ root: classes.tabRoot }} {...a11yProps(0)} />\n          <Tab label=\"Review Point\" classes={{ root: classes.tabRoot }} {...a11yProps(1)} />\n          <Tab label=\"Verified\" classes={{ root: classes.tabRoot }} {...a11yProps(2)} />\n          <Tab label=\"Date\" classes={{ root: classes.tabRoot }} {...a11yProps(3)} />\n          <Tab label=\"Sort\" classes={{ root: classes.tabRoot }} {...a11yProps(4)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <ReviewPointFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <VerifiedFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={3} \n        className={classes.tabPanel}\n        render={() => <DateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={4} \n        className={classes.tabPanel}\n        render={() => <SortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default AdminReviewSearchController\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { DataGrid, GridCellParams, GridColDef, GridPageChangeParams, GridRowsProp } from '@material-ui/data-grid';\nimport EditIcon from '@material-ui/icons/Edit';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { getStatus } from 'domain/review';\nimport { ReviewType } from 'domain/review/type';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteSingleReviewActionCreator, fetchReviewActionCreator, reviewPaginationPageActions } from 'reducers/slices/domain/review';\nimport { FetchStatusEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport AdminReviewFormDialog from '../AdminReviewFormDialog';\nimport AdminReviewSearchController from '../AdminReviewSearchController';\n\ndeclare type AdminReviewGridViewPropsType = {\n}\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingBottom: theme.spacing(4),\n    },\n    loadingBox: {\n      height: \"80vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    media: {\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n    cardContentBox: {\n      height: \"70vh\",\n    }\n  }),\n);\n\nconst generateRows: (domains: ReviewType[]) => GridRowsProp = (domains) => {\n  return domains.map((domain: ReviewType) => {\n    return {\n      id: domain.reviewId,\n      title: domain.reviewTitle,\n      date: domain.createdAt,\n      user: domain.user.firstName + \" \" + domain.user.lastName,\n      product: domain.product.productName,\n      reviewPoint: domain.reviewPoint,\n      status: getStatus(domain.isVerified),\n      actions: domain.reviewId,\n    }\n  })\n}\n\nconst generateColumns: (onEdit: React.EventHandler<React.MouseEvent<HTMLButtonElement>>, onDelete: React.EventHandler<React.MouseEvent<HTMLButtonElement>>) => GridColDef[] = (onEdit, onDelete) => {\n  return [\n    { field: 'id', headerName: 'ID', width: 100 },\n    { field: 'title', headerName: 'Title', width: 150 },\n    { field: 'date', headerName: 'Date', width: 150 },\n    { field: 'user', headerName: 'User', width: 150 },\n    { field: 'product', headerName: 'Product', width: 150 },\n    { field: 'reviewPoint', headerName: 'Review Point', width: 150 },\n    { field: 'status', headerName: 'Status', width: 150 },\n    {\n      field: 'actions',\n      headerName: 'Actions',\n      width: 150,\n      renderCell: (params: GridCellParams) => (\n        <React.Fragment>\n          <IconButton data-review-id={params.value} onClick={onEdit}>\n            <EditIcon />\n          </IconButton>\n          <IconButton data-review-id={params.value} onClick={onDelete}>\n            <RemoveCircleIcon />\n          </IconButton>\n        </React.Fragment>\n      )\n    },\n  ];\n}\n\n/**\n * admin product management component\n *\n **/\nconst AdminReviewGridView: React.FunctionComponent<AdminReviewGridViewPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n  \n  const dispatch = useDispatch()\n\n  // domain cur item\n  const curReviewList = useSelector(mSelector.makeReviewSelector())\n\n  // cur selected review item\n  const [curReviewId, setReviewId] = React.useState<string>(null);\n\n  const pagination = useSelector(mSelector.makeProductPaginationSelector())\n\n  const curQueryString = useSelector(mSelector.makeReviewQuerySelector())\n\n  // fetch review\n  React.useEffect(() => {\n    console.log(\"this is called?\")\n    dispatch(fetchReviewActionCreator())\n  }, [\n    JSON.stringify(curQueryString),\n    pagination.page \n  ])\n\n\n  const [curFormOpen, setFormOpen] = React.useState<boolean>(false);\n\n  // deletion dialog stuff\n  const [curDeleteDialogOpen, setDeleteDialogOpen] = React.useState<boolean>(false);\n\n  const handleDeletionCancel: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n    setDeleteDialogOpen(false);\n  }\n\n  const handleDeletionOk: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    // request\n    dispatch(\n      deleteSingleReviewActionCreator({ reviewId: curReviewId }) \n    )\n  }\n\n  // grid event handler stuff\n  const handleEditClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const reviewId = e.currentTarget.getAttribute(\"data-review-id\")\n\n    console.log(\"target reveiw to be edit: \" + reviewId)\n\n    setReviewId(reviewId);\n\n    setFormOpen(true);\n\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setDeleteDialogOpen(true);\n\n    const reviewId = e.currentTarget.getAttribute(\"data-review-id\")\n    setReviewId(reviewId);\n  }\n\n  // pagination event handler\n  const handlePageChange = (param: GridPageChangeParams) => {\n    // need to decrement since we incremented when display\n    const nextPage = param.page;\n\n    dispatch(reviewPaginationPageActions.update(nextPage))\n  }\n\n  \n  // fetch result\n  // fetch order fetching result\n  const curFetchReviewStatus = useSelector(mSelector.makeFetchReviewFetchStatusSelector())\n  if (curFetchReviewStatus === FetchStatusEnum.FETCHING) {\n    return (\n      <Box className={classes.loadingBox}>\n        <CircularProgress />\n      </Box>\n    )\n  } else if (curFetchReviewStatus === FetchStatusEnum.FAILED) {\n    return (\n      <Box className={classes.loadingBox}>\n        <Typography variant=\"body1\" component=\"h2\" >\n          {\"failed to fetch data... please try again...\"}\n        </Typography>\n      </Box>\n    )\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        titleTypographyProps={{\n          variant: 'h6',\n        }}\n        subheaderTypographyProps={{\n          variant: 'body1'\n        }}\n        title=\"Review List\"\n      />\n      <CardContent\n        className={classes.cardContentBox}\n      >\n        <AdminReviewSearchController />\n        <DataGrid\n          rows={generateRows(curReviewList)}\n          columns={generateColumns(handleEditClick, handleDeleteClick)}\n          page={pagination.page} // don't forget to increment when display\n          pageSize={pagination.limit}\n          rowCount={pagination.totalElements}\n          onPageChange={handlePageChange}\n        />\n      </CardContent>\n      <CardActions disableSpacing>\n      </CardActions>\n      {/** update/create review (without its variants) **/}\n      <AdminReviewFormDialog\n        curFormOpen={curFormOpen}\n        setFormOpen={setFormOpen}\n        review={curReviewList.find((review: ReviewType) => review.reviewId == curReviewId)}\n      />\n      {/** onDelete confiramtion dialog **/}\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        aria-labelledby=\"review-deletion-dialog\"\n        open={curDeleteDialogOpen}\n      >\n        <DialogTitle id=\"review-deletion-dialog\">Product Deletion</DialogTitle>\n        <DialogContent dividers>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            {\"Do you want to delete this review permenently?\"}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={null} >\n            Review ID: <b>{curReviewList.find((review: ReviewType) => review.reviewId == curReviewId) && curReviewList.find((review: ReviewType) => review.reviewId == curReviewId).reviewId}</b>\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleDeletionCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDeletionOk} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  )\n}\n\nexport default AdminReviewGridView\n\n\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport AdminReviewGridView from './AdminReviewGridView';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      flexGrow: 1,\n      padding: theme.spacing(0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(2)\n    },\n    gridContainer: {\n      padding: theme.spacing(1),\n\n      /**[theme.breakpoints.down(\"md\")]: {\n        flexDirection: 'column-reverse',\n      }**/\n    },\n    gridItem: {\n      // setting margin breaks <Grid xs, md, lg > system\n      // so use 'padding' instead\n      padding: theme.spacing(1) \n    }\n  }),\n);\n\n/**\n * admin account management page\n *\n *  - TODO: implement grid row click to display its detail.\n *\n *    - currently, (+) button opens the detaul drawer. fix this.\n *\n **/\nconst AdminReview: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n\n  return (\n    <Box component=\"div\" className={classes.box}>\n      <AdminReviewGridView />\n    </Box>\n  )\n}\n\nexport default AdminReview\n\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.auth.getSingle state Slice\n **/\nexport type getSingleAuthFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getSingleAuthFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/getSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getSingleAuthFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getSingleAuthFetchStatusSliceReducer = getSingleAuthFetchStatusSlice.reducer\nexport const getSingleAuthFetchStatusActions = getSingleAuthFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type putAuthFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putAuthFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putAuthFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putAuthFetchStatusSliceReducer = putAuthFetchStatusSlice.reducer\nexport const putAuthFetchStatusActions = putAuthFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.post state Slice\n *\n *  - update auth data of the same id\n **/\nexport type postAuthPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postAuthPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/phone/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postAuthPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postAuthPhoneFetchStatusSliceReducer = postAuthPhoneFetchStatusSlice.reducer\nexport const postAuthPhoneFetchStatusActions = postAuthPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type putAuthPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putAuthPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/phone/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putAuthPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putAuthPhoneFetchStatusSliceReducer = putAuthPhoneFetchStatusSlice.reducer\nexport const putAuthPhoneFetchStatusActions = putAuthPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type patchAuthPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchAuthPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/phone/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchAuthPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchAuthPhoneFetchStatusSliceReducer = patchAuthPhoneFetchStatusSlice.reducer\nexport const patchAuthPhoneFetchStatusActions = patchAuthPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.delete state Slice\n *\n *  - update auth data of the same id\n **/\nexport type deleteAuthPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteAuthPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/phone/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteAuthPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteAuthPhoneFetchStatusSliceReducer = deleteAuthPhoneFetchStatusSlice.reducer\nexport const deleteAuthPhoneFetchStatusActions = deleteAuthPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type postAuthAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postAuthAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/address/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postAuthAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postAuthAddressFetchStatusSliceReducer = postAuthAddressFetchStatusSlice.reducer\nexport const postAuthAddressFetchStatusActions = postAuthAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type putAuthAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putAuthAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/address/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putAuthAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putAuthAddressFetchStatusSliceReducer = putAuthAddressFetchStatusSlice.reducer\nexport const putAuthAddressFetchStatusActions = putAuthAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type patchAuthAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchAuthAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/address/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchAuthAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchAuthAddressFetchStatusSliceReducer = patchAuthAddressFetchStatusSlice.reducer\nexport const patchAuthAddressFetchStatusActions = patchAuthAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.delete state Slice\n *\n *  - update auth data of the same id\n **/\nexport type deleteAuthAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteAuthAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/address/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteAuthAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteAuthAddressFetchStatusSliceReducer = deleteAuthAddressFetchStatusSlice.reducer\nexport const deleteAuthAddressFetchStatusActions = deleteAuthAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.delete state Slice\n **/\nexport type postAuthAvatarImageFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postAuthAvatarImageFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/avatar-image/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postAuthAvatarImageFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postAuthAvatarImageFetchStatusSliceReducer = postAuthAvatarImageFetchStatusSlice.reducer\nexport const postAuthAvatarImageFetchStatusActions = postAuthAvatarImageFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.auth.delete state Slice\n **/\nexport type deleteAuthAvatarImageFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteAuthAvatarImageFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/avatar-image/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteAuthAvatarImageFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteAuthAvatarImageFetchStatusSliceReducer = deleteAuthAvatarImageFetchStatusSlice.reducer\nexport const deleteAuthAvatarImageFetchStatusActions = deleteAuthAvatarImageFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.auth.put state Slice\n *\n *  - update auth data of the same id\n **/\nexport type putAuthCompanyFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putAuthCompanyFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/company/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putAuthCompanyFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putAuthCompanyFetchStatusSliceReducer = putAuthCompanyFetchStatusSlice.reducer\nexport const putAuthCompanyFetchStatusActions = putAuthCompanyFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.fetch.order state Slice\n *\n *  - update auth data of the same id\n **/\nexport type fetchAuthOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const fetchAuthOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/order/fetch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: fetchAuthOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const fetchAuthOrderFetchStatusSliceReducer = fetchAuthOrderFetchStatusSlice.reducer\nexport const fetchAuthOrderFetchStatusActions = fetchAuthOrderFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.auth.fetch.order.single state Slice\n *\n *  - update auth data of the same id\n **/\nexport type fetchSingleAuthOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const fetchSingleAuthOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/order/fetchSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: fetchSingleAuthOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const fetchSingleAuthOrderFetchStatusSliceReducer = fetchSingleAuthOrderFetchStatusSlice.reducer\nexport const fetchSingleAuthOrderFetchStatusActions = fetchSingleAuthOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.auth.post.order.event state Slice\n *\n *  - update auth data of the same id\n **/\nexport type postAuthOrderEventFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postAuthOrderEventFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/auth/order/event/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postAuthOrderEventFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postAuthOrderEventFetchStatusSliceReducer = postAuthOrderEventFetchStatusSlice.reducer\nexport const postAuthOrderEventFetchStatusActions = postAuthOrderEventFetchStatusSlice.actions\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { CheckoutStepComponentPropsType } from 'components/pages/Checkout/checkoutSteps';\nimport { defaultUserBasicAccountData, defaultUserBasicAccountValidationData, UserBasicAccountDataType, UserBasicAccountValidationDataType, UserType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { putAuthActionCreator } from 'reducers/slices/app';\nimport { putAuthFetchStatusActions } from 'reducers/slices/app/fetchStatus/auth';\nimport { FetchStatusEnum, UserTypeEnum } from 'src/app';\nimport { mSelector, rsSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"inline-block\",\n      maxWidth: 300,\n      marginRight: theme.spacing(2),\n    },\n    actionBox: {\n      textAlign: \"right\",\n      margin: `${theme.spacing(2)}px 0`,\n    },\n  }),\n);\n\ndeclare type CustomerBasicFormPropsType = {\n  user?: UserType\n} & CheckoutStepComponentPropsType\n\n/**\n * checkout: customer information (basic) component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst CustomerBasicForm: React.FunctionComponent<CustomerBasicFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector());\n\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curUserAccountState, setUserAccountState] = React.useState<UserBasicAccountDataType>(defaultUserBasicAccountData)\n\n  // use effect to update user state if exists after render jsx\n  React.useEffect(() => {\n\n    if (props.user) {\n      setUserAccountState((prev: UserBasicAccountDataType) => ({\n        ...prev,\n        firstName: props.user.firstName,\n        lastName: props.user.lastName,\n        email: props.user.email,\n      }))\n    }\n\n  }, [])\n\n  // validation logic (should move to hooks)\n  const [curUserAccountValidationState, setUserAccountValidationState] = React.useState<UserBasicAccountValidationDataType>(defaultUserBasicAccountValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curUserAccountState,\n    curValidationDomain: curUserAccountValidationState,\n    schema: userAccountSchema,\n    setValidationDomain: setUserAccountValidationState,\n    defaultValidationDomain: defaultUserBasicAccountValidationData,\n  })\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setUserAccountState((prev: UserBasicAccountDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curUserAccountState)\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n\n      dispatch(\n        putAuthActionCreator({\n          userId: auth.user.userId,\n          firstName: curUserAccountState.firstName,\n          lastName: curUserAccountState.lastName,\n          email: curUserAccountState.email,\n        })\n      );\n\n      if (auth.userType === UserTypeEnum.GUEST) {\n        props.goToNextStep();\n      }\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // if member, we need to make sure the request (update) succeeded or not. if yes, they can go next.\n  const curPutAuthFetchStatus = useSelector(rsSelector.app.getPutAuthFetchStatus);\n  React.useEffect(() => {\n    if (curPutAuthFetchStatus === FetchStatusEnum.SUCCESS) {\n      props.goToNextStep();\n    }\n\n    return () => {\n      // reset fetch status in the case where the other component needs this.\n      dispatch(\n        putAuthFetchStatusActions.clear()\n      )\n    }\n  }, [\n    curPutAuthFetchStatus \n  ])\n\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"first-name\"\n        label=\"First Name\"\n        className={classes.formControl}\n        value={curUserAccountState.firstName}\n        onChange={handleFirstNameInputChangeEvent}\n        helperText={curUserAccountValidationState.firstName}\n        error={curUserAccountValidationState.firstName !== \"\"}\n\n      />\n      <TextField\n        id=\"last-name\"\n        label=\"Last Name\"\n        className={classes.formControl}\n        value={curUserAccountState.lastName}\n        onChange={handleLastNameInputChangeEvent}\n        helperText={curUserAccountValidationState.lastName}\n        error={curUserAccountValidationState.lastName !== \"\"}\n      />\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        className={classes.formControl}\n        value={curUserAccountState.email}\n        onChange={handleEmailInputChangeEvent}\n        helperText={curUserAccountValidationState.email}\n        error={curUserAccountValidationState.email !== \"\"}\n      />\n      <Box component=\"div\" className={classes.actionBox}>\n        <Button onClick={handleUserAccountSaveClickEvent}>\n          Confirm\n        </Button>\n      </Box>\n    </form>\n  )\n}\n\nexport default CustomerBasicForm\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { toAddressString } from 'domain/user';\nimport { CustomerAddressesFormDataType, CustomerAddressesFormValidationDataType, defaultUserAccountValidationAddressData, generateDefaultCustomerAddressesFormData, UserAddressType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountAddressSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAuthAddressActionCreator, patchAuthAddressActionCreator, postAuthAddressActionCreator, putAuthAddressActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type CustomerAddressesFormPropsType = {\n  addresses: UserAddressType[]\n}\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst CustomerAddressesForm: React.FunctionComponent<CustomerAddressesFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // cur shipping/billing phone\n  const curShippingAddress = useSelector(mSelector.makeAuthShippingAddressSelector());\n  const curBillingAddress = useSelector(mSelector.makeAuthBillingAddressSelector());\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // temp user account state\n  const [curCustomerAddressesFormState, setCustomerAddressesFormState] = React.useState<CustomerAddressesFormDataType>(generateDefaultCustomerAddressesFormData());\n\n  // validation logic (should move to hooks)\n  const [curCustomerAddressesFormValidationState, setCustomerAddressesFormValidationState] = React.useState<CustomerAddressesFormValidationDataType>(defaultUserAccountValidationAddressData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curCustomerAddressesFormState,\n    curValidationDomain: curCustomerAddressesFormValidationState,\n    schema: userAccountAddressSchema,\n    setValidationDomain: setCustomerAddressesFormValidationState,\n    defaultValidationDomain: defaultUserAccountValidationAddressData,\n  })\n\n  // event handlers\n  const handleAddress1InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress1 = e.currentTarget.value\n    updateValidationAt(\"address1\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address1: nextAddress1\n    }));\n\n  }\n\n  const handleAddress2InputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextAddress2 = e.currentTarget.value\n    updateValidationAt(\"address2\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      address2: nextAddress2\n    }));\n\n  }\n\n  const handleCityInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCity = e.currentTarget.value\n    updateValidationAt(\"city\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      city: nextCity\n    }));\n  }\n\n  const handleProvinceInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextProvince = e.currentTarget.value\n    updateValidationAt(\"province\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      province: nextProvince\n    }));\n  }\n\n  const handleCountryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountry = e.currentTarget.value\n    updateValidationAt(\"country\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      country: nextCountry\n    }));\n  }\n\n  const handlePostalCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPostalCode = e.currentTarget.value\n    updateValidationAt(\"postalCode\", e.currentTarget.value);\n    setCustomerAddressesFormState((prev: CustomerAddressesFormDataType) => ({\n      ...prev,\n      postalCode: nextPostalCode\n    }));\n  }\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curCustomerAddressesFormState)\n\n    console.log(isValid);\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n\n        dispatch(\n          postAuthAddressActionCreator(curCustomerAddressesFormState) \n        )\n\n        setModalOpen(false);\n\n      } else {\n        console.log(\"this one is to update existing one\")\n\n        dispatch(\n          putAuthAddressActionCreator(curCustomerAddressesFormState) \n        )\n\n        setModalOpen(false);\n      }\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewAddressBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setCustomerAddressesFormState(generateDefaultCustomerAddressesFormData)\n    setCustomerAddressesFormValidationState(defaultUserAccountValidationAddressData)\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing phone number\n  const handleDeleteAddressClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing address event triggered\")\n    dispatch(\n      deleteAuthAddressActionCreator({\n        addressId: curCustomerAddressesFormState.addressId \n      }) \n    )\n  }\n\n  // event handler to click an address list item to update address\n  const handleAddressItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetAddressId: string = e.currentTarget.getAttribute(\"data-address-id\");\n    const targetAddress = props.addresses.find((address: UserAddressType) => {\n      return address.addressId == targetAddressId\n    })\n\n    setCustomerAddressesFormState(targetAddress);\n    setCustomerAddressesFormValidationState(defaultUserAccountValidationAddressData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // shipping address change event handler\n  const onShippingAddressClick: React.EventHandler<React.MouseEvent<HTMLLabelElement>> = (e) => {\n    const targetAddressId: string = e.currentTarget.getAttribute(\"data-shipping-address-id\");\n    dispatch(\n      patchAuthAddressActionCreator({\n        addressId: targetAddressId,\n        type: \"shipping\",\n      }) \n    )\n  }\n\n  // billing address change event handler\n  const onBillingAddressClick: React.EventHandler<React.MouseEvent<HTMLLabelElement>> = (e) => {\n\n    const targetAddressId: string = e.currentTarget.getAttribute(\"data-billing-address-id\");\n    dispatch(\n      patchAuthAddressActionCreator({\n        addressId: targetAddressId,\n        type: \"billing\",\n      }) \n    )\n  }\n\n  // render functions\n\n  // display current phone number list\n  const renderCurAddressListComponent: () => React.ReactNode = () => {\n    return props.addresses.map((address: UserAddressType) => {\n      console.log(\"billing\")\n      console.log(curBillingAddress && curBillingAddress.addressId === address.addressId)\n      console.log(\"shipping\")\n      console.log(curShippingAddress && curShippingAddress.addressId === address.addressId)\n      return (\n        <ListItem key={address.addressId}>\n          <ListItemAvatar>\n            <Avatar>\n              <HomeIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={toAddressString(address)}\n            secondary={\n              <React.Fragment>\n                {/**\n              * not use usual radio button group because of two different radio group with the same list item\n              *\n              *   - ref: https://stackoverflow.com/questions/37150254/radiobuttongroup-within-nested-list \n              *\n              *   - TODO:\n              *   - this aaporach complains 'A component is changing the uncontrolled checked state of SwitchBase to be controlled.'. find better approach!!\n              **/}\n                <FormControlLabel\n                  value={address.addressId}\n                  data-billing-address-id={address.addressId}\n                  checked={curBillingAddress && curBillingAddress.addressId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curBillingAddress && curBillingAddress.addressId === address.addressId ? \"billing\" : \"\"}\n                  name=\"user-billing-address\"\n                  onClick={onBillingAddressClick}\n                />\n                <FormControlLabel\n                  value={address.addressId}\n                  data-shipping-address-id={address.addressId}\n                  checked={curShippingAddress && curShippingAddress.addressId === address.addressId}\n                  control={<Radio />}\n                  labelPlacement=\"bottom\"\n                  label={curShippingAddress && curShippingAddress.addressId === address.addressId ? \"shipping\" : \"\"}\n                  name=\"user-shipping-address\"\n                  onClick={onShippingAddressClick}\n                />\n                <IconButton edge=\"end\" aria-label=\"edit\" data-address-id={address.addressId} onClick={handleAddressItemClickEvent}>\n                  <EditIcon />\n                </IconButton>\n              </React.Fragment>\n            }\n          />\n          <ListItemSecondaryAction>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new phone number\n\n  return (\n    <React.Fragment>\n      <Box component=\"div\">\n        {(props.addresses.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Added Any Address Yet.\"}\n          </Typography>\n        )}\n        {(props.addresses.length > 0 &&\n          <List className={classes.listBox}>\n            {renderCurAddressListComponent()}\n          </List>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewAddressBtnClickEvent}>\n            Add New Address\n        </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"address1\"\n            label=\"Address 1\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.address1}\n            onChange={handleAddress1InputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.address1}\n            error={curCustomerAddressesFormValidationState.address1 !== \"\"}\n\n          />\n          <TextField\n            id=\"address2\"\n            label=\"Address 2\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.address2}\n            onChange={handleAddress2InputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.address2}\n            error={curCustomerAddressesFormValidationState.address2 !== \"\"}\n\n          />\n          <TextField\n            id=\"city\"\n            label=\"City\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.city}\n            onChange={handleCityInputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.city}\n            error={curCustomerAddressesFormValidationState.city !== \"\"}\n          />\n          <TextField\n            id=\"province\"\n            label=\"Province\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.province}\n            onChange={handleProvinceInputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.province}\n            error={curCustomerAddressesFormValidationState.province !== \"\"}\n          />\n          <TextField\n            id=\"country\"\n            label=\"Country\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.country}\n            onChange={handleCountryInputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.country}\n            error={curCustomerAddressesFormValidationState.country !== \"\"}\n          />\n          <TextField\n            id=\"postal-code\"\n            label=\"Postal Code\"\n            className={classes.formControl}\n            value={curCustomerAddressesFormState.postalCode}\n            onChange={handlePostalCodeInputChangeEvent}\n            helperText={curCustomerAddressesFormValidationState.postalCode}\n            error={curCustomerAddressesFormValidationState.postalCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleUserAccountSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default CustomerAddressesForm\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Modal from '@material-ui/core/Modal';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport { CustomerPhonesFormDataType, CustomerPhonesFormValidationDataType, defaultUserAccountValidationPhoneData, generateDefaultCustomerPhonesFormData, UserPhoneType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { userAccountPhoneSchema } from 'hooks/validation/rules';\nimport EditIcon from '@material-ui/icons/Edit';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAuthPhoneActionCreator, patchAuthPhoneActionCreator, postAuthPhoneActionCreator, putAuthPhoneActionCreator } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      display: \"flex\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    listBox: {\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n    },\n    modalBox: {\n\n    },\n    modalContent: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: `translate(-50%, -50%)`,\n      backgroundColor: \"#fff\",\n      maxWidth: 400,\n      width: \"80%\",\n      margin: \"5px auto\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\nexport declare type CustomerPhonesFormPropsType = {\n  phones: UserPhoneType[]\n}\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. recieve the user data prop from parent component\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst CustomerPhonesForm: React.FunctionComponent<CustomerPhonesFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  // cur selected phone\n  const curPrimaryPhone = useSelector(mSelector.makeAuthSelectedPhoneSelector());\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // temp user account state\n  const [curCustomerPhonesFormState, setCustomerPhonesFormState] = React.useState<CustomerPhonesFormDataType>(generateDefaultCustomerPhonesFormData());\n\n  // update/create logic for address\n  //  - true: create\n  //  - false: update\n  const [isNew, setNew] = React.useState<boolean>(true);\n\n  // validation logic (should move to hooks)\n  const [curCustomerPhonesFormValidationState, setCustomerPhonesFormValidationState] = React.useState<CustomerPhonesFormValidationDataType>(defaultUserAccountValidationPhoneData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curCustomerPhonesFormState,\n    curValidationDomain: curCustomerPhonesFormValidationState,\n    schema: userAccountPhoneSchema,\n    setValidationDomain: setCustomerPhonesFormValidationState,\n    defaultValidationDomain: defaultUserAccountValidationPhoneData,\n  })\n\n  // event handlers\n  const handlePhoneNumberInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPhoneNumber = e.currentTarget.value\n    updateValidationAt(\"phoneNumber\", e.currentTarget.value);\n    setCustomerPhonesFormState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      phoneNumber: nextPhoneNumber\n    }));\n  }\n\n  const handleCountryCodeInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextCountryCode = e.currentTarget.value\n    updateValidationAt(\"countryCode\", e.currentTarget.value);\n    setCustomerPhonesFormState((prev: CustomerPhonesFormDataType) => ({\n      ...prev,\n      countryCode: nextCountryCode\n    }));\n  }\n\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curCustomerPhonesFormState)\n    console.log(isValid);\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      if (isNew) {\n        console.log(\"this one is to create new one\")\n        dispatch(\n          postAuthPhoneActionCreator(curCustomerPhonesFormState)\n        )\n        setModalOpen(false);\n      } else {\n        console.log(\"this one is to update one\")\n        dispatch(\n          putAuthPhoneActionCreator(curCustomerPhonesFormState)\n        )\n        setModalOpen(false);\n      }\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // modal logic\n  const [curModalOpen, setModalOpen] = React.useState<boolean>(false);\n  const handleModalOpenClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(true)\n  }\n  const handleModalCancelClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setModalOpen(false)\n  }\n\n  // event handler for click 'add new one' button\n  const handleAddNewPhoneBtnClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setCustomerPhonesFormState(generateDefaultCustomerPhonesFormData())\n    setCustomerPhonesFormValidationState(defaultUserAccountValidationPhoneData)\n\n    setNew(true);\n    setModalOpen(true);\n  }\n\n  // delete an existing phone number\n  const handleDeletePhoneClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    console.log(\"delete an existing phone number event triggered\")\n\n    dispatch(\n      deleteAuthPhoneActionCreator({\n        phoneId: curCustomerPhonesFormState.phoneId\n      })\n    )\n  }\n\n  // event handler to click an phone list item to update phone\n  const handlePhoneItemClickEvent: React.EventHandler<React.MouseEvent<HTMLElement>> = (e) => {\n\n    const targetPhoneId: string = e.currentTarget.getAttribute(\"data-phone-id\");\n    const targetPhone = props.phones.find((phone: UserPhoneType) => {\n      return phone.phoneId == targetPhoneId\n    })\n\n    setCustomerPhonesFormState(targetPhone);\n    setCustomerPhonesFormValidationState(defaultUserAccountValidationPhoneData)\n    setNew(false);\n    setModalOpen(true)\n  }\n\n  // primary phone change event handler (radio)\n  const onPrimaryPhoneChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    const targetPhoneId: string = e.currentTarget.value\n\n    dispatch(\n      patchAuthPhoneActionCreator({\n        phoneId: targetPhoneId\n      })\n    )\n  }\n\n  // render functions\n\n  // display current phone number list\n  const renderCurPrimaryPhoneListComponent: () => React.ReactNode = () => {\n    return props.phones.map((phone: UserPhoneType) => {\n      return (\n        <ListItem key={phone.phoneId} >\n          {/** using phoneId as key does not work since new phone does not have phoneId. it is assigned at backend. **/}\n          <ListItemAvatar>\n            <Avatar>\n              <PhoneIphoneIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={phone.phoneNumber}\n            secondary={phone.countryCode}\n          />\n          <ListItemSecondaryAction>\n            <FormControlLabel value={phone.phoneId} control={<Radio />} label=\"\" />\n            <IconButton edge=\"end\" aria-label=\"edit\" data-phone-id={phone.phoneId} onClick={handlePhoneItemClickEvent}>\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  // display popup modal to add new phone number\n\n  return (\n    <React.Fragment>\n      <Box component=\"div\">\n        {(props.phones.length === 0 &&\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. You Haven't Added Any Phone Yet.\"}\n          </Typography>\n        )}\n        {(props.phones.length > 0 &&\n          <RadioGroup value={curPrimaryPhone ? curPrimaryPhone.phoneId : null} aria-label=\"phone\" name=\"user-phone-radio\" onChange={onPrimaryPhoneChange}>\n            <List className={classes.listBox}>\n              {renderCurPrimaryPhoneListComponent()}\n            </List>\n          </RadioGroup>\n        )}\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleAddNewPhoneBtnClickEvent}>\n            Add New Phone\n          </Button>\n        </Box>\n      </Box>\n      <Modal\n        open={curModalOpen}\n        onClose={handleModalOpenClickEvent}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <form className={classes.modalContent} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"phone\"\n            label=\"Phone\"\n            className={classes.formControl}\n            value={curCustomerPhonesFormState.phoneNumber}\n            onChange={handlePhoneNumberInputChangeEvent}\n            helperText={curCustomerPhonesFormValidationState.phoneNumber}\n            error={curCustomerPhonesFormValidationState.phoneNumber !== \"\"}\n\n          />\n          <TextField\n            id=\"country-code\"\n            label=\"Country Code\"\n            className={classes.formControl}\n            value={curCustomerPhonesFormState.countryCode}\n            onChange={handleCountryCodeInputChangeEvent}\n            helperText={curCustomerPhonesFormValidationState.countryCode}\n            error={curCustomerPhonesFormValidationState.countryCode !== \"\"}\n          />\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button onClick={handleModalCancelClickEvent}>\n              Cancel\n            </Button>\n            <Button onClick={handleUserAccountSaveClickEvent}>\n              Save\n            </Button>\n          </Box>\n        </form>\n      </Modal>\n    </React.Fragment>\n  )\n}\n\nexport default CustomerPhonesForm\n\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CheckoutStepComponentPropsType } from 'components/pages/Checkout/checkoutSteps';\nimport { UserType } from 'domain/user/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport CustomerAddressesForm from './CustomerAddressesForm';\nimport CustomerPhonesForm from './CustomerPhonesForm';\nimport { messageActions } from 'reducers/slices/app';\nimport { getNanoId } from 'src/utils';\nimport { MessageTypeEnum } from 'src/app';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    actionBox: {\n      textAlign: \"right\",\n      margin: `${theme.spacing(2)}px 0`,\n    },\n  }),\n);\n\ndeclare type CustomerContactFormPropsType = {\n  user: UserType\n} & CheckoutStepComponentPropsType\n\n/**\n * checkout: customer information (contact) component\n *\n * process:\n *  \n *   1. keep track of phone and addresses (shipping & billing)\n *\n *   2. display currently registered phones and addresses \n *\n *   3. provide 'add' & 'remove' option\n *\n *   4. send a update request after update those\n *\n **/\nconst CustomerContactForm: React.FunctionComponent<CustomerContactFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curPrimaryPhone = useSelector(mSelector.makeAuthSelectedPhoneSelector())\n  const curBillingAddress = useSelector(mSelector.makeAuthBillingAddressSelector())\n  const curShippingAddress = useSelector(mSelector.makeAuthShippingAddressSelector())\n\n  // event handler to validate phone & addresses\n  const handleValidateClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    //  - check each phone and addresses whether it sets the isSelected, isBillingAddress, isShippingAddress\n    if (curPrimaryPhone && curBillingAddress && curShippingAddress) {\n      // validation passed\n      props.goToNextStep()\n    } else {\n      // validation failed.\n      \n      dispatch(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: \"please select phone, shipping address, and billing address.\"  \n        })\n      )\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n        md={6}\n      >\n        <CustomerPhonesForm\n          phones={props.user.phones}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n      >\n        <CustomerAddressesForm\n          addresses={props.user.addresses}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <Button onClick={(e) => props.goToPrevStep()} className={classes.actionBox}>\n          {\"Previous\"}\n        </Button>\n        <Button onClick={handleValidateClick} className={classes.actionBox}>\n          {\"Confirm\"}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default CustomerContactForm\n","import {loadStripe} from '@stripe/stripe-js';\n\n/**\n * this is Strip API publishable key\n *\n *  - you don't need to hide this api key\n *\n **/\nexport const stripePromise = loadStripe(\"pk_test_51IMHMWGsn7HlXlcZsiUP6NwB1D4k3u4KcUs4BtM3fJKJcrwL9ouGwICnAXzr3Dum5kscRehqEPK4AeOKjLfAFShq00yN0wtMcr\")\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CartItemType } from \"domain/cart/types\";\nimport merge from \"lodash/merge\";\nimport remove from 'lodash/remove';\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request\nexport const fetchCartItemActionCreator = createAction(\"saga/domain/cartItem/fetch\")\nexport const fetchCartItemActionTypeName = fetchCartItemActionCreator().type\n\n// for POST (add a new cart item) request\nexport const postCartItemActionCreator = createAction<CartItemType>(\"saga/domain/cartItem/post\")\nexport const postCartItemActionTypeName = postCartItemActionCreator().type\n\n// for PUT (replace) request\nexport const putCartItemActionCreator = createAction<CartItemType>(\"saga/domain/cartItem/put\")\nexport const putCartItemActionTypeName = putCartItemActionCreator().type\n\n// for DELETE (delete single cart item) request\nexport const deleteSingleCartItemActionCreator = createAction<CartItemType>(\"saga/domain/cartItem/deleteSingle\")\nexport const deleteSingleCartItemActionTypeName = deleteSingleCartItemActionCreator().type\n\n// for DELETE (delete all of cart items) request\nexport const deleteCartItemActionCreator = createAction<CartItemType>(\"saga/domain/cartItem/delete\")\nexport const deleteCartItemActionTypeName = deleteCartItemActionCreator().type\n\n/**\n *\n * domain.cartItems state Slice (no side effects)\n *\n **/\n// action type             \nexport type CartItemActionType = PayloadAction<CartItemType[]> \n\nexport const cartItemSlice = createSlice({ \n  name: \"domain/cartItem\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when update existing one (only apply for array: don't use for object)\n    updateOne: (state: CartItemType[], action: PayloadAction<CartItemType>) => {\n      return state.map((domain: CartItemType) => {\n        if (domain.cartItemId === action.payload.cartItemId) {\n          return action.payload\n        }\n        return domain\n      })\n    },\n\n    append: (state: CartItemType[], action: PayloadAction<CartItemType>) => {\n\n      // if variant already exists, skip\n      if (!state.find((cartItem: CartItemType) => cartItem.product.variants[0].variantId == action.payload.product.variants[0].variantId)) {\n        return merge(state, [action.payload]);\n      }\n      return state\n    },\n\n    // use when you want to replace the whole array\n    update: (state: CartItemType[], action: CartItemActionType) => {\n      console.log(\"inside cart item reducer\")\n      console.log(action.payload)\n      return action.payload;\n    },\n    // use when you want to remove a single entity\n    delete: (state: CartItemType[], action: PayloadAction<CartItemType>) => {\n      /**\n       * mutable.\n       * original one: the rest of elements\n       * return one: the removed elements\n       **/\n      remove(state, (cartItem: CartItemType) => cartItem.cartItemId == action.payload.cartItemId)\n      return state\n    },\n\n    deleteSelectedItemsByProduct: (state: CartItemType[], action: PayloadAction<{ productId: string, productVariantId: string }[]>) => {\n      // remove if condition met (2nd arg)\n      remove(state, (cartItem: CartItemType) => { \n        // condition \n        return action.payload.find((ele) => {\n          return cartItem.isSelected && cartItem.product.productId == ele.productId && cartItem.product.variants[0].variantId == ele.productVariantId\n        })\n      })\n      return state\n    },\n\n    deleteSelectedItems: (state: CartItemType[]) => {\n      remove(state, (cartItem: CartItemType) => cartItem.isSelected)\n      return state\n    },\n\n    clear: (state: CartItemType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const cartItemSliceReducer = cartItemSlice.reducer\nexport const cartItemActions = cartItemSlice.actions\n\n","import { createAction } from \"@reduxjs/toolkit\";\n\n/**\n * common actions.\n *\n * - it is shared by mutliple case reducer.\n * - to used to change mutiple state at once.\n * - implement with 'extraReducers' at each case reducer setting.\n **/\n\n\n// for GET request\nexport const resetCheckoutStateActionCreator = createAction(\"common/checkout/reset\")\nexport const resetCheckoutStateActionTypeName = resetCheckoutStateActionCreator().type\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\nimport { calcOrderTotalCost } from 'domain/order';\nimport { toFullNameString } from 'domain/user';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { messageActions } from 'reducers/slices/app';\nimport { postOrderFetchStatusActions } from 'reducers/slices/app/fetchStatus/order';\nimport { cartItemActions } from 'reducers/slices/domain/cartItem';\nimport { checkoutOrderActions } from 'reducers/slices/domain/checkout';\nimport { stripeClientSecretActions } from 'reducers/slices/sensitive';\nimport { MessageTypeEnum } from 'src/app';\nimport { mSelector, rsSelector } from 'src/selectors/selector';\nimport { cadCurrencyFormat, getNanoId } from 'src/utils';\nimport { resetCheckoutStateActionCreator } from 'reducers/slices/common';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      textAlign: \"center\",\n\n    },\n    cartInputBox: {\n      margin: `${theme.spacing(1)}px auto`,\n      maxWidth: 300,\n    },\n    btnBox: {\n      margin: `${theme.spacing(1)}px 0`,\n      textAlign: \"right\",\n    },\n    btn: {\n    }\n  }),\n);\n\ndeclare type StripePaymentFormPropsType = {\n  goToStep: (step: CheckoutStepEnum) => void\n  setPaymentAttempt: React.Dispatch<React.SetStateAction<boolean>>\n}\n\n/**\n * checkout: Stripe Payment Form component \n *\n *  - use Stripe Element to process the payment\n *\n **/\nconst StripePaymentForm: React.FunctionComponent<StripePaymentFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch()\n\n  // history\n  const history = useHistory()\n\n  // cur checkout order\n  const curCheckoutOrder = useSelector(rsSelector.domain.getCheckoutOrder)\n\n  // client_secret state (redux store)\n  const stripeClientSecret = useSelector(mSelector.makeStipeClientSecretSelector())\n\n  // stripe stuff\n  const stripe = useStripe();\n  const elements = useElements();\n\n  // event handler on 'make payment' click event\n  const handleMakePaymentClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // call stripe.confirmCardPayment method with client_secret and card info\n    const result = await stripe.confirmCardPayment(stripeClientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: toFullNameString(curCheckoutOrder.orderFirstName, curCheckoutOrder.orderLastName),\n          address: {\n            line1: curCheckoutOrder.billingAddress.address1,\n            line2: curCheckoutOrder.billingAddress.address2,\n            city: curCheckoutOrder.billingAddress.city,\n            state: curCheckoutOrder.billingAddress.province,\n            country: curCheckoutOrder.billingAddress.country,\n            postal_code: curCheckoutOrder.billingAddress.postalCode,\n          },\n          email: curCheckoutOrder.orderEmail,\n          phone: curCheckoutOrder.orderPhone,\n        },\n      }\n    });\n\n    // payment done \n\n    /**\n     * make sure to delete clientSecret. it is sensitive data and should be deleted as soon as you used.\n     *\n     * also, cur order too.\n     * also, post order fetch status too\n     *\n     **/\n    /**\n     * currently, this action (resetCheckoutStatus) is caught by following case reducers:\n     *\n        - stripeClientSecretActions\n        - checkoutOrderActions\n        - postOrderFetchStatusActions\n     *\n     *\n     **/\n    dispatch(\n      resetCheckoutStateActionCreator()\n    )\n\n    // prepare for the next payment if failed\n    props.setPaymentAttempt(true);\n\n    /**\n     * Payment Failed\n     **/\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n\n      /**\n       * update message\n       **/\n      dispatch(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: \"sorry, we failed to process your payment. please start over again. (reason: \" + result.error.message + \")\",\n          persist: true,\n        })\n      )\n      // reload instead of steping back to the fist section.\n      // to reset all state (e.g., session timeout)\n      // this does not work since error message does not show since this reloading.\n      //window.location.reload();\n\n      props.goToStep(CheckoutStepEnum.CUSTOMER_BASIC_INFORMATION);\n\n    } else {\n      /**\n       * Payment Succeeded\n       **/\n\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        dispatch(\n          messageActions.update({\n            id: getNanoId(),\n            type: MessageTypeEnum.SUCCESS,\n            message: \"thank you for your purchase. we will send the confirmation email soon.\",\n          })\n        )\n      }\n\n      // remove purchased product from cart.\n      dispatch(\n        cartItemActions.deleteSelectedItems()\n      )\n\n      history.push(\"/\");\n    }\n  }\n\n  const totalCost = curCheckoutOrder ? cadCurrencyFormat(calcOrderTotalCost(curCheckoutOrder)) : cadCurrencyFormat(0)\n\n  return (\n    <Box component=\"div\" className={classes.root}>\n      <Box className={classes.cartInputBox}>\n        <CardElement />\n      </Box>\n      <Box className={classes.btnBox}>\n        <Button\n          disabled={!stripe}\n          onClick={handleMakePaymentClick}\n          className={classes.btn}\n        >\n          Make Payment (<b>$ {totalCost} </b>)\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default StripePaymentForm\n\n","import Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { CheckoutStepComponentPropsType } from 'components/pages/Checkout/checkoutSteps';\nimport { stripePromise } from 'configs/stripeConfig';\nimport { UserType } from 'domain/user/types';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport StripePaymentForm from './StripePaymentForm';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    totalCost: {\n      alignSelf: \"end\",\n    },\n    root: {\n      margin: \"0 auto\",\n    }\n  }),\n);\n\ndeclare type PaymentPropsType = {\n  user: UserType\n  setPaymentAttempt: React.Dispatch<React.SetStateAction<boolean>>\n} & CheckoutStepComponentPropsType\n\n/**\n * checkout: payment page \n *\n * process:\n *\n *  - display all information (customer information, selected products, and cost) \n *\n *  - integrate with Stripe Elements for the payment\n *\n **/\nconst Payment: React.FunctionComponent<PaymentPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const selectedCartItems = useSelector(mSelector.makeSelectedCartItemSelector())\n\n  return (\n    <Box className={classes.root}>\n      <Elements stripe={stripePromise}>\n        <StripePaymentForm goToStep={props.goToStep} setPaymentAttempt={props.setPaymentAttempt} />\n      </Elements>\n    </Box>\n  )\n}\n\nexport default Payment\n","import { ProductType } from \"domain/product/types\";\nimport { getNanoId } from \"src/utils\";\nimport { CartItemType } from \"./types\";\n\nexport const calcSubTotalPriceAmount: (cartItems: CartItemType[]) => number = (cartItems) => {\n  return cartItems.reduce((acc: number, cartItem: CartItemType) => {\n    if (cartItem.isSelected) {\n      const unitPrice = cartItem.product.variants[0].variantUnitPrice ? cartItem.product.variants[0].variantUnitPrice : cartItem.product.productBaseUnitPrice\n      acc += (unitPrice * cartItem.quantity)\n    }\n    return acc\n  }, 0)\n}\n\nexport const calcSubTotalProductNumbers: (cartItems: CartItemType[]) => number = (cartItems) => {\n  return cartItems.reduce((acc: number, cartItem: CartItemType) => {\n    if (cartItem.isSelected) {\n      acc += cartItem.quantity\n    }\n    return acc\n  }, 0)\n}\n\nexport const calcTotalWeight: (cartItems: CartItemType[]) => number = (cartItems) => {\n  return cartItems.reduce((acc: number, cartItem: CartItemType) => {\n    acc += cartItem.product.variants[0].variantWeight\n    return acc\n  }, 0)\n}\n\n/**\n * validate cartItem if the customer moves to checkout.\n *\n * - at least one item must be selected.\n *\n **/\nexport const validateCartItemsForCheckout: (cartItems: CartItemType[]) => boolean = (cartItems) => {\n  const selectedItems = cartItems.filter((cartItem: CartItemType) => cartItem.isSelected === true);\n  return selectedItems.length > 0;\n}\n\n\n\n/**\n * create new cart item.\n *\n * used when move wishlist to cart item.\n *\n * used for only guest user. for member users, fetch from api.\n *\n **/\nexport const createCartItem: (variantId: string, filteredProduct: ProductType) => CartItemType = (variantId, filteredProduct) => {\n  return {\n    cartItemId: getNanoId(),\n    createdAt: new Date(Date.now()),\n    isSelected: true,\n    product: filteredProduct,\n    quantity: 1,\n    user: null\n  } as CartItemType\n}\n\n/**\n * create a cart item criteria for a request body from a cart item entity.\n *\n * if the product of the cart item entity includes the selected variant only, you don't need to specify the 2nd arg.\n *\n * if the product of the cart item entity includes all the variants of it, you should provide your selected variantId explicitly as the 2nd arg.\n *\n **/\n//export const mapToCriteria: (cartItem: CartItemType, variantId?: string) => CartItemCriteria = (cartItem, variantId?) => {\n//  return {\n//    ...(cartItem.cartItemId ? { cartItemId: cartItem.cartItemId } : {}),\n//    variantId: variantId ? variantId : cartItem.product.variants[0],\n//    isSelected: cartItem.isSelected,\n//    quantity: cartItem.quantity,\n//    userId: cartItem.user ? cartItem.user.userId : null,\n//  } as CartItemCriteria\n//}\n\n\n","import Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { calcSubTotalPriceAmount, calcSubTotalProductNumbers, calcTotalWeight } from 'domain/cart';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport { cadCurrencyFormat } from 'src/utils';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n  }),\n);\n\ndeclare type CartItemTotalPropsType = {\n}\n\n/**\n * display subtotal, tax, shipping cost, and total cost component \n *\n * process:\n *\n * - get cur state from redux\n *\n * - display these cost\n *\n *\n **/\nconst CartItemTotal: React.FunctionComponent<CartItemTotalPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n  \n  // snakbar stuff when no phone & addresses are selected\n  const { enqueueSnackbar } = useSnackbar();\n\n  // selected cart Items\n  const selectedCartItems = useSelector(mSelector.makeSelectedCartItemSelector())\n\n  // shipping cost state\n  const [curShippingCost, setShippingCost] = React.useState<number>(0);\n\n  // request to get appropriate shipping cost\n  React.useEffect(() => {\n\n    api.request({\n      method: 'GET',\n      url: API1_URL + `/shipping/rating?weight=${calcTotalWeight(selectedCartItems)}`,\n    }).then((data) => {\n\n      setShippingCost(data.data.shippingCost);\n\n      enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n    }).catch((error: AxiosError) => {\n      // use error.response.data.message from api\n      enqueueSnackbar(error.response.data.message, { variant: \"error\" })\n    })\n  }, [\n  \n  ])\n\n  return (\n    <Box component=\"div\">\n      <div>\n        <Typography variant=\"subtitle1\" component=\"h3\" align=\"right\" gutterBottom>\n          Subtotal (<b>{calcSubTotalProductNumbers(selectedCartItems)}</b>  items): $<b>{cadCurrencyFormat(calcSubTotalPriceAmount(selectedCartItems))}</b>\n        </Typography>\n        <Typography variant=\"subtitle1\" component=\"h3\" align=\"right\" gutterBottom>\n          Tax: $<b>{cadCurrencyFormat(0)}</b>\n        </Typography>\n        <Typography variant=\"subtitle1\" component=\"h3\" align=\"right\" gutterBottom>\n          Shipping Cost: $<b>{cadCurrencyFormat(curShippingCost)}</b>\n        </Typography>\n        <Divider />\n        <Typography variant=\"h6\" component=\"h3\" align=\"right\" gutterBottom>\n          Total: $<b>{cadCurrencyFormat(calcSubTotalPriceAmount(selectedCartItems) + 0 + curShippingCost)}</b>\n        </Typography>\n      </div>\n    </Box>\n  )\n}\n\nexport default CartItemTotal\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport ColorCell from 'components/common/GridData/ColorCell';\nimport SizeCell from 'components/common/GridData/SizeCell';\nimport { CartItemType } from 'domain/cart/types';\nimport * as React from 'react';\nimport SampleSelfImage from 'static/self.jpeg';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * need 'orderDetail' or 'product/variant'\n *\n **/\ninterface CartItemConfirmCardPropsType {\n  value: CartItemType\n  onChange?: React.EventHandler<React.ChangeEvent<HTMLInputElement>>\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(1)\n    },\n    card: {\n    },\n    cardHeader: {\n      width: \"100%\",\n    },\n    action: {\n      alignSelf: \"center\", \n      marginTop: 0,\n      marginRight: 0,\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    },\n    actionBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst CartItemConfirmCard: React.FunctionComponent<CartItemConfirmCardPropsType> = ({ value, onChange }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // event handlers\n\n  return (\n    <Card className={`${classes.card} ${classes.root}`}>\n      <CardHeader\n        className={classes.cardHeader}\n        // you can override the style of deeper element of Mui with 'classes' props\n        // check the api document for your target component (e.g., CartHeader) to choose which element you are going to override\n        classes={{\n          action: classes.action, \n        }}\n        avatar={<Avatar alt=\"\" src={SampleSelfImage} />}\n        title={value.product.productName}\n        subheader={`$${value.product.productBaseUnitPrice} NEED TO FIX`}\n        action={\n          <Box component=\"div\" className={classes.actionBox}>\n            <ColorCell value={value.product.variants[0].variantColor} />\n            <SizeCell value={value.product.variants[0].productSize.productSizeName} />\n            <Typography variant=\"subtitle1\" component=\"p\">\n              x<b>{`${value.quantity}`}</b>\n            </Typography>\n          </Box>\n        }\n      >\n      </CardHeader>\n    </Card>\n  )\n}\n\nexport default CartItemConfirmCard\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      maxWidth: 300,\n      margin: \"5px 5px\",\n\n    },\n    disabled: {\n      color: theme.palette.text.primary\n    },\n    actionBox: {\n      margin: `${theme.spacing(1)}px 0`,\n    },\n  }),\n);\n\ndeclare type CustomerBasicConfirmPropsType = {\n  goToStep?: (step: CheckoutStepEnum) => void\n}\n\n/**\n * checkout: payment - customer basic info conform form  \n *\n * process:\n *\n *  1. display all user basic info\n *\n *  2. disabled all input \n *\n *  3. if the user want to edit, change stepper id to go back to 'customer basic informaiton' step.\n *\n **/\nconst CustomerBasicConfirm: React.FunctionComponent<CustomerBasicConfirmPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // get cur auth user from redux store and display \n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  /**\n   * TODO: change the color of disabled textfield. it is really hard to see if it is default style\n   *\n   **/\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"first-name\"\n        label=\"First Name\"\n        className={classes.formControl}\n        value={auth.user.firstName}\n        inputProps={{\n          readOnly: true,\n        }}\n        color={'primary'}\n      />\n      <TextField\n        id=\"last-name\"\n        label=\"Last Name\"\n        className={classes.formControl}\n        value={auth.user.lastName}\n        inputProps={{\n          readOnly: true,\n        }}\n      />\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        className={classes.formControl}\n        value={auth.user.email}\n        inputProps={{\n          readOnly: true,\n        }}\n      />\n      <Box component=\"div\" className={classes.actionBox}>\n        <Button onClick={(e) => props.goToStep(CheckoutStepEnum.CUSTOMER_BASIC_INFORMATION)}>\n          Edit\n        </Button>\n      </Box>\n    </form>\n  )\n}\n\nexport default CustomerBasicConfirm\n\n\n\n\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { UserAddressType } from 'domain/user/types';\nimport * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      /**\n       * TODO: need to match height with other elements (e.g., shipping, billing card)\n       *\n       *  - don't do \"100%\". it overflows. i dont know why.\n       **/\n      height: \"90%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\ndeclare type AddressConfirmCardPropsType = {\n  headerIcon: React.ReactNode\n  title: string\n  address: UserAddressType\n  goToStep?: (step: CheckoutStepEnum) => void\n}\n\nconst AddressConfirmCard: React.FunctionComponent<AddressConfirmCardPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  const handleGoToStep: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.goToStep(CheckoutStepEnum.CUSTOMER_CONTACT_INFORMATION)\n  }\n\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            {props.headerIcon}\n          </Avatar>\n        }\n        title={props.title}\n        action={\n          <IconButton onClick={handleGoToStep}>\n            <EditIcon />\n          </IconButton>\n        }\n      />\n      <CardContent>\n        {!props.address &&\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" >\n            {\"Oops. You haven't selected your address.\"}\n          </Typography>\n        }\n        {props.address &&\n          <React.Fragment>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.address1} ${props.address.address2}`}\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.city} ${props.address.province}`}\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              {`${props.address.country} ${props.address.postalCode}`}\n            </Typography>\n          </React.Fragment>\n        }\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default AddressConfirmCard\n\n\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport { UserPhoneType } from 'domain/user/types';\nimport * as React from 'react';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      /**\n       * TODO: need to match height with other elements (e.g., shipping, billing card)\n       *\n       *  - don't do \"100%\". it overflows. i don't know why.\n       **/\n      height: \"90%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: theme.spacing(1),\n    },\n    content: {\n    },\n  }),\n);\n\ndeclare type PhoneConfirmCardPropsType = {\n  phone: UserPhoneType\n  goToStep?: (step: CheckoutStepEnum) => void\n}\n\nconst PhoneConfirmCard: React.FunctionComponent<PhoneConfirmCardPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  const handleGoToStep: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    props.goToStep(CheckoutStepEnum.CUSTOMER_CONTACT_INFORMATION)\n  }\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Avatar>\n            <PhoneIphoneIcon />\n          </Avatar>\n        }\n        title={\"Phone #\"}\n        action={\n          <IconButton onClick={handleGoToStep}>\n            <EditIcon />\n          </IconButton>\n        }\n      />\n      <CardContent className={classes.content}>\n        {!props.phone &&\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" >\n            {\"Oops. You haven't selected your primary phone.\"}\n          </Typography>\n        }\n        {props.phone &&\n          <Typography variant=\"body1\" component=\"p\">\n            {`${props.phone.countryCode} ${props.phone.phoneNumber}`}\n          </Typography>\n        }\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default PhoneConfirmCard\n\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport AddressConfirmCard from '../AddressConfirmCard';\nimport PhoneConfirmCard from '../PhoneConfirmCard';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      maxWidth: 300,\n      margin: \"5px 5px\",\n\n    },\n    actionBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\ndeclare type CustomerContactConfirmPropsType = {\n  goToStep?: (step: CheckoutStepEnum) => void\n}\n\n/**\n * checkout: payment - customer basic info conform form  \n *\n * process:\n *\n *  1. display all user basic info\n *\n *  2. disabled all input \n *\n *  3. if the user want to edit, change stepper id to go back to 'customer basic informaiton' step.\n *\n **/\nconst CustomerContactConfirm: React.FunctionComponent<CustomerContactConfirmPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const selectedPhone = useSelector(mSelector.makeAuthSelectedPhoneSelector())\n  const shippingAddress = useSelector(mSelector.makeAuthShippingAddressSelector())\n  const billingAddress = useSelector(mSelector.makeAuthBillingAddressSelector())\n\n  return (\n    <Box component=\"div\">\n      <Grid\n        container\n        justify=\"center\"\n      >\n        <Grid\n          item\n          xs={12}\n          md={4}\n\n        >\n          <PhoneConfirmCard phone={selectedPhone} goToStep={props.goToStep} />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={4}\n        >\n          <AddressConfirmCard\n            address={shippingAddress}\n            headerIcon={<LocalShippingIcon />}\n            title={\"Shipping Address\"}\n            goToStep={props.goToStep}\n          />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={4}\n        >\n          <AddressConfirmCard\n            address={billingAddress}\n            headerIcon={<ReceiptIcon />}\n            title={\"Billing Address\"}\n            goToStep={props.goToStep}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  )\n}\n\nexport default CustomerContactConfirm\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CartItemTotal from 'components/common/CartItemTotal';\nimport { CheckoutStepEnum } from 'components/pages/Checkout';\nimport { CheckoutStepComponentPropsType } from 'components/pages/Checkout/checkoutSteps';\nimport { CartItemType } from 'domain/cart/types';\nimport { UserType } from 'domain/user/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { messageActions } from 'reducers/slices/app';\nimport { postOrderActionCreator } from 'reducers/slices/domain/order';\nimport { FetchStatusEnum, MessageTypeEnum } from 'src/app';\nimport { mSelector, rsSelector } from 'src/selectors/selector';\nimport { getNanoId } from 'src/utils';\nimport CartItemConfirmCard from './CartItemConfirmCard';\nimport CustomerBasicConfirm from './CustomerBasicConfirm';\nimport CustomerContactConfirm from './CustomerContactConfirm';\nimport { postOrderFetchStatusActions } from 'reducers/slices/app/fetchStatus/order';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    totalCost: {\n      alignSelf: \"end\",\n    }\n  }),\n);\n\ndeclare type FinalConfirmFormPropsType = {\n  user: UserType\n} & CheckoutStepComponentPropsType\n\n/**\n * checkout: finalconfirmform page \n *\n * process:\n *\n *  - display all information (customer information, selected products, and cost) \n *\n *  - integrate with Stripe Elements for the finalconfirmform\n *\n **/\nconst FinalConfirmForm: React.FunctionComponent<FinalConfirmFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch()\n\n  // cur OrderCriteria\n  const curOrderCriteria = useSelector(mSelector.makeOrderCriteriaSelector());\n\n  // selected cart item\n  const selectedCartItems = useSelector(mSelector.makeSelectedCartItemSelector());\n\n  // validation: basic info\n  const isValidCustomerBasicInfo = useSelector(mSelector.makeAuthValidateCustomerBasicInfoSelector())\n  const isValidCustomerShippingAddress = useSelector(mSelector.makeAuthValidateCustomerShippingAddressSelector())\n  const isValidCustomerBillingAddress = useSelector(mSelector.makeAuthValidateCustomerBillingAddressSelector())\n\n  // event handler to validate phone & addresses\n  const handleValidateClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    let result = true;\n    let message = \"\";\n\n    // validate basic info\n    if (!isValidCustomerBasicInfo) {\n      message = \"You are missing some of customer basic information.\"\n      result = false\n    }\n\n    // validate phone/shipping/billing address\n    if (!isValidCustomerBillingAddress || !isValidCustomerShippingAddress) {\n      message = \"You are missing some of customer contact information.\"\n      result = false\n    }\n\n    // validate cart items\n    if (selectedCartItems.length === 0) {\n      message = \"Please select product items to buy.\"\n      result = false\n    }\n\n    if (!result) {\n      messageActions.update({\n        id: getNanoId(),\n        type: MessageTypeEnum.ERROR,\n        message: message,\n      })\n      return false\n    }\n\n    // request client secret (Stripe) \n    dispatch(postOrderActionCreator(curOrderCriteria))\n\n  }\n\n  // wait for the request for stripe client to be done and based on the result, guide the customer to the payment page.\n  const curRequestStripeClientFetchStatus = useSelector(rsSelector.app.getPostOrderFetchStatus)\n  React.useEffect(() => {\n    if (curRequestStripeClientFetchStatus === FetchStatusEnum.SUCCESS) {\n      props.goToNextStep()\n    }\n  }, [\n    curRequestStripeClientFetchStatus \n  ])\n\n  // render current cart item\n  const renderCartItemConfirmCards: () => React.ReactNode = () => {\n    return selectedCartItems\n      .map((cartItem: CartItemType) => {\n        return (\n          <CartItemConfirmCard\n            value={cartItem}\n            key={cartItem.cartItemId}\n          />\n        )\n      })\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"h6\" component=\"h6\" align=\"left\" >\n          {\"Basic Information\"}\n        </Typography>\n        <CustomerBasicConfirm goToStep={props.goToStep} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"h6\" component=\"h6\" align=\"left\" >\n          {\"Contact Information\"}\n        </Typography>\n        <CustomerContactConfirm goToStep={props.goToStep} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n      >\n        <React.Fragment>\n          <Typography variant=\"h6\" component=\"h6\" align=\"left\" >\n            {\"Order Items\"}\n          </Typography>\n          {(selectedCartItems.length == 0 &&\n            <React.Fragment>\n              <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n                {\"Oops. You haven't selected any item in your cart.\"}\n              </Typography>\n              <Box>\n                <Button onClick={(e) => props.goToStep(CheckoutStepEnum.ORDER_ITEMS)}>\n                  {\"Go Back To Order Items Step\"}\n                </Button>\n              </Box>\n            </React.Fragment>\n          )}\n          {renderCartItemConfirmCards()}\n        </React.Fragment>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={6}\n        className={classes.totalCost}\n      >\n        <CartItemTotal />\n      </Grid>\n      <Box>\n        <Button onClick={handleValidateClick}>\n          {\"Final Confirm\"}\n        </Button>\n      </Box>\n    </Grid>\n  )\n}\n\nexport default FinalConfirmForm\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { CartItemType, CartItemCriteria } from 'domain/cart/types';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cartItemActions } from 'reducers/slices/domain/cartItem';\nimport { UserTypeEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport SampleSelfImage from 'static/self.jpeg';\nimport ColorCell from '../GridData/ColorCell';\nimport SizeCell from '../GridData/SizeCell';\n\n/**\n * need 'orderDetail' or 'product/variant'\n *\n **/\ninterface CartItemPropsType {\n  value: CartItemType\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(1)\n    },\n    card: {\n      /**\n       * need this one to make vertical scrollbar appears of the parent drawer.\n       **/\n\n\n      /**\n       * when small screen, the controller of a cart item moves to the next row, so need \"157px\".\n       *\n       * otherwise, it is single row, so need \"133px\".\n       **/\n      minHeight: \"157px\",\n\n      [theme.breakpoints.up('sm')]: {\n        minHeight: \"133px\",\n      }\n    },\n    cardHeader: {\n      width: \"100%\",\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    },\n    btnRoot: {\n      \"&:disabled\": {\n        color: \"#000\",\n      }\n    },\n    actionBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\n/**\n *  cart item component\n *\n *  - value (cart item) should contain a single variant of a specific product.\n **/\nconst CartItem: React.FunctionComponent<CartItemPropsType> = ({ value }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const dispatch = useDispatch()\n  // event handlers\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  /// qty change\n  const handleQtyIncrement: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    if (value.quantity < value.product.variants[0].variantStock) {\n\n      const nextCartItem = merge({}, value, { quantity: value.quantity + 1 })\n\n      if (auth.userType === UserTypeEnum.MEMBER) {\n        // put to replace the whole cart item \n        api.request({\n          method: 'PUT',\n          url: API1_URL + `/users/${auth.user.userId}/cartItems/${value.cartItemId}`,\n          data: {\n            cartItemId: nextCartItem.cartItemId,\n            isSelected: nextCartItem.isSelected,\n            quantity: nextCartItem.quantity,\n            userId: nextCartItem.user.userId,\n            variantId: nextCartItem.product.variants[0].variantId,\n          } as CartItemCriteria\n        }).then((data) => {\n\n          const updatedCartItem = data.data;\n\n          // update cart item in redux store \n          dispatch(cartItemActions.updateOne(updatedCartItem))\n\n          enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n        }).catch((error: AxiosError) => {\n          enqueueSnackbar(error.message, { variant: \"error\" })\n        })\n      } else {\n        // update cart item in redux store \n        dispatch(cartItemActions.updateOne(nextCartItem))\n      }\n\n    }\n  }\n\n  const handleQtyDecrement: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    if (value.quantity > 1) {\n\n      const nextCartItem = merge({}, value, { quantity: value.quantity - 1 })\n\n      if (auth.userType === UserTypeEnum.MEMBER) {\n        // put to replace the whole cart item \n        api.request({\n          method: 'PUT',\n          url: API1_URL + `/users/${auth.user.userId}/cartItems/${value.cartItemId}`,\n          data: {\n            cartItemId: nextCartItem.cartItemId,\n            isSelected: nextCartItem.isSelected,\n            quantity: nextCartItem.quantity,\n            userId: nextCartItem.user.userId,\n            variantId: nextCartItem.product.variants[0].variantId,\n          } as CartItemCriteria\n        }).then((data) => {\n\n          const updatedCartItem = data.data;\n\n          // update cart item in redux store \n          dispatch(cartItemActions.updateOne(updatedCartItem))\n\n          enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n        }).catch((error: AxiosError) => {\n          enqueueSnackbar(error.message, { variant: \"error\" })\n        })\n      } else {\n        // update cart item in redux store \n        dispatch(cartItemActions.updateOne(nextCartItem))\n      }\n    }\n  }\n\n  /// selection change\n  const handleSelectionChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    /**\n     * update selection  to redux and redux-saga\n     **/\n    const nextCartItem = merge({}, value, { isSelected: e.currentTarget.checked })\n\n    console.log(\"target cart item id: \" + value.cartItemId)\n\n    if (auth.userType === UserTypeEnum.MEMBER) {\n      // put to replace the whole cart item \n      api.request({\n        method: 'PUT',\n        url: API1_URL + `/users/${auth.user.userId}/cartItems/${value.cartItemId}`,\n        data: {\n            cartItemId: nextCartItem.cartItemId,\n            isSelected: nextCartItem.isSelected,\n            quantity: nextCartItem.quantity,\n            userId: nextCartItem.user.userId,\n            variantId: nextCartItem.product.variants[0].variantId,\n          } as CartItemCriteria\n      }).then((data) => {\n\n        const updatedCartItem = data.data;\n\n        console.log(updatedCartItem)\n\n        // update cart item in redux store \n        dispatch(cartItemActions.updateOne(updatedCartItem))\n\n        enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    } else {\n      // update cart item in redux store \n      dispatch(cartItemActions.updateOne(nextCartItem))\n    }\n  }\n\n  /// selection change\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    /**\n     * update selection  to redux and redux-saga\n     **/\n    if (auth.userType === UserTypeEnum.MEMBER) {\n      // put to replace the whole cart item \n      api.request({\n        method: 'DELETE',\n        url: API1_URL + `/users/${auth.user.userId}/cartItems/${value.cartItemId}`,\n      }).then((data) => {\n\n        // update cart item in redux store \n        dispatch(cartItemActions.delete(value))\n\n        enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    } else {\n      // update cart item in redux store \n      dispatch(cartItemActions.delete(value))\n    }\n  }\n\n  return (\n    <Card className={`${classes.card} ${classes.root}`}>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={<Avatar alt=\"\" src={SampleSelfImage} />}\n        title={value.product.productName}\n        subheader={`$${value.product.productBaseUnitPrice} NEED TO FIX`}\n      >\n      </CardHeader>\n      <CardActions>\n        <Grid\n          container\n          justify=\"space-between\"\n        >\n          <Box component=\"div\" className={classes.actionBox}>\n            <ColorCell value={value.product.variants[0].variantColor} />\n            <SizeCell value={value.product.variants[0].productSize.productSizeName} />\n          </Box>\n          <Box component=\"div\" className={classes.actionBox}>\n            <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n              <Button\n                onClick={handleQtyIncrement}\n                disabled={value.quantity === value.product.variants[0].variantStock}\n              >\n                <AddCircleIcon />\n              </Button>\n              <Button\n                disabled\n                classes={{\n                  /** this override default and 'disable' custom style. **/\n                  root: classes.btnRoot,\n                }}\n              >\n                {value.quantity}\n              </Button>\n              <Button\n                onClick={handleQtyDecrement}\n                disabled={value.quantity === 1}\n              >\n                <RemoveCircleIcon />\n              </Button>\n            </ButtonGroup>\n            <Switch\n              edge=\"end\"\n              onChange={handleSelectionChange}\n              checked={value.isSelected}\n              inputProps={{ 'aria-labelledby': 'switch-list-label-selected-cart-item' }}\n            />\n            <IconButton onClick={handleDeleteClick}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </Box>\n        </Grid>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default CartItem\n\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CartItem from 'components/common/CartItem';\nimport { CheckoutStepComponentPropsType } from 'components/pages/Checkout/checkoutSteps';\nimport { calcSubTotalPriceAmount } from 'domain/cart';\nimport { CartItemType } from 'domain/cart/types';\nimport { UserType } from 'domain/user/types';\nimport * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport Box from '@material-ui/core/Box';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { messageActions } from 'reducers/slices/app';\nimport { getNanoId } from 'src/utils';\nimport { MessageTypeEnum } from 'src/app';\nimport Switch from '@material-ui/core/Switch';\n\n/**\n * currently not used\n **/\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n  }),\n);\n\ndeclare type OrderItemFormPropsType = {\n  user: UserType\n} & CheckoutStepComponentPropsType\n\n/**\n * checkout: order items component\n *\n * process:\n *\n *  - display selected items and subtotal, tax, shipping fee, and total costo\n *\n *  - color, size, and quantity can be updated at this point\n *\n *    - color and size: implement at next version\n *\n **/\nconst OrderItemForm: React.FunctionComponent<OrderItemFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const cartItems = useSelector(mSelector.makeCartItemSelector())\n\n  const selectedCartItems = useSelector(mSelector.makeSelectedCartItemSelector())\n\n  // event handler to validate phone & addresses\n  const handleValidateClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    if (selectedCartItems.length == 0) {\n      dispatch(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: \"please select at least one product to buy.\",\n        }) \n      );\n    } else {\n      props.goToNextStep()\n    }\n  }\n\n  // render current cart item\n  const renderCartItems: () => React.ReactNode = () => {\n    return cartItems\n      .map((cartItem: CartItemType) => {\n        return (\n          <CartItem\n            value={cartItem}\n          />\n        )\n      })\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      {(cartItems.length === 0 &&\n        <Grid\n          item\n          xs={12}\n        >\n          <Typography variant=\"body2\" component=\"p\" align=\"center\" >\n            {\"Oops. Your cart is empty.\"}\n          </Typography>\n          <Box>\n            <Button component={RRLink} to={\"/search\"} >\n              {\"Search Products\"}\n            </Button>\n          </Box>\n        </Grid>\n      )}\n      {(cartItems.length > 0 &&\n        <React.Fragment>\n          <Grid\n            item\n            xs={12}\n            md={6}\n          >\n            <Typography variant=\"subtitle2\" component=\"p\" align=\"left\" gutterBottom >\n              you purchase only selected items e.g., \n            <Switch\n              edge=\"end\"\n              readOnly\n              checked={true}\n              inputProps={{ 'aria-labelledby': 'switch-list-label-selected-cart-item' }}\n              size=\"small\"\n            />\n            </Typography>\n            {renderCartItems()}\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={6}\n          >\n            <Typography variant=\"h6\" component=\"h3\" align=\"right\" gutterBottom>\n              SubTotal: $<b>{calcSubTotalPriceAmount(selectedCartItems)}</b>\n            </Typography>\n            <Typography variant=\"caption\" component=\"p\" align=\"right\" color=\"textSecondary\" gutterBottom >\n              * total cost included tax and shipping costs are available at next step.\n            </Typography>\n          </Grid>\n        </React.Fragment>\n      )}\n      <Grid\n        item\n        xs={12}\n      >\n        <Button onClick={(e) => props.goToPrevStep()}>\n          {\"Previous\"}\n        </Button>\n        <Button onClick={handleValidateClick}>\n          {\"Confirm\"}\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default OrderItemForm\n","import Step from '@material-ui/core/Step';\nimport StepContent from '@material-ui/core/StepContent';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Stepper from '@material-ui/core/Stepper';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CustomerBasicForm from 'components/common/Checkout/CustomerBasicForm';\nimport CustomerContactForm from 'components/common/Checkout/CustomerContactForm';\nimport Payment from 'components/common/Checkout/Payment';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { mSelector, rsSelector } from 'src/selectors/selector';\nimport FinalConfirmForm from 'components/common/Checkout/FinalConfirmForm';\nimport Button from '@material-ui/core/Button';\nimport OrderItemForm from 'components/common/Checkout/OrderItemForm';\nimport { postSessionTimeoutOrderEventActionCreator } from 'reducers/slices/domain/order';\nimport { FetchStatusEnum } from 'src/app';\nimport { resetCheckoutStateActionCreator } from 'reducers/slices/common';\nimport { putAuthFetchStatusActions } from 'reducers/slices/app/fetchStatus/auth';\n\nexport enum CheckoutStepEnum {\n  CUSTOMER_BASIC_INFORMATION = 0,\n  CUSTOMER_CONTACT_INFORMATION = 1,\n  ORDER_ITEMS = 2,\n  FINAL_CONFIRM = 3,\n  PAYMENT = 4,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n  }),\n);\n\n/**\n * checkout page\n *\n *  - popup if user is not logged in\n **/\nconst Checkout: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  /**\n   * steps:\n   *  0: customer basic information\n   *  1: customer contact information\n   *  2: final confirmation\n   *  3: payment\n   **/\n  const [activeStep, setActiveStep] = React.useState<CheckoutStepEnum>(CheckoutStepEnum.CUSTOMER_BASIC_INFORMATION);\n\n  // step event handlers\n\n  const goToStep: (step: CheckoutStepEnum) => void = (step) => {\n    setActiveStep(step);\n  }\n\n  const goToNextStep: () => void = () => {\n    setActiveStep((prev: CheckoutStepEnum) => (prev.valueOf() + 1 as CheckoutStepEnum))\n  }\n\n  const goToPrevStep: () => void = () => {\n    setActiveStep((prev: CheckoutStepEnum) => (prev.valueOf() - 1 as CheckoutStepEnum))\n  }\n\n  const dispatch = useDispatch()\n\n  /**\n   * session time out stuff.\n   *\n   * if the customer does not finsih payment in CHECKOUT_SESSION_TIMEOUT, we cancel the final confirm and make the customer start over again. just click the final confirm again though.\n   *\n   * - this is because to prevent the customer occupies the product stock and make it avaible to the other customers.\n   *\n   **/\n  const curCheckoutOrder = useSelector(rsSelector.domain.getCheckoutOrder);\n\n  const handleSessionTimeout = () => {\n\n    dispatch(\n      postSessionTimeoutOrderEventActionCreator({\n        orderId: curCheckoutOrder.orderId,\n        orderNumber: curCheckoutOrder.orderNumber,\n      })\n    );\n\n    // if timeout, get the customer back to final confirm section.\n    setActiveStep(CheckoutStepEnum.CUSTOMER_BASIC_INFORMATION)\n  }\n\n  const sessionTime: number = parseInt(CHECKOUT_SESSION_TIMEOUT)\n  const curPostOrderFetchStatus = useSelector(rsSelector.app.getPostOrderFetchStatus);\n  // add flag to make sure the sessiontimeout only sent once\n  const isSessionTimeoutSent = React.useRef<boolean>(false);\n  let timer: ReturnType<typeof setTimeout>;\n\n  React.useEffect(() => {\n\n\n    if (!isSessionTimeoutSent.current && curCheckoutOrder && curPostOrderFetchStatus === FetchStatusEnum.SUCCESS) {\n      timer = setTimeout(handleSessionTimeout, sessionTime)\n\n      isSessionTimeoutSent.current = true;\n\n      // don't forget to cancel timer.\n      return () => {\n        clearTimeout(timer);\n      }\n    }\n\n  }, [\n      curPostOrderFetchStatus,\n      JSON.stringify(curCheckoutOrder),\n    ])\n\n  // reset session timeout if payment has done regardless of the result.\n  // the above useEffect cancel the timer if this component is unmounted (e.g., payment succeeded and redirected to another page).\n  // but if payment failed and the customer want to try one more time, we need to reset session timeout and use it again.\n  const [isPaymentAttempt, setPaymentAttempt] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    \n    if (isPaymentAttempt) {\n\n      console.log(\"make sure this is called after payment done.\")\n\n      // reset variables after payment attempt\n      clearTimeout(timer);\n      isSessionTimeoutSent.current = false;\n\n      // finally set this back to false again for the next payment attempt\n      setPaymentAttempt(false);\n\n    }\n  }, [\n    isPaymentAttempt \n  ])\n\n  // reset fetch status which affect validating the current section.\n  // this is necessary since the customer might come back to the specific section again and again.\n  // every time the customer come back, we need to reset the previous state.\n  React.useEffect(() => {\n\n    // you only need to reset if fetch status which affect validation to the next step.\n    // ex) \n    /**\n     * // if member, we need to make sure the request (update) succeeded or not. if yes, they can go next.\n     * const curPutAuthFetchStatus = useSelector(rsSelector.app.getPutAuthFetchStatus);\n     * React.useEffect(() => {\n     *   if (curPutAuthFetchStatus === FetchStatusEnum.SUCCESS) {\n     *     props.goToNextStep();\n     *   }\n     *   return () => {\n     *     // reset fetch status in the case where the other component needs this.\n     *     dispatch(\n     *       putAuthFetchStatusActions.clear()\n     *     )\n     *   }\n     * }, [])\n     **/\n    dispatch(\n      putAuthFetchStatusActions.clear() \n    )\n  \n  }, [\n    activeStep \n  ])\n\n  // if the customer abort (e.g., go to another page) during payment section, we need to reset the checkout state\n  /**\n   * currently, this action (resetCheckoutStatus) is caught by following case reducers:\n   *\n      - stripeClientSecretActions\n      - checkoutOrderActions\n      - postOrderFetchStatusActions\n   *\n   *\n   **/\n  React.useEffect(() => {\n  \n    // unmount only\n    return () => {\n      dispatch(\n        resetCheckoutStateActionCreator() \n      )\n    }\n  }, [\n  \n  ])\n\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Checkout\"}\n      </Typography>\n      {/** customer basic info **/}\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        <Step >\n          <StepLabel>{\"Customer Basic Information\"}</StepLabel>\n          <StepContent>\n            <CustomerBasicForm\n              goToNextStep={goToNextStep}\n              goToPrevStep={goToPrevStep}\n              goToStep={goToStep}\n              user={auth.user}\n            />\n            {(NODE_ENV === 'development' &&\n              <React.Fragment>\n                <Button onClick={(e) => goToStep(CheckoutStepEnum.FINAL_CONFIRM)}>Final Conform</Button>\n                <Button onClick={(e) => goToStep(CheckoutStepEnum.ORDER_ITEMS)}>Order Items</Button>\n                <Button onClick={(e) => goToStep(CheckoutStepEnum.PAYMENT)}>Payment</Button>\n              </React.Fragment>\n            )}\n          </StepContent>\n        </Step>\n        {/** customer contact info **/}\n        <Step >\n          <StepLabel>{\"Customer Contact Information\"}</StepLabel>\n          <StepContent>\n            <CustomerContactForm\n              goToNextStep={goToNextStep}\n              goToPrevStep={goToPrevStep}\n              goToStep={goToStep}\n              user={auth.user}\n            />\n          </StepContent>\n        </Step>\n        <Step >\n          <StepLabel>{\"Order Items\"}</StepLabel>\n          <StepContent>\n            <OrderItemForm\n              goToNextStep={goToNextStep}\n              goToPrevStep={goToPrevStep}\n              goToStep={goToStep}\n              user={auth.user}\n            />\n          </StepContent>\n        </Step>\n        <Step >\n          <StepLabel>{\"Final Confirm\"}</StepLabel>\n          <StepContent>\n            <FinalConfirmForm\n              goToNextStep={goToNextStep}\n              goToPrevStep={goToPrevStep}\n              goToStep={goToStep}\n              user={auth.user}\n            />\n          </StepContent>\n        </Step>\n        <Step >\n          <StepLabel>{\"Payment\"}</StepLabel>\n          <StepContent>\n            <Payment\n              setPaymentAttempt={setPaymentAttempt}\n              goToNextStep={goToNextStep}\n              goToPrevStep={goToPrevStep}\n              goToStep={goToStep}\n              user={auth.user}\n            />\n          </StepContent>\n        </Step>\n      </Stepper>\n    </React.Fragment>\n  )\n}\n\nexport default Checkout\n\n\n","import * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport HeroBCImage from 'static/sample-hero-background-19-7-overlay.jpg'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    wrapperBox: {\n      position: \"relative\",\n    },\n    heroImage: {\n      width: \"100%\", \n      zIndex: -1,\n    },\n    textBox: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  }),\n);\n\nconst Hero: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Box component=\"div\" className={classes.wrapperBox}>\n      <img src={HeroBCImage} className={classes.heroImage} alt=\"stsDev Hero Image\" />\n      <Box component=\"div\" className={classes.textBox} >\n        <Typography variant=\"h2\" component=\"h2\" align=\"center\">\n          {\"stsDev\"}\n        </Typography>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Hero\n\n\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport SampleProduct1_1Image from 'static/sample-product-1-1.jpg';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport { ProductType } from 'domain/product/types';\nimport { cadCurrencyFormat } from 'src/utils';\nimport { Link as RRLink } from \"react-router-dom\";\n\ninterface ProductCardPropsType {\n  product: ProductType\n}\n\n/**\n * make card actions align bottom to look nice esp when each card height is different.\n *\n * - ref: https://stackoverflow.com/questions/52669681/align-card-buttons-on-bottom-material-ui\n *\n * - parent:position:relative and child:position:absolute does not work!!\n *\n * - use parent:flex and child:marginXXX:auto\n *\n **/\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      height: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n\n      marginTop: \"auto\",\n    },\n    cardContent: {\n    },\n    media: {\n      // aspect ratio: 1:1\n      height: 0,\n      paddingTop: '100%',\n      marginTop: '30'\n    }\n  }),\n);\n\nconst ProductCard: React.FunctionComponent<ProductCardPropsType> = ({ product }) => {\n\n  const classes = useStyles();\n\n  /**\n   * what is difference btw <CardActionArea> and <CardActions>\n   **/\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        // the first product image is the main one\n        image={(product.productImages.length > 0) ? product.productImages[0].productImagePath : \"\"}\n      />\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {product.category.categoryName}\n        </Typography>\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\n          {product.productName}\n        </Typography>\n        <Typography variant=\"h6\" align=\"right\" color=\"primary\" component=\"p\">\n          {/** \n            TODO: need to domain function to select cheapest price via product variant \n               or you can create a property in backend DTO so that you don't need to calculate in front-end \n            **/}\n          <b>${cadCurrencyFormat(product.productBaseUnitPrice)}</b>\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button component={RRLink} to={`/products/${product.productPath}`}>\n          Read More\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default ProductCard\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { ProductType } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { mSelector } from 'src/selectors/selector';\nimport ProductCard from '../ProductCard';\nimport { fetchPublicProductActionCreator } from 'reducers/slices/domain/product';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    section: {\n      // need to set this. otherwise, <Grid spacing={x}> causes overflow horizontally.\n      // ref: https://material-ui.com/components/grid/#limitations\n      overflow: \"hidden\",\n      padding: theme.spacing(0, 1, 0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    item: {\n    },\n    moreBtnBox: {\n      margin: theme.spacing(3),\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n  }),\n);\n\nconst BrandNewProduct: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curDomains = useSelector(mSelector.makeProductWithoutCacheSelector())\n\n  // fetch new blogs only once\n  React.useEffect(() => {\n    dispatch(fetchPublicProductActionCreator())\n  }, [])\n\n  const renderDomains: () => React.ReactNode = () => {\n    return curDomains.map((product: ProductType) => {\n      return (\n        <Grid\n          item\n          xs={12}\n          sm={6}\n          md={3}\n          className={classes.item}\n          key={product.productId}\n        >\n          <ProductCard product={product} />\n        </Grid>\n      )\n    });\n  }\n\n  return (\n    <Box component=\"section\" className={classes.section} >\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Brand New\"}\n      </Typography>\n      <Grid\n        container\n        spacing={2}\n        justify=\"center\"\n      >\n        {(curDomains.length === 0 &&\n          <Typography variant=\"body1\" component=\"p\" align=\"center\" >\n            {\"No Available Products For Now.\"}\n          </Typography>\n        )}\n        {renderDomains()}\n      </Grid>\n      <Box component=\"div\" className={classes.moreBtnBox}>\n        <Button component={RRLink} to={`/search`}>\n          More Brad New Products\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default BrandNewProduct\n\n\n\n","import Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport SampleProduct1_1Image from 'static/sample-product-1-1.jpg';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      display: \"flex\",\n      flexWrap: \"nowrap\"\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    }\n  }),\n);\n\nconst CategoryCard: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * what is difference btw <CardActionArea> and <CardActions>\n   **/\n\n  return (\n    <Card className={classes.card}>\n      <CardMedia\n        className={classes.media}\n        image={SampleProduct1_1Image}\n      />\n      <Box component=\"div\" className={classes.details}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Category Name\n          </Typography>\n          <Typography variant=\"body2\" color=\"primary\" component=\"p\">\n            Category Description\n          </Typography>\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <Button>\n            Read More\n          </Button>\n        </CardActions>\n      </Box>\n    </Card>\n  )\n}\n\nexport default CategoryCard\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport CategoryCard from '../CategoryCard';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    section: {\n      // need to set this. otherwise, <Grid spacing={x}> causes overflow horizontally.\n      // ref: https://material-ui.com/components/grid/#limitations\n      overflow: \"hidden\",\n      padding: theme.spacing(0, 1, 0, 1),\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    item: {\n    },\n    moreBtnBox: {\n      margin: theme.spacing(3),\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n  }),\n);\n\nconst CategoryList: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * TODO: replace test category with real one \n   *\n   **/\n\n  return (\n    <Box component=\"section\" className={classes.section} >\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Categories\"}\n      </Typography>\n      <Grid \n        container\n        spacing={2}\n        justify=\"center\"\n      >\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={4}\n          className={classes.item} \n        >\n          <CategoryCard />\n        </Grid>\n      </Grid>\n      <Box component=\"div\" className={classes.moreBtnBox}>\n        <Button>\n          More Categories \n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default CategoryList\n\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { useValidation } from 'hooks/validation';\nimport { forgotPasswordSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport declare type ForgotPasswordDataType = {\n  email: string\n}\n\nconst defaultForgotPasswordData: ForgotPasswordDataType = {\n  email: \"\",\n}\n\nexport declare type ForgotPasswordValidationDataType = {\n  email?: string\n}\n\nconst defaultForgotPasswordValidationData: ForgotPasswordValidationDataType = {\n  email: \"\",\n}\n\n\n\ndeclare type ForgotPasswordDialogPropsType = {\n  curFormOpen: boolean\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    dialog: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    dialogPaper: {\n      width: 240,\n    },\n    dialogContentRoot: {\n      padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n    },\n    formInput: {\n      width: \"100%\",\n    }\n  }),\n);\n\nconst ForgotPasswordDialog: React.FunctionComponent<ForgotPasswordDialogPropsType> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const classes = useStyles();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // forgot password state\n  const [curForgotPasswordState, setForgotPasswordState] = React.useState<ForgotPasswordDataType>(defaultForgotPasswordData);\n\n  // validation logic (should move to hooks)\n  const [curForgotPasswordValidationState, setForgotPasswordValidationState] = React.useState<ForgotPasswordValidationDataType>(defaultForgotPasswordValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curForgotPasswordState,\n    curValidationDomain: curForgotPasswordValidationState,\n    schema: forgotPasswordSchema,\n    setValidationDomain: setForgotPasswordValidationState,\n    defaultValidationDomain: defaultForgotPasswordValidationData,\n  })\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setForgotPasswordState((prev: ForgotPasswordDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const toggleDialog = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    props.setFormOpen(nextOpen);\n  }\n\n  const handleSubmitClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    const isValid: boolean = isValidSync(curForgotPasswordState)\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/forgot-password`,\n        data: curForgotPasswordState,\n      }).then((data) => {\n        enqueueSnackbar(\"Please check your email box.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        /**\n         * we not gonna display if the email is exist or not to avoid user enumeration attack.\n         **/\n        enqueueSnackbar(\"Please check your email box.\", { variant: \"success\" })\n      })\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  // render nav items\n  return (\n    <Dialog open={props.curFormOpen} onClose={toggleDialog(false)} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Forgot Your Password?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Please enter your registered email address. We will send an email to reset password. \n        </DialogContentText>\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          className={classes.formInput}\n          value={curForgotPasswordState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curForgotPasswordValidationState.email}\n          error={curForgotPasswordValidationState.email !== \"\"}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmitClick} color=\"primary\">\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default ForgotPasswordDialog\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { AxiosError } from 'axios';\nimport ForgotPasswordDialog from 'components/common/ForgotPasswordDialog';\nimport { api } from 'configs/axiosConfig';\nimport { UserType } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { memberLoginSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions } from 'reducers/slices/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { useHistory } from 'react-router';\n\nexport declare type MemberLoginDataType = {\n  email: string\n  password: string\n}\n\nconst defaultMemberLoginData: MemberLoginDataType = {\n  email: \"\",\n  password: \"\",\n}\n\nif (NODE_ENV !== \"production\") {\n  defaultMemberLoginData.email = \"test_member1@test.com\"\n  defaultMemberLoginData.password = \"test_password\"\n}\n\nexport declare type MemberLoginValidationDataType = {\n  email?: string\n  password?: string\n}\n\nconst defaultMemberLoginValidationData: MemberLoginValidationDataType = {\n  email: \"\",\n  password: \"\",\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      maxWidth: 500,\n      width: \"80%\",\n      margin: \"20px auto\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      width: \"80%\",\n      margin: theme.spacing(2),\n    },\n    forgetPasswordBox: {\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(2, 0, 2, 0),\n    },\n    cursorLink: {\n      cursor: \"pointer\",\n    }\n  }),\n);\n\nconst Login: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n  \n  // dispatch\n  const dispatch = useDispatch();\n\n  // history \n  const history = useHistory();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // redirect to previous url if exist\n  const curPreviousUrl = useSelector(mSelector.makePreviousUrlSelector());\n\n  // forgot password dialog\n  const [curForgotPasswordDialogOpen, setForgotPasswordDialogOpen] = React.useState<boolean>(false);\n\n  // temp user account state\n  const [curMemberLoginState, setMemberLoginState] = React.useState<MemberLoginDataType>(defaultMemberLoginData);\n\n  // validation logic (should move to hooks)\n  const [curMemberLoginValidationState, setMemberLoginValidationState] = React.useState<MemberLoginValidationDataType>(defaultMemberLoginValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curMemberLoginState,\n    curValidationDomain: curMemberLoginValidationState,\n    schema: memberLoginSchema,\n    setValidationDomain: setMemberLoginValidationState,\n    defaultValidationDomain: defaultMemberLoginValidationData,\n  })\n\n  // event handlers\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setMemberLoginState((prev: MemberLoginDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setMemberLoginState((prev: MemberLoginDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  // event handler for forgot password link click\n  const handleForgotPasswordClick: React.EventHandler<React.MouseEvent<HTMLAnchorElement>> = (e) => {\n    setForgotPasswordDialogOpen(true);\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curMemberLoginState)\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/authenticate`,\n        data: curMemberLoginState,\n        headers: {\"Content-Type\": \"application/json\"}\n      }).then((data) => {\n        /**\n         * login success\n         **/\n        const loggedInUser: UserType = data.data.user;\n        dispatch(authActions.loginWithUser(loggedInUser))\n\n        // make sure this work.\n        // this does not work esp when there is no previous url.\n        //\n        // solution: to use redux state to store the previous url.\n        //history.back(); \n        \n        let nextDest = \"/\"\n        \n        if (curPreviousUrl) {\n          nextDest = curPreviousUrl\n        }\n\n        /**\n         * don't confused with 'history' (window) and 'history' (react-router-dom)\n         *\n         * window: history.pushState()\n         *\n         * react-router-dom: history.push() <- use this one.\n         *\n         **/\n        history.push(nextDest);\n\n        enqueueSnackbar(\"logged in successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      direction=\"column\"\n      className={classes.box}\n    >\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"login-logo\">\n        <SentimentSatisfiedOutlinedIcon />\n      </IconButton>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Login\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          className={classes.formControl}\n          value={curMemberLoginState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curMemberLoginValidationState.email}\n          error={curMemberLoginValidationState.email !== \"\"}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curMemberLoginState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curMemberLoginValidationState.password}\n          error={curMemberLoginValidationState.password !== \"\"}\n        />\n        <Box component=\"div\" className={classes.forgetPasswordBox} >\n          <Typography variant=\"body2\" component=\"p\">\n            <Link onClick={handleForgotPasswordClick} className={classes.cursorLink}>\n              forget your password?\n            </Link>\n          </Typography>\n        </Box>\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleUserAccountSaveClickEvent}>\n            Login\n          </Button>\n        </Box>\n      </form>\n      <ForgotPasswordDialog \n        curFormOpen={curForgotPasswordDialogOpen}  \n        setFormOpen={setForgotPasswordDialogOpen}\n      />\n    </Grid>\n  )\n}\n\nexport default Login\n\n\n","import { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport Slide from '@material-ui/core/Slide';\nimport Paper from '@material-ui/core/Paper';\nimport { ProductImageType } from 'domain/product/types';\nimport SwipeableViews from 'react-swipeable-views';\nimport { autoPlay } from 'react-swipeable-views-utils';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    img: {\n      width: \"100%\",\n    }\n  }),\n);\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\n\ninterface CarouselPropsType {\n  items: ProductImageType[]\n}\n\n/**\n * carousel component \n *\n *  - dependency: mui only\n *\n *  - currently using 'react-slick' but use 'Stepper' in material ui\n *\n *  ref: https://material-ui.com/components/steppers/#text-with-carousel-effect\n *\n *  - or fix layout issue of 'react-slick' when iamge is full wide at small screen size\n *\n **/\nconst Carousel: React.FunctionComponent<CarouselPropsType> = ({ items }) => {\n\n  const classes = useStyles();\n\n  const length = items.length\n  const [curCheckBox, setCheckBox] = React.useState<number>(0)\n\n  const theme = useTheme();\n\n  const handleNext = () => {\n    setCheckBox((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setCheckBox((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStepChange = (step: number) => {\n    setCheckBox(step);\n  };\n\n  const renderItems: () => React.ReactNode = () => {\n    return items.map((item: ProductImageType, index: number) => {\n      return (\n        <div key={item.productImageId}>\n            {Math.abs(curCheckBox - index) <= 2 ? (\n              <img className={classes.img} src={item.productImagePath} />\n            ) : null}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n      <AutoPlaySwipeableViews\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n        index={curCheckBox}\n        onChangeIndex={handleStepChange}\n        enableMouseEvents\n      >\n        {renderItems()}\n      </AutoPlaySwipeableViews>\n      <MobileStepper\n        steps={length}\n        position=\"static\"\n        variant=\"text\"\n        activeStep={curCheckBox}\n        nextButton={\n          <Button size=\"small\" onClick={handleNext} disabled={curCheckBox === length - 1}>\n            Next\n            {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n          </Button>\n        }\n        backButton={\n          <Button size=\"small\" onClick={handleBack} disabled={curCheckBox === 0}>\n            {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            Back\n          </Button>\n        }\n      />\n    </div>\n  )\n}\n\nexport default Carousel\n\n\n\n\n","import Radio, { RadioProps } from '@material-ui/core/Radio';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport ColorCell from 'components/common/GridData/ColorCell';\nimport { ProductVariantSizeType } from 'domain/product/types';\nimport * as React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n  }),\n);\n\ninterface ColorRadioPropsType {\n  color: string\n} \n\n/**\n * product page \n *\n *  - steps\n *\n *    0: fetch the product detail from api\n *\n *    1: display a given product detail including its variants\n *\n *    2: a user select a specific variant (color, size) and its quantity\n *\n *    3: add to cart / checkout\n *\n *\n **/\nconst ColorRadio: React.FunctionComponent<RadioProps> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <Radio\n      disableRipple\n      color=\"default\"\n      checkedIcon={<ColorCell value={props.value as string} checked />} \n      icon={<ColorCell value={props.value as string} />}\n      {...props}\n    />\n  )\n}\n\nexport default ColorRadio\n\n\n\n\n","import { ProductType, ProductVariantType, ProductVariantSizeType } from \"./types\";\nimport uniq from 'lodash/uniq';\nimport cloneDeep from 'lodash/cloneDeep';\n\n/**\n * domain behaviors\n *\n **/\nexport function filterUniqueVariantColors(product: ProductType): string[] {\n  return uniq(product.variants.map((variant: ProductVariantType) => {\n    return variant.variantColor\n  }))\n}\n\n\nexport function filterUniqueVariantSizes(product: ProductType): ProductVariantSizeType[] {\n  return uniq(product.variants.map((variant: ProductVariantType) => {\n    return variant.productSize\n  }))\n}\n\nexport function isExceedStock(amount: number, variantId: string, product: ProductType): boolean {\n  const targetVariant = product.variants.find((variant: ProductVariantType) => variant.variantId == variantId);\n\n  return amount > targetVariant.variantStock\n}\n\n// return the filtered variant as array\n/**\n * use this when creating cartItem/wishlistItem.\n *\n * the product object of these entities required to filter product variants so that it contains only selected variant.\n *\n * return new filtered product object.\n *\n **/\nexport function filterSingleVariant(variantId: string, product: ProductType): ProductType {\n  const tempProduct = cloneDeep(product)\n  tempProduct.variants = product.variants.filter((variant: ProductVariantType) => variant.variantId == variantId);\n  return tempProduct;\n}\n","import { createAction, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ProductType } from \"domain/product/types\";\nimport { WishlistItemCriteria, WishlistItemSortEnum, WishlistItemType } from \"domain/wishlist/types\";\nimport remove from 'lodash/remove';\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request\n//export declare type FetchWishlistItemActionType = WishlistItemQueryStringCriteria\nexport const fetchWishlistItemActionCreator = createAction(\"saga/domain/wishlistItem/fetch\")\nexport const fetchWishlistItemActionTypeName = fetchWishlistItemActionCreator().type\n\n// for POST (add a new wishlist item) request\nexport declare type PostWishlistItemActionType = WishlistItemCriteria & { product: ProductType }\nexport const postWishlistItemActionCreator = createAction<PostWishlistItemActionType>(\"saga/domain/wishlistItem/post\")\nexport const postWishlistItemActionTypeName = postWishlistItemActionCreator().type\n\n// for PATCH (add a new wishlist item) request\nexport declare type PatchWishlistItemActionType = { wishlistItemId: string }\nexport const patchWishlistItemActionCreator = createAction<PatchWishlistItemActionType>(\"saga/domain/wishlistItem/patch\")\nexport const patchWishlistItemActionTypeName = patchWishlistItemActionCreator().type\n\n// for DELETE (delete single wishlist item) request\nexport declare type DeleteSingleWishlistItemActionType = { wishlistItemId: string } \nexport const deleteSingleWishlistItemActionCreator = createAction<DeleteSingleWishlistItemActionType>(\"saga/domain/wishlistItem/deleteSingle\")\nexport const deleteSingleWishlistItemActionTypeName = deleteSingleWishlistItemActionCreator().type\n\n// for DELETE (delete all of wishlist items) request\nexport const deleteWishlistItemActionCreator = createAction(\"saga/domain/wishlistItem/delete\")\nexport const deleteWishlistItemActionTypeName = deleteWishlistItemActionCreator().type\n\n/**\n *\n * domain.wishlistItems state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemActionType = PayloadAction<WishlistItemType[]> \n\nexport const wishlistItemSlice = createSlice({ \n  name: \"domain/wishlistItem\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when update existing one (only apply for array: don't use for object)\n    updateOne: (state: WishlistItemType[], action: PayloadAction<WishlistItemType>) => {\n      return state.map((domain: WishlistItemType) => {\n        if (domain.wishlistItemId === action.payload.wishlistItemId) {\n          return action.payload\n        }\n        return domain\n      })\n    },\n\n    // use when you want to replace\n    update: (state: WishlistItemType[], action: WishlistItemActionType) => action.payload,\n\n    // use when you want to remove a single entity\n    delete: (state: WishlistItemType[], action: PayloadAction<string>) => {\n      remove(state, (wishlistItem: WishlistItemType) => wishlistItem.wishlistItemId == action.payload)\n      return state\n    },\n\n    clear: (state: WishlistItemType[]) => [],\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemSliceReducer = wishlistItemSlice.reducer\nexport const wishlistItemActions = wishlistItemSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.searchQuery state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQuerySearchQueryActionType = PayloadAction<string> \n\nexport const wishlistItemQuerySearchQuerySlice = createSlice({ \n  name: \"domain/wishlistItems/query/searchQuery\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQuerySearchQueryActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQuerySearchQuerySliceReducer = wishlistItemQuerySearchQuerySlice.reducer\nexport const wishlistItemQuerySearchQueryActions = wishlistItemQuerySearchQuerySlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.categoryId state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryCategoryIdActionType = PayloadAction<string> \n\nexport const wishlistItemQueryCategoryIdSlice = createSlice({ \n  name: \"domain/wishlistItems/query/categoryId\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryCategoryIdActionType) => action.payload,\n    clear: (state: string) => \"\",\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryCategoryIdSliceReducer = wishlistItemQueryCategoryIdSlice.reducer\nexport const wishlistItemQueryCategoryIdActions = wishlistItemQueryCategoryIdSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.minPrice state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryMinPriceActionType = PayloadAction<number> \n\nexport const wishlistItemQueryMinPriceSlice = createSlice({ \n  name: \"domain/wishlistItems/query/minPrice\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryMinPriceActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryMinPriceSliceReducer = wishlistItemQueryMinPriceSlice.reducer\nexport const wishlistItemQueryMinPriceActions = wishlistItemQueryMinPriceSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.maxPrice state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryMaxPriceActionType = PayloadAction<number> \n\nexport const wishlistItemQueryMaxPriceSlice = createSlice({ \n  name: \"domain/wishlistItems/query/maxPrice\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryMaxPriceActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryMaxPriceSliceReducer = wishlistItemQueryMaxPriceSlice.reducer\nexport const wishlistItemQueryMaxPriceActions = wishlistItemQueryMaxPriceSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.reviewPoint state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryReviewPointActionType = PayloadAction<number> \n\nexport const wishlistItemQueryReviewPointSlice = createSlice({ \n  name: \"domain/wishlistItems/query/reviewPoint\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryReviewPointActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryReviewPointSliceReducer = wishlistItemQueryReviewPointSlice.reducer\nexport const wishlistItemQueryReviewPointActions = wishlistItemQueryReviewPointSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.isDiscount state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryIsDiscountActionType = PayloadAction<boolean> \n\nexport const wishlistItemQueryIsDiscountSlice = createSlice({ \n  name: \"domain/wishlistItems/query/isDiscount\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryIsDiscountActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryIsDiscountSliceReducer = wishlistItemQueryIsDiscountSlice.reducer\nexport const wishlistItemQueryIsDiscountActions = wishlistItemQueryIsDiscountSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.startDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryStartDateActionType = PayloadAction<Date> \n\nexport const wishlistItemQueryStartDateSlice = createSlice({ \n  name: \"domain/wishlistItems/query/startDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryStartDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryStartDateSliceReducer = wishlistItemQueryStartDateSlice.reducer\nexport const wishlistItemQueryStartDateActions = wishlistItemQueryStartDateSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.endDate state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQueryEndDateActionType = PayloadAction<Date> \n\nexport const wishlistItemQueryEndDateSlice = createSlice({ \n  name: \"domain/wishlistItems/query/endDate\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQueryEndDateActionType) => action.payload,\n    clear: (state: string) => null,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQueryEndDateSliceReducer = wishlistItemQueryEndDateSlice.reducer\nexport const wishlistItemQueryEndDateActions = wishlistItemQueryEndDateSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.query.sort state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemQuerySortActionType = PayloadAction<WishlistItemSortEnum> \n\nexport const wishlistItemQuerySortSlice = createSlice({ \n  name: \"domain/wishlistItems/query/sort\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemQuerySortActionType) => action.payload,\n    clear: (state: string) => WishlistItemSortEnum.DATE_DESC,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemQuerySortSliceReducer = wishlistItemQuerySortSlice.reducer\nexport const wishlistItemQuerySortActions = wishlistItemQuerySortSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.pagination.page state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemPaginationPageActionType = PayloadAction<number> \n\nexport const wishlistItemPaginationPageSlice = createSlice({ \n  name: \"domain/wishlistItems/pagination/page\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemPaginationPageActionType) => action.payload,\n    clear: (state: string) => 0, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemPaginationPageSliceReducer = wishlistItemPaginationPageSlice.reducer\nexport const wishlistItemPaginationPageActions = wishlistItemPaginationPageSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.pagination.limit state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemPaginationLimitActionType = PayloadAction<number> \n\nexport const wishlistItemPaginationLimitSlice = createSlice({ \n  name: \"domain/wishlistItems/pagination/limit\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemPaginationLimitActionType) => action.payload,\n    clear: (state: string) => 20,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemPaginationLimitSliceReducer = wishlistItemPaginationLimitSlice.reducer\nexport const wishlistItemPaginationLimitActions = wishlistItemPaginationLimitSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.pagination.totalPages state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemPaginationTotalPagesActionType = PayloadAction<number> \n\nexport const wishlistItemPaginationTotalPagesSlice = createSlice({ \n  name: \"domain/wishlistItems/pagination/totalPages\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: string, action: WishlistItemPaginationTotalPagesActionType) => action.payload,\n    clear: (state: string) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemPaginationTotalPagesSliceReducer = wishlistItemPaginationTotalPagesSlice.reducer\nexport const wishlistItemPaginationTotalPagesActions = wishlistItemPaginationTotalPagesSlice.actions\n\n\n/**\n *\n * domain.wishlistItems.pagination.totalElements state Slice (no side effects)\n *\n **/\n// action type             \nexport type WishlistItemPaginationTotalElementsActionType = PayloadAction<number> \n\nexport const wishlistItemPaginationTotalElementsSlice = createSlice({ \n  name: \"domain/wishlistItems/pagination/totalElements\", // a name used in action type\n  initialState: 0,        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: number, action: WishlistItemPaginationTotalElementsActionType) => action.payload,\n    clear: (state: number) => 1,\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n}) \n\nexport const wishlistItemPaginationTotalElementsSliceReducer = wishlistItemPaginationTotalElementsSlice.reducer\nexport const wishlistItemPaginationTotalElementsActions = wishlistItemPaginationTotalElementsSlice.actions\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Select from '@material-ui/core/Select';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport Rating from '@material-ui/lab/Rating/Rating';\nimport Carousel from 'components/common/Carousel';\nimport ColorRadio from 'components/common/ColorRadio';\nimport { filterUniqueVariantColors, filterUniqueVariantSizes, isExceedStock, filterSingleVariant } from 'domain/product';\nimport { ProductType, ProductVariantSizeType, ProductVariantType } from 'domain/product/types';\nimport uniq from 'lodash/uniq';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport { UserTypeEnum, MessageTypeEnum } from 'src/app';\nimport { cartItemActions } from 'reducers/slices/domain/cartItem';\nimport { api } from 'configs/axiosConfig';\nimport { AxiosError } from 'axios';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getNanoId } from 'src/utils';\nimport { postWishlistItemFetchStatusActions } from 'reducers/slices/app/fetchStatus/wishlistItem';\nimport { postWishlistItemActionCreator } from 'reducers/slices/domain/wishlistItem';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtitle: {\n      fontWeight: theme.typography.fontWeightBold,\n      margin: `${theme.spacing(1)}px 0`,\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    },\n    productName: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    productDescTitle: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    productDesc: {\n    },\n    productColorTitle: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    productColorBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n    },\n    colorRadioGroup: {\n      display: \"flex\",\n      flexDirection: 'row',\n    },\n    colorFormLabel: {\n      margin: 0,\n    },\n    sizeInput: {\n      margin: theme.spacing(0, 1, 0, 1),\n    },\n    gridItem: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n\n      \"& > *\": {\n        margin: `${theme.spacing(2)}px 0`,\n      },\n    },\n    detailNoteBox: {\n      textAlign: \"center\",\n    },\n    detailNoteTitle: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    customBtnDisable: {\n      color: \"#000\",\n    },\n    btnRoot: {\n      \"&:disabled\": {\n        color: \"#000\",\n      }\n    }\n  }),\n);\n\ninterface ProductDetailPropsType {\n  product: ProductType\n}\n\n/**\n * product page \n *\n *  - steps\n *\n *    0: fetch the product detail from api if redux store is empty\n *\n *    1: display a given product detail including its variants\n *\n *    2: a user select a specific variant (color, size) and its quantity\n *\n *    3: add to cart / checkout\n *\n *  - color & size picking logic\n *\n *    - display all colors (default selection: the 1st color)\n *\n *    - every time a user change the color, it also causes changing the sizes, means that display only available sizes for selected color.\n *\n **/\nconst ProductDetail: React.FunctionComponent<ProductDetailPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n  // state for color & size & quantity\n  const [curSelectedColor, setSelectedColor] = React.useState<string>(\n    props.product.variants[0].variantColor\n  )\n  const [curSelectedSize, setSelectedSize] = React.useState<ProductVariantSizeType>(\n    props.product.variants[0].productSize\n  )\n\n  const [curVariant, setVariant] = React.useState<ProductVariantType>(\n    props.product.variants[0]\n  );\n\n  const [curQty, setQty] = React.useState<number>(1);\n\n  // cur available colors and sizes\n  const [curAvailableColors, setAvailableColors] = React.useState<string[]>(\n    filterUniqueVariantColors(props.product)\n  )\n\n  const [curAvailableSizes, setAvailableSizes] = React.useState<ProductVariantSizeType[]>(\n    filterUniqueVariantSizes(props.product)\n  )\n\n  // event handlers for size change\n  const handleSizeSelectionChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n\n    /**\n     * DON'T FORGET TO USE 'e.target.event' rather than 'e.currentTarget.event'\n     *\n     **/\n    const nextProductSize = curAvailableSizes.find((size: ProductVariantSizeType) => size.productSizeName == e.target.value)\n    setSelectedSize(nextProductSize)\n  }\n\n  // event handler for color change\n  const handleColorSelectionChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextColor = e.currentTarget.value\n    setSelectedColor(nextColor)\n  }\n\n  // event handler for qty increment/decrement\n  const handleQtyInc: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    if (isExceedStock(curQty, curVariant.variantId, props.product)) {\n      return false;\n    }\n\n    setQty((prev: number) => prev + 1);\n  }\n\n\n  // event handler for qty increment/decrement\n  const handleQtyDec: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    if (curQty === 1) {\n      return false;\n    }\n\n    setQty((prev: number) => prev - 1);\n  }\n\n  // use effect to update available size when curColor change\n  //  - if a user change the color, need to display only available sizes based on the change\n  React.useEffect(() => {\n\n    const nextAvailableVariants = props.product.variants.filter((variant: ProductVariantType) => variant.variantColor == curSelectedColor);\n    const nextAvailableSizes: ProductVariantSizeType[] = uniq(nextAvailableVariants.map((variant: ProductVariantType) => variant.productSize))\n\n    // if there is no cur size in the next available sizes, need to change it to the one in the available sizes\n    if (!nextAvailableSizes.find((size: ProductVariantSizeType) => size.productSizeId == curSelectedSize.productSizeId)) {\n\n      const nextSize: ProductVariantSizeType = nextAvailableSizes[0]\n\n      // if does not exists, pick the first one\n      setSelectedSize(nextSize)\n\n      // -- curVariant --\n\n      // update curVariant based on the change of this\n      const nextVariant = props.product.variants.find((variant: ProductVariantType) => variant.variantColor == curSelectedColor && variant.productSize.productSizeId == nextSize.productSizeId)\n      setVariant(nextVariant)\n    } else {\n      // -- curVariant --\n      const nextVariant = props.product.variants.find((variant: ProductVariantType) => variant.variantColor == curSelectedColor && variant.productSize.productSizeId == curSelectedSize.productSizeId)\n      setVariant(nextVariant)\n    }\n\n    setAvailableSizes(nextAvailableSizes)\n  }, [\n      curSelectedColor\n    ])\n\n  // use effect to udpate curVariant when curSize change\n  //  - you don't need to update color stuff.\n  React.useEffect(() => {\n\n    // update curVariant based on the change of this\n    const nextVariant = props.product.variants.find((variant: ProductVariantType) => variant.variantColor == curSelectedColor && variant.productSize.productSizeId == curSelectedSize.productSizeId)\n    setVariant(nextVariant)\n  }, [\n      JSON.stringify(curSelectedSize)\n    ])\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector());\n\n  // event handler for adding cart\n  const handleAddCart: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    if (auth.userType === UserTypeEnum.GUEST) {\n      dispatch(cartItemActions.append({\n        cartItemId: getNanoId(), // temp id\n        createdAt: new Date(Date.now()),\n        isSelected: true,\n        product: filterSingleVariant(curVariant.variantId, props.product), // need to set filtered product (only contains selected variant) \n        quantity: curQty,\n        user: null,\n      }))\n    } else {\n\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/users/${auth.user.userId}/cartItems`,\n        data: {\n          variantId: curVariant.variantId,\n          isSelected: true,\n          quantity: curQty,\n          userId: auth.user.userId,\n        },\n      }).then((data) => {\n\n        // fetch again\n        dispatch(cartItemActions.append(data.data))\n\n        enqueueSnackbar(\"added successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    }\n  }\n\n\n  // event handler for adding cart\n  const handleAddWishlist: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(postWishlistItemActionCreator({\n      variantId: curVariant.variantId,\n      product: props.product\n    }))\n  }\n\n  const handleBuyNow: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    return false;\n  }\n\n\n  // render function\n  //      <ColorCell value={color} />\n  const renderAvailableColors: () => React.ReactNode = () => {\n    return curAvailableColors.map((color: string) => {\n      return (\n        <FormControlLabel value={color} control={<ColorRadio />} label=\"\" className={classes.colorFormLabel} key={color} />\n      )\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {props.product.productName}\n      </Typography>\n      <Grid\n        container\n        justify=\"center\"\n      >\n        {/** image carousel **/}\n        <Grid\n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <Carousel items={props.product.productImages} />\n        </Grid>\n        {/** detail info **/}\n        <Grid\n          item\n          xs={12}\n          md={6}\n          className={classes.gridItem}\n        >\n          <Typography variant=\"body1\" component=\"p\" className={classes.subtitle}>\n            Description\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" className={classes.productDesc}>\n            {props.product.productDescription}\n          </Typography>\n          <Box component=\"div\" className={classes.productColorBox}>\n            <Typography variant=\"body1\" component=\"p\" className={classes.productColorTitle}>\n              Color:\n            </Typography>\n            <RadioGroup\n              value={curSelectedColor}\n              aria-label=\"product-variant-color\"\n              name=\"product-variant-color\"\n              onChange={handleColorSelectionChangeEvent}\n              className={classes.colorRadioGroup}\n            >\n              {renderAvailableColors()}\n            </RadioGroup>\n          </Box>\n          <Box component=\"div\" className={classes.productColorBox}>\n            <Typography variant=\"body1\" component=\"p\" className={classes.productColorTitle}>\n              Size:\n            </Typography>\n            <FormControl className={classes.sizeInput}>\n              <Select\n                id=\"product-size\"\n                value={curSelectedSize.productSizeName}\n                onChange={handleSizeSelectionChangeEvent}\n              >\n                {curAvailableSizes.map((size: ProductVariantSizeType) => (\n                  <MenuItem key={size.productSizeId} value={size.productSizeName}>\n                    {size.productSizeName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n          <Box component=\"div\" className={classes.productColorBox}>\n            <Typography variant=\"body1\" component=\"p\" className={classes.productColorTitle}>\n              Qty:\n            </Typography>\n            <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n              <IconButton onClick={handleQtyInc}>\n                <AddCircleIcon />\n              </IconButton>\n              <Button\n                disabled\n                classes={{\n                  /** this override default and 'disable' custom style. **/\n                  root: classes.btnRoot,\n                }}\n              >\n                {curQty}\n              </Button>\n              <IconButton onClick={handleQtyDec}>\n                <RemoveCircleIcon />\n              </IconButton>\n            </ButtonGroup>\n          </Box>\n          <Box component=\"div\" className={classes.productColorBox}>\n            <Typography variant=\"body1\" component=\"p\" className={classes.productColorTitle}>\n              Review Point:\n            </Typography>\n            <Rating\n              disabled\n              name=\"product-review-point\"\n              precision={0.1}\n              value={props.product.averageReviewPoint}\n              size=\"small\"\n            /><br />\n          </Box>\n          <Box component=\"div\" >\n            <Typography variant=\"body1\" component=\"p\" className={classes.productColorTitle}>\n              Price: <b>$ {`${curVariant.variantUnitPrice ? curVariant.variantUnitPrice * curQty : props.product.productBaseUnitPrice * curQty}`}</b>\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n              * this does not include tax and shipping fee\n            </Typography>\n          </Box>\n          <Box component=\"div\" className={classes.controllerBox}>\n            <Button onClick={handleAddCart}>\n              {\"Add to Cart\"}\n            </Button>\n            <Button onClick={handleAddWishlist}>\n              {\"save to Wishlist\"}\n            </Button>\n            <Button onClick={handleBuyNow}>\n              {\"buy now\"}\n            </Button>\n          </Box>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          className={classes.detailNoteBox}\n        >\n          <Typography variant=\"body1\" component=\"h6\" className={classes.subtitle}>\n            Detail Note\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\">\n            {props.product.note}\n          </Typography>\n          <Box component=\"div\" className={classes.controllerBox}>\n            <Button>\n              {\"Add to Cart\"}\n            </Button>\n            <Button>\n              {\"save to Wishlist\"}\n            </Button>\n            <Button>\n              {\"buy now\"}\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport default ProductDetail\n\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { ProductType } from 'domain/product/types';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { mSelector } from 'src/selectors/selector';\nimport ProductDetail from './ProductDetail';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtitle: {\n      fontWeight: theme.typography.fontWeightBold,\n      margin: `${theme.spacing(1)}px 0`,\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    },\n  }),\n);\n\n/**\n * product page \n *\n *  - steps\n *\n *    0: fetch the product detail from api if redux store is empty\n *\n *    1: display a given product detail including its variants\n *\n *    2: a user select a specific variant (color, size) and its quantity\n *\n *    3: add to cart / checkout\n *\n *  - color & size picking logic\n *\n *    - display all colors (default selection: the 1st color)\n *\n *    - every time a user change the color, it also causes changing the sizes, means that display only available sizes for selected color.\n *\n **/\nconst Product: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { productPath } = useParams();\n\n  // fetch product detail by productPath\n\n  const [curProduct, setProduct] = React.useState<ProductType>(\n    useSelector(mSelector.makeProductByPathSelector(productPath))\n  )\n\n  React.useEffect(() => {\n\n    if (!curProduct) {\n      // oops, the product does not exist in redux store, so send the request to grab this product by path\n\n      api.request({\n        method: 'GET',\n        url: API1_URL + `/products/${productPath}`,\n      }).then((data) => {\n\n        const targetProduct: ProductType = data.data;\n\n        setProduct(targetProduct)\n\n        //enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    }\n  }, [])\n\n  if (!curProduct) {\n    return (\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        Loading...\n      </Typography>\n    )\n  }\n\n  return (\n    <ProductDetail product={curProduct} />\n  )\n}\n\nexport default Product\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { CategoryType } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCategoryWithCacheActionCreator } from 'reducers/slices/domain/category';\nimport { productQueryCategoryIdActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface CategoryFilterTabPanelPropsType {\n//  curCategoryId: string\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst CategoryFilterTabPanel: React.FunctionComponent<{}> = ({\n  \n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // categories option\n  const curCategoryList = useSelector(mSelector.makeCategorySelector())\n\n  // cur query category id \n  const curCategoryId = useSelector(mSelector.makeProductQueryCategoryIdSelector())\n\n  // fetch categories if not fetched before\n  React.useEffect(() => {\n    dispatch(fetchCategoryWithCacheActionCreator())\n  }, [])\n\n  // event handler change\n  const handleCategoryInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(productQueryCategoryIdActions.update(e.currentTarget.value));\n  }\n\n  const renderCategoryRadioInputs: () => React.ReactNode = () => {\n    return curCategoryList.map((category: CategoryType) => {\n      return (\n        <FormControlLabel\n          value={category.categoryId.toString()}\n          control={<Radio />}\n          label={category.categoryName}\n          key={category.categoryId}\n        />\n      )\n    })\n  }\n\n  console.log(\"cur category id (query string)\");\n  console.log(curCategoryId);\n\n  /**\n   *\n   * bug?: https://stackoverflow.com/questions/58952742/how-can-i-control-a-radiogroup-from-material-ui\n   *\n   *  - 'value' should not be null/undefined at RadioGroup otherwise, it won't check even if you clicked.\n   *\n   * solution: data type inconsistency \n   *\n   *  when adding 'toString()' to 'value', it solved this problem.\n   *\n   *  - https://github.com/mui-org/material-ui/issues/16272\n   *\n   **/\n  return (\n    <Box p={3}>\n      <RadioGroup aria-label=\"product-category\" name=\"product-category-filter-radio\" value={curCategoryId.toString()} onChange={handleCategoryInputChangeEvent}>\n        <FormControlLabel value={\"0\"} control={<Radio />} label={\"All\"} key={\"0\"} />\n        {renderCategoryRadioInputs()}\n      </RadioGroup>\n    </Box>\n  )\n}\n\nexport default CategoryFilterTabPanel\n\n","import Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryIsDiscountActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface DiscountFilterTabPanelPropsType {\n//  curDiscountCheck: boolean\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst DiscountFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const curIsDiscount = useSelector(mSelector.makeProductQueryIsDiscountSelector())\n\n  const dispatch = useDispatch();\n  const handleDiscountCheckChangeEvent = (event: any, newValue: boolean) => {\n    dispatch(productQueryIsDiscountActions.update(newValue))\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Discount\n      </Typography>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curIsDiscount}\n            onChange={handleDiscountCheckChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Discount Only\"\n      />\n    </Box>\n  )\n}\n\nexport default DiscountFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryMaxPriceActions, productQueryMinPriceActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface PriceFilterTabPanelPropsType {\n//  curMinPrice: number\n//  curMaxPrice: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst marks = [\n  {\n    value: 0,\n    label: '$0',\n  },\n  {\n    value: 10,\n    label: '$10',\n  },\n  {\n    value: 20,\n    label: '$20',\n  },\n  {\n    value: 50,\n    label: '$50',\n  },\n  {\n    value: 100,\n    label: '$100',\n  },\n  {\n    value: 200,\n    label: '$200',\n  },\n  {\n    value: 300,\n    label: '$300',\n  },\n  {\n    value: 1000,\n    label: '$1,000',\n  },\n];\n\nconst PriceFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const curMinPrice = useSelector(mSelector.makeProductQueryMinPriceSelector());\n  const curMaxPrice = useSelector(mSelector.makeProductQueryMaxPriceSelector());\n\n  const [curPrices, setPrices] = React.useState<number[]>([curMinPrice, curMaxPrice]);\n\n  const handleMinChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(productQueryMinPriceActions.update(nextPrice));\n  }\n\n  const handleMaxChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(productQueryMaxPriceActions.update(nextPrice))\n  }\n\n\n  function valuetext(value: number) {\n    return `$${value}`;\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, newValue: number[]) => {\n\n    let nextMinPrice;\n    let nextMaxPrice;\n\n    /** \n     * if min value exceed the max value, switch it, and vice versa.\n     **/\n\n    if (newValue[0] <= newValue[1]) {\n      nextMinPrice = newValue[0];\n      nextMaxPrice = newValue[1];\n    } else {\n      nextMinPrice = newValue[1];\n      nextMaxPrice = newValue[0];\n    }\n\n    console.log(\"next min price: \" + nextMinPrice)\n    console.log(\"next max price: \" + nextMaxPrice)\n\n    dispatch(productQueryMinPriceActions.update(nextMinPrice));\n    dispatch(productQueryMaxPriceActions.update(nextMaxPrice))\n\n    setPrices([nextMinPrice, nextMaxPrice])\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Price Range\n      </Typography>\n      <Slider\n        step={10}\n        value={curPrices}\n        onChange={handleChange}\n        marks={marks}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        getAriaValueText={valuetext}\n      />\n    </Box>\n  )\n}\n\nexport default PriceFilterTabPanel\n\n\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryStartDateActions, productQueryEndDateActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst ReleaseDateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeProductQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeProductQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(productQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(productQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default ReleaseDateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport Rating from '@material-ui/lab/Rating/Rating';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQueryReviewPointActions } from 'reducers/slices/domain/product';\nimport Button from '@material-ui/core/Button';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReviewFilterTabPanelPropsType {\n//  curReviewPoint: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst ReviewFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curReviewPoint = useSelector(mSelector.makeProductQueryReviewPointSelector())\n\n  const handleReviewPointChangeEvent = (event: any, newValue: number) => {\n    dispatch(productQueryReviewPointActions.update(newValue))\n  };\n\n  const handleReset: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(productQueryReviewPointActions.clear())\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n        Review Point\n      </Typography>\n      <Box className={classes.contentBox}>\n        <Rating\n          name=\"product-filter-review-point\"\n          onChange={handleReviewPointChangeEvent}\n          precision={0.5}\n          value={curReviewPoint}\n        />\n        <Button onClick={handleReset}>\n          Reset\n      </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ReviewFilterTabPanel\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ProductSortEnum } from 'domain/product/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productQuerySortActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst productSortList = [\n  {\n    value: ProductSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: ProductSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n  {\n    value: ProductSortEnum.ALPHABETIC_ASC,\n    label: \"Alphabetical Asc\",\n  },\n  {\n    value: ProductSortEnum.ALPHABETIC_DESC,\n    label: \"Alphabetical Desc\",\n  },\n  {\n    value: ProductSortEnum.PRICE_ASC,\n    label: \"Cheap\",\n  },\n  {\n    value: ProductSortEnum.PRICE_DESC,\n    label: \"Expensive\",\n  },\n]\n\n\nconst SortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeProductQuerySortSelector())\n\n  const handleProductSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(productQuerySortActions.update(e.currentTarget.value as ProductSortEnum))\n  }\n\n  const renderProductSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderProductSortRadioInputs updated\");\n    return productSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"product-sort\" name=\"product-sort\" value={curSort} onChange={handleProductSortInputChangeEvent}>\n          {renderProductSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default SortTabPanel\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport CategoryFilterTabPanel from './TabPanel/CategoryFilterTabPanel';\nimport DiscountFilterTabPanel from './TabPanel/DiscountFilterTabPanel';\nimport PriceFilterTabPanel from './TabPanel/PriceFilterTabPanel';\nimport ReleaseDateFilterTabPanel from './TabPanel/ReleaseDateFilterTabPanel';\nimport ReviewFilterTabPanel from './TabPanel/ReviewFilterTabPanel';\nimport SortTabPanel from './TabPanel/SortTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst SearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeProductQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeProductQuerySelector());\n\n  return (\n    <Box component=\"div\" >\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" {...a11yProps(0)} />\n          <Tab label=\"Category\" {...a11yProps(1)} />\n          <Tab label=\"Price\" {...a11yProps(2)} />\n          <Tab label=\"Review\" {...a11yProps(3)} />\n          <Tab label=\"Discount\" {...a11yProps(4)} />\n          <Tab label=\"Release Date\" {...a11yProps(5)} />\n          <Tab label=\"Sort\" {...a11yProps(6)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <CategoryFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <PriceFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={3} \n        className={classes.tabPanel}\n        render={() => <ReviewFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={4} \n        className={classes.tabPanel}\n        render={() => <DiscountFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={5} \n        className={classes.tabPanel}\n        render={() => <ReleaseDateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={6} \n        className={classes.tabPanel}\n        render={() => <SortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default SearchController\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ndeclare type CornerRibbonPropsType = {\n  text: string\n}\n\n/**\n * - corner ribbon compoenent (ref: https://codemyui.com/pure-css-corner-ribbons/)\n *\n * - note:\n *\n *  - please make the parent component of this component 'pisition: relative'\n *\n **/\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /* common */\n    ribbon: {\n      width: '150px',\n      height: '150px',\n      overflow: 'hidden',\n      position: 'absolute',\n\n      '&::before, &::after': {\n        position: 'absolute',\n        zIndex: -1,\n        content: '\"\"', // when you enter empty char use this '\"\"' or \"''\".\n        display: \"block\",\n        border: \"5px solid #2980b9\",\n      },\n\n      \"& span\": {\n        position: \"absolute\",\n        display: \"block\",\n        width: \"290px\",\n        padding: \"6px 0\",\n        backgroundColor: \"#3498db\",\n        boxShadow: \"0 5px 10px rgba(0,0,0,.1)\",\n        color: \"#fff\",\n        fontWeight: \"bold\",\n        textShadow: \"0 1px 1px rgba(0,0,0,.2)\",\n        textTransform: \"uppercase\",\n        textAlign: \"center\",\n      },\n    },\n\n    /* top left*/\n    ribbonTopLeft:  {\n      top: \"-10px\",\n      left: \"-10px\",\n\n      \"&::before, &::after\": {\n        borderTopColor: \"transparent\",\n        borderLeftColor: \"transparent\",\n      },\n\n      \"&:before\": {\n        top: 0,\n        right: \"56px\",\n      },\n\n      \"&::after\": {\n        bottom: \"55px\",\n        left: 0,\n      },\n\n      \"& span\": {\n        top: '22px',\n        right: '-30px',\n        transform: \"rotate(-45deg)\",\n      },\n    },\n\n  }),\n);\n\nconst CornerRibbon: React.FunctionComponent<CornerRibbonPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <div className={`${classes.ribbon} ${classes.ribbonTopLeft}`}>\n      <span>{props.text}</span>\n    </div>\n  )\n}\n\nexport default CornerRibbon\n\n\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { ProductType } from 'domain/product/types';\nimport * as React from 'react';\nimport { cadCurrencyFormat } from 'src/utils';\nimport SampleProduct1_1Image from 'static/sample-product-1-1.jpg';\nimport CornerRibbon from '../CornerRibbon';\nimport Box from '@material-ui/core/Box';\nimport { Link as RRLink } from \"react-router-dom\";\n\ndeclare type ProductCardV2PropsType = {\n  product: ProductType\n}\n\n/**\n * make card actions align bottom to look nice esp when each card height is different.\n *\n * - ref: https://stackoverflow.com/questions/52669681/align-card-buttons-on-bottom-material-ui\n *\n * - parent:position:relative and child:position:absolute does not work!!\n *\n * - use parent:flex and child:marginXXX:auto\n *\n **/\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"relative\",\n      height: \"100%\",\n    },\n    card: {\n      height: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n\n      marginTop: \"auto\",\n    },\n    media: {\n      // aspect ratio: 1:1\n      height: 0,\n      paddingTop: '100%',\n      marginTop: '30'\n    }\n  }),\n);\n\nconst ProductCardV2: React.FunctionComponent<ProductCardV2PropsType> = ({ product }) => {\n\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.box}>\n      <Card className={classes.card}>\n        <CardMedia\n          className={classes.media}\n          image={(product.productImages.length > 0) ? product.productImages[0].productImagePath : SampleProduct1_1Image}\n        />\n        <CardContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {product.category.categoryName}\n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\n            {product.productName}\n          </Typography>\n          <Typography variant=\"body2\" color=\"primary\" component=\"p\">\n            {/** \n            TODO: need to domain function to select cheapest price via product variant \n               or you can create a property in backend DTO so that you don't need to calculate in front-end \n            **/}\n            <b>${cadCurrencyFormat(product.productBaseUnitPrice)} ~</b>\n          </Typography>\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <Button component={RRLink} to={`/products/${product.productPath}`}>\n            Read More\n        </Button>\n        </CardActions>\n      </Card>\n      <CornerRibbon text={\"Discount\"} />\n    </Box>\n  )\n}\n\nexport default ProductCardV2\n\n\n\n\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { ProductType } from 'domain/product/types';\nimport ProductCardV2 from '../ProductCard/ProductCardV2';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\ndeclare type SearchResultPropsType = {\n  products: ProductType[],\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    gridBox: {\n      // need to set this. otherwise, <Grid spacing={x}> causes overflow horizontally.\n      // ref: https://material-ui.com/components/grid/#limitations\n      //\n      // still overflow!\n      //  - quit using <Grid spacing={x}>. \n      //  - use 'margin' on <Grid item> // it works\n      overflow: \"hidden\",\n      padding: theme.spacing(0, 1, 0, 1),\n      margin: theme.spacing(3, 0, 3, 0),\n      minHeight: \"400px\",\n    },\n    gridItem: {\n      maxWidth: 200,\n      margin: theme.spacing(1) \n    }\n  }),\n);\n\n\nconst SearchResult: React.FunctionComponent<SearchResultPropsType> = ({ products }) => {\n\n  const classes = useStyles()\n\n  const renderProductList: () => React.ReactNode = () => {\n    return products.map((product: ProductType) => {\n      return (\n        <Grid \n          key={product.productId}\n          item\n          xs={12}\n          sm={6}\n          md={3}\n          className={classes.gridItem}\n        >\n         <ProductCardV2 product={product}/> \n        </Grid>\n      )\n    })\n  }\n\n  return (\n    <Grid \n      container\n      className={classes.gridBox}\n      spacing={0}\n      justify=\"center\"\n    >\n      {(products && products.length === 0 &&\n        <Typography variant=\"body1\" component=\"p\" align=\"center\">\n          Products are not found.\n        </Typography>\n      )}\n      {renderProductList()}\n    </Grid>\n  )\n}\n\nexport default SearchResult\n\n\n\n","import Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\nimport SearchController from 'components/common/SearchController';\nimport SearchResult from 'components/common/SearchResult';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPublicProductActionCreator, productPaginationPageActions } from 'reducers/slices/domain/product';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    pageBox: {\n      padding: theme.spacing(2),\n    }\n  }),\n);\n\n/**\n * \"/search\" endpoint: to search & display products\n *\n * - stpes:\n *  \n *  1. send a request to /products (GET) to fetch the products\n *  2. manage states (e.g., result blog list, filter/sort/pagination) here (not in child component)\n *  3. every time filter/sort/pagination changes, send a request again.\n *\n **/\nconst ProductSearch: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles()\n\n  const dispatch = useDispatch()\n\n  // filter/sort/pagination\n  const curDomains = useSelector(mSelector.makeProductWithoutCacheSelector()); \n\n  const curQuery = useSelector(mSelector.makeProductQuerySelector())\n\n  // pagination\n  const curPagination = useSelector(mSelector.makeProductPaginationSelector())\n  const handlePaginationChange = (event: React.ChangeEvent<unknown>, value: number) => {\n\n    // need to decrement since we incremented when display\n    const nextPage = value - 1;\n\n    dispatch(productPaginationPageActions.update(nextPage))\n  };\n\n  // api request every time query/page changes\n  React.useEffect(() => {\n    dispatch(fetchPublicProductActionCreator())\n  }, [\n    JSON.stringify(curQuery),\n    curPagination.page,\n  ])\n\n\n  // useEffect to send request every time its dependency updated\n  return (\n    <React.Fragment>\n      <SearchController />\n      <SearchResult products={curDomains} />\n      <Grid \n        container \n        justify=\"center\" \n        alignItems=\"center\"\n        className={classes.pageBox}\n      >\n        <Pagination\n          page={curPagination.page + 1} // don't forget to increment when display\n          count={curPagination.totalPages}\n          color=\"primary\"\n          showFirstButton\n          showLastButton\n          size={\"medium\"}\n          onChange={handlePaginationChange}\n        />\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport default ProductSearch\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport * as React from 'react';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { useValidation } from 'hooks/validation';\nimport { memberSignupSchema } from 'hooks/validation/rules';\nimport { api } from 'configs/axiosConfig';\nimport { useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { UserType } from 'domain/user/types';\nimport { authActions } from 'reducers/slices/app';\nimport { AxiosError } from 'axios';\nimport omit from 'lodash/omit';\n\nexport declare type MemberSignupDataType = {\n  firstName: string\n  lastName: string\n  email: string\n  password: string\n  confirm: string\n}\n\nconst defaultMemberSignupData: MemberSignupDataType = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirm: \"\",\n}\n\nexport declare type MemberSignupValidationDataType = {\n  firstName?: string\n  lastName?: string\n  email?: string\n  password?: string\n  confirm?: string\n}\n\nconst defaultMemberSignupValidationData: MemberSignupValidationDataType = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  confirm: \"\",\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      maxWidth: 500,\n      width: \"80%\",\n      margin: \"20px auto\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      width: \"80%\",\n      margin: theme.spacing(2),\n    },\n    forgetPasswordBox: {\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(2, 0, 2, 0),\n    },\n  }),\n);\n\nconst Signup: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curMemberSignupState, setMemberSignupState] = React.useState<MemberSignupDataType>(defaultMemberSignupData);\n\n  // validation logic (should move to hooks)\n  const [curMemberSignupValidationState, setMemberSignupValidationState] = React.useState<MemberSignupValidationDataType>(defaultMemberSignupValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curMemberSignupState,\n    curValidationDomain: curMemberSignupValidationState,\n    schema: memberSignupSchema,\n    setValidationDomain: setMemberSignupValidationState,\n    defaultValidationDomain: defaultMemberSignupValidationData,\n  })\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setMemberSignupState((prev: MemberSignupDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setMemberSignupState((prev: MemberSignupDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setMemberSignupState((prev: MemberSignupDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    /**\n     * TODO: sync password change with confirm error message for improve UX\n     *\n     **/\n    setMemberSignupState((prev: MemberSignupDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  const handleConfirmInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextConfirm = e.currentTarget.value\n    updateValidationAt(\"confirm\", e.currentTarget.value);\n    /**\n     * TODO: sync password change with confirm error message for improve UX\n     *\n     **/\n    setMemberSignupState((prev: MemberSignupDataType) => ({\n      ...prev,\n      confirm: nextConfirm\n    }));\n  }\n\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curMemberSignupState)\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/signup`,\n        data: omit(curMemberSignupState, \"confirm\"),\n      }).then((data) => {\n        /**\n         *  add new phone\n         **/\n        const loggedInUser: UserType = data.data;\n        dispatch(authActions.loginWithUser(loggedInUser))\n\n        enqueueSnackbar(\"added successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      direction=\"column\"\n      className={classes.box}\n    >\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"signup-logo\">\n        <SentimentSatisfiedOutlinedIcon />\n      </IconButton>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Signup\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"first-name\"\n          label=\"First Name\"\n          className={classes.formControl}\n          value={curMemberSignupState.firstName}\n          onChange={handleFirstNameInputChangeEvent}\n          helperText={curMemberSignupValidationState.firstName}\n          error={curMemberSignupValidationState.firstName !== \"\"}\n\n        />\n        <TextField\n          id=\"last-name\"\n          label=\"Last Name\"\n          className={classes.formControl}\n          value={curMemberSignupState.lastName}\n          onChange={handleLastNameInputChangeEvent}\n          helperText={curMemberSignupValidationState.lastName}\n          error={curMemberSignupValidationState.lastName !== \"\"}\n        />\n        <TextField\n          id=\"email\"\n          label=\"Email\"\n          type=\"email\"\n          className={classes.formControl}\n          value={curMemberSignupState.email}\n          onChange={handleEmailInputChangeEvent}\n          helperText={curMemberSignupValidationState.email}\n          error={curMemberSignupValidationState.email !== \"\"}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curMemberSignupState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curMemberSignupValidationState.password}\n          error={curMemberSignupValidationState.password !== \"\"}\n        />\n        <TextField\n          id=\"confirm\"\n          label=\"Confirm\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curMemberSignupState.confirm}\n          onChange={handleConfirmInputChangeEvent}\n          helperText={curMemberSignupValidationState.confirm}\n          error={curMemberSignupValidationState.confirm !== \"\"}\n        />\n        <Box component=\"div\" className={classes.forgetPasswordBox} >\n          <Typography variant=\"body2\" component=\"p\">\n            <Link component={RRLink} to=\"/login\">\n              already have an account?\n            </Link>\n          </Typography>\n        </Box>\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleUserAccountSaveClickEvent}>\n            Signup\n          </Button>\n        </Box>\n      </form>\n    </Grid>\n  )\n}\n\nexport default Signup\n\n\n\n","import Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { WishlistItemType } from 'domain/wishlist/types';\nimport * as React from 'react';\nimport SampleSelfImage from 'static/self.jpeg';\nimport ColorCell from '../GridData/ColorCell';\nimport SizeCell from '../GridData/SizeCell';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n\n/**\n * need 'orderDetail' or 'product/variant'\n *\n **/\ninterface WishlistItemPropsType {\n  value: WishlistItemType\n  onMoveToCartClick?: React.EventHandler<React.MouseEvent<HTMLButtonElement>> \n  onDelete?: React.EventHandler<React.MouseEvent<HTMLButtonElement>> \n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(1)\n    },\n    card: {\n    },\n    cardHeader: {\n      width: \"100%\",\n    },\n    actions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n    },\n    details: {\n      flexGrow: 1,\n    },\n    media: {\n      width: 200,\n    },\n    actionBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst WishlistItem: React.FunctionComponent<WishlistItemPropsType> = ({ value, onMoveToCartClick, onDelete }) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  return (\n    <Card className={`${classes.card} ${classes.root}`}>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={<Avatar alt=\"\" src={SampleSelfImage} />}\n        title={value.product.productName}\n        subheader={`$${value.product.productBaseUnitPrice} NEED TO FIX`}\n      >\n      </CardHeader>\n      <CardActions>\n        <Grid\n          container\n          justify=\"space-between\"\n        >\n          <Box component=\"div\" className={classes.actionBox}>\n            <ColorCell value={value.product.variants[0].variantColor} />\n            <SizeCell value={value.product.variants[0].productSize.productSizeName} />\n          </Box>\n          <Box component=\"div\" className={classes.actionBox}>\n            <Button\n              variant=\"contained\"\n              startIcon={<AddShoppingCartIcon />}\n              onClick={onMoveToCartClick}\n              data-wishlist-id={value.wishlistItemId}\n            >\n              Move To Cart\n            </Button>\n            <IconButton \n              onClick={onDelete}\n              data-wishlist-id={value.wishlistItemId}\n            >\n              <DeleteForeverIcon />\n            </IconButton>\n          </Box>\n        </Grid>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default WishlistItem\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\n\ninterface TabPanelPropsType {\n  index: number\n  value: number\n  render: () => React.ReactNode\n  className?: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      position: \"absolute\",\n      backgroundColor: \"#fff\",\n      width: \"100%\",\n    },\n  }),\n);\n\nconst TabPanel: React.FunctionComponent<TabPanelPropsType> = ({\n  index,\n  value,\n  render,\n  ...other\n}) => {\n\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.box}\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        render()\n      )}\n    </div>\n  )\n}\n\nexport default TabPanel\n","import Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wishlistItemQueryIsDiscountActions } from 'reducers/slices/domain/wishlistItem';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface DiscountFilterTabPanelPropsType {\n//  curDiscountCheck: boolean\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst DiscountFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const curIsDiscount = useSelector(mSelector.makeWishlistItemQueryIsDiscountSelector())\n\n  const dispatch = useDispatch();\n  const handleDiscountCheckChangeEvent = (event: any, newValue: boolean) => {\n    dispatch(wishlistItemQueryIsDiscountActions.update(newValue))\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Discount\n      </Typography>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={curIsDiscount}\n            onChange={handleDiscountCheckChangeEvent}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Discount Only\"\n      />\n    </Box>\n  )\n}\n\nexport default DiscountFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wishlistItemQueryMaxPriceActions, wishlistItemQueryMinPriceActions } from 'reducers/slices/domain/wishlistItem';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface PriceFilterTabPanelPropsType {\n//  curMinPrice: number\n//  curMaxPrice: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst marks = [\n  {\n    value: 0,\n    label: '$0',\n  },\n  {\n    value: 10,\n    label: '$10',\n  },\n  {\n    value: 20,\n    label: '$20',\n  },\n  {\n    value: 50,\n    label: '$50',\n  },\n  {\n    value: 100,\n    label: '$100',\n  },\n  {\n    value: 200,\n    label: '$200',\n  },\n  {\n    value: 300,\n    label: '$300',\n  },\n  {\n    value: 1000,\n    label: '$1,000',\n  },\n];\n\nconst PriceFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const curMinPrice = useSelector(mSelector.makeWishlistItemQueryMinPriceSelector());\n  const curMaxPrice = useSelector(mSelector.makeWishlistItemQueryMaxPriceSelector());\n\n  const [curPrices, setPrices] = React.useState<number[]>([curMinPrice, curMaxPrice]);\n\n  const handleMinChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(wishlistItemQueryMinPriceActions.update(nextPrice));\n  }\n\n  const handleMaxChange: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPrice = parseInt(e.currentTarget.value);\n    dispatch(wishlistItemQueryMaxPriceActions.update(nextPrice))\n  }\n\n\n  function valuetext(value: number) {\n    return `$${value}`;\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, newValue: number[]) => {\n\n    let nextMinPrice;\n    let nextMaxPrice;\n\n    /** \n     * if min value exceed the max value, switch it, and vice versa.\n     **/\n\n    if (newValue[0] <= newValue[1]) {\n      nextMinPrice = newValue[0];\n      nextMaxPrice = newValue[1];\n    } else {\n      nextMinPrice = newValue[1];\n      nextMaxPrice = newValue[0];\n    }\n\n    console.log(\"next min price: \" + nextMinPrice)\n    console.log(\"next max price: \" + nextMaxPrice)\n\n    dispatch(wishlistItemQueryMinPriceActions.update(nextMinPrice));\n    dispatch(wishlistItemQueryMaxPriceActions.update(nextMaxPrice))\n\n    setPrices([nextMinPrice, nextMaxPrice])\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Price Range\n      </Typography>\n      <Slider\n        step={10}\n        value={curPrices}\n        onChange={handleChange}\n        marks={marks}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        getAriaValueText={valuetext}\n      />\n    </Box>\n  )\n}\n\nexport default PriceFilterTabPanel\n\n\n","import DateFnsUtils from '@date-io/date-fns';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wishlistItemQueryStartDateActions, wishlistItemQueryEndDateActions } from 'reducers/slices/domain/wishlistItem';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReleaseDateFilterTabPanelPropsType {\n//  curStartDate: Date\n//  curEndDate: Date\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\n/**\n * you need to install this dependency rather than material-ui\n *\n *  - https://material-ui-pickers.dev/getting-started/installation\n *  - https://material-ui.com/components/pickers/\n *\n *  - you also need to install @date-io/date-fns or other peer dependency\n *\n *  TODO: \n *\n *    - disable the date before start date when updating end date\n *\n **/\n\nconst ReleaseDateFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curStartDate = useSelector(mSelector.makeWishlistItemQueryStartDateSelector())\n  const curEndDate = useSelector(mSelector.makeWishlistItemQueryEndDateSelector())\n\n  const handleStartDateChange = (date: Date | null) => {\n    dispatch(wishlistItemQueryStartDateActions.update(date));\n  };\n\n  const handleEndDateChange = (date: Date | null) => {\n    dispatch(wishlistItemQueryEndDateActions.update(date));\n  };\n\n  return (\n    <Box p={3}>\n      <Typography id=\"range-slider\" gutterBottom>\n        Release Date\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Start Date\"\n            format=\"MM/dd/yyyy\"\n            value={curStartDate}\n            onChange={handleStartDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"End Date\"\n            format=\"MM/dd/yyyy\"\n            value={curEndDate}\n            onChange={handleEndDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n    </Box>\n  )\n}\n\nexport default ReleaseDateFilterTabPanel\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport Rating from '@material-ui/lab/Rating/Rating';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wishlistItemQueryReviewPointActions } from 'reducers/slices/domain/wishlistItem';\nimport Button from '@material-ui/core/Button';\nimport { mSelector } from 'src/selectors/selector';\n\n//interface ReviewFilterTabPanelPropsType {\n//  curReviewPoint: number\n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n    contentBox: {\n      display: \"flex\",\n      alignItems: \"center\",\n    }\n  }),\n);\n\nconst ReviewFilterTabPanel: React.FunctionComponent<{}> = ({\n}) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curReviewPoint = useSelector(mSelector.makeWishlistItemQueryReviewPointSelector())\n\n  const handleReviewPointChangeEvent = (event: any, newValue: number) => {\n    dispatch(wishlistItemQueryReviewPointActions.update(newValue))\n  };\n\n  const handleReset: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(wishlistItemQueryReviewPointActions.clear())\n  }\n\n  return (\n    <Box p={3}>\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n        Review Point\n      </Typography>\n      <Box className={classes.contentBox}>\n        <Rating\n          name=\"wishlistItem-filter-review-point\"\n          onChange={handleReviewPointChangeEvent}\n          precision={0.5}\n          value={curReviewPoint}\n        />\n        <Button onClick={handleReset}>\n          Reset\n      </Button>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ReviewFilterTabPanel\n\n\n","import Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { wishlistItemQuerySortActions } from 'reducers/slices/domain/wishlistItem';\nimport { mSelector } from 'src/selectors/selector';\nimport { WishlistItemSortEnum } from 'domain/wishlist/types';\n\n//interface SortTabPanelPropsType {\n//  \n//}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n    },\n  }),\n);\n\nconst wishlistItemSortList = [\n  {\n    value: WishlistItemSortEnum.DATE_DESC,\n    label: \"Recent\",\n  },\n  {\n    value: WishlistItemSortEnum.DATE_ASC,\n    label: \"Old\",\n  },\n  {\n    value: WishlistItemSortEnum.ALPHABETIC_ASC,\n    label: \"Alphabetical Asc\",\n  },\n  {\n    value: WishlistItemSortEnum.ALPHABETIC_DESC,\n    label: \"Alphabetical Desc\",\n  },\n  {\n    value: WishlistItemSortEnum.PRICE_ASC,\n    label: \"Cheap\",\n  },\n  {\n    value: WishlistItemSortEnum.PRICE_DESC,\n    label: \"Expensive\",\n  },\n]\n\n\nconst SortTabPanel: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curSort = useSelector(mSelector.makeWishlistItemQuerySortSelector())\n\n  const handleWishlistItemSortInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    dispatch(wishlistItemQuerySortActions.update(e.currentTarget.value as WishlistItemSortEnum))\n  }\n\n  const renderWishlistItemSortRadioInputs: () => React.ReactNode = () => {\n    console.log(\"renderWishlistItemSortRadioInputs updated\");\n    return wishlistItemSortList.map((sort) => {\n      return (\n        <FormControlLabel value={sort.value.toString()} control={<Radio />} label={sort.label} key={sort.value} />\n      )\n    })\n  }\n\n  return (\n    <Box p={3}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Select Sort</FormLabel>\n        <RadioGroup aria-label=\"wishlistItem-sort\" name=\"wishlistItem-sort\" value={curSort} onChange={handleWishlistItemSortInputChangeEvent}>\n          {renderWishlistItemSortRadioInputs()}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  )\n}\n\nexport default SortTabPanel\n","import AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport TabPanel from './TabPanel';\nimport DiscountFilterTabPanel from './TabPanel/DiscountFilterTabPanel';\nimport PriceFilterTabPanel from './TabPanel/PriceFilterTabPanel';\nimport ReleaseDateFilterTabPanel from './TabPanel/ReleaseDateFilterTabPanel';\nimport ReviewFilterTabPanel from './TabPanel/ReviewFilterTabPanel';\nimport SortTabPanel from './TabPanel/SortTabPanel';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    tabPanel: {\n      maxWidth: theme.breakpoints.values.lg, \n      position: \"absolute\",\n      backgroundColor: \"#f5f5f5\",\n      width: \"100%\",\n      zIndex: 50,\n    }\n  }),\n);\n\n/**\n * TODO: make tab panel title consistent (e.g., select category, review point, and so on)\n *\n **/\n\nconst WishlistItemSearchController: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * tab components stuff\n   **/\n  const [curTabIndex, setTabIndex] = React.useState(0);\n  function a11yProps(index: any) {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n  }\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n\n    // toggle feature\n    const nextValue = (curTabIndex === newValue) ? 0 : newValue\n\n    setTabIndex(nextValue);\n  };\n\n  /**\n   * query state stuff\n   *\n   * this is the reason to cause radiogroup check does not checked (esp, Sort).\n   * curQuery is not updated when Sort state is updated at child component.\n   *\n   * maybe, this is because of memorized selector and immutable comparison. for example, even if the child property (sort) is updated the parent (query) property still the same. that's why, the prop (curSort) not gonna updated at child component.\n   *\n   * solution for this:\n   *\n   * use each prop query selector at each tabpanel. don't need to use 'mselector.makeProductQuerySelector()' here.\n   **/\n  //const curQuery = useSelector(mSelector.makeProductQuerySelector());\n\n  return (\n    <Box component=\"div\" >\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={curTabIndex}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Result\" {...a11yProps(0)} />\n          <Tab label=\"Price\" {...a11yProps(1)} />\n          <Tab label=\"Review\" {...a11yProps(2)} />\n          <Tab label=\"Discount\" {...a11yProps(3)} />\n          <Tab label=\"Release Date\" {...a11yProps(4)} />\n          <Tab label=\"Sort\" {...a11yProps(5)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel \n        value={curTabIndex} \n        index={0} \n        render={() => <React.Fragment></React.Fragment>}\n      />\n      <TabPanel \n        value={curTabIndex} \n        index={1} \n        className={classes.tabPanel}\n        render={() => <PriceFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={2} \n        className={classes.tabPanel}\n        render={() => <ReviewFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={3} \n        className={classes.tabPanel}\n        render={() => <DiscountFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={4} \n        className={classes.tabPanel}\n        render={() => <ReleaseDateFilterTabPanel/>} \n      />\n      <TabPanel \n        value={curTabIndex} \n        index={5} \n        className={classes.tabPanel}\n        render={() => <SortTabPanel/>} \n      />\n    </Box>\n  )\n}\n\nexport default WishlistItemSearchController\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Pagination from '@material-ui/lab/Pagination/Pagination';\nimport WishlistItem from 'components/common/WishlistItem';\nimport WishlistItemSearchController from 'components/common/WishlistItemSearchController';\nimport { WishlistItemType } from 'domain/wishlist/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteSingleWishlistItemActionCreator, fetchWishlistItemActionCreator, patchWishlistItemActionCreator, wishlistItemPaginationPageActions } from 'reducers/slices/domain/wishlistItem';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(3),\n    }\n  }),\n);\n\n/**\n * member & guest wishlist management page\n *\n * steps: \n *\n *  1. retrieve wishlist item list from redux state\n *\n *  2. display on this dumb component\n *\n *  3. when the user updates (e.g., select, remove), dispatch following actions:\n *\n *    3.2: remove: need to remove the selected item\n *      (MEMBER): send api request (/users/{userId}/wishlist/{wishlistItemId} DELETE: delete) \n *      (GUEST): just only update redux state\n *\n *  4. received updated state from redux\n *\n *  5. display updated state on this dumb component again\n *      \n *\n **/\nconst Wishlist: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  const curWishlistItems = useSelector(mSelector.makeWishlistItemSelector())\n\n  const curQueryString = useSelector(mSelector.makeWishlistItemQueryStringSelector())\n  const pagination = useSelector(mSelector.makeWishlistItemPaginationSelector())\n\n  // fetch wishlistItems\n  React.useEffect(() => {\n    dispatch(fetchWishlistItemActionCreator())\n  }, [\n      JSON.stringify(curQueryString)\n    ])\n\n  const handleMoveToCartClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    const wishlistItemId = e.currentTarget.getAttribute(\"data-wishlist-id\")\n    dispatch(\n      patchWishlistItemActionCreator({ wishlistItemId: wishlistItemId })\n    );\n\n  }\n\n  const handleDeleteClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    const wishlistItemId = e.currentTarget.getAttribute(\"data-wishlist-id\")\n    dispatch(\n      deleteSingleWishlistItemActionCreator({ wishlistItemId: wishlistItemId })\n    );\n  }\n\n  const renderWishlistItems: () => React.ReactNode = () => {\n    return curWishlistItems.map((wishlistItem: WishlistItemType) => {\n      return (\n        <WishlistItem value={wishlistItem} onMoveToCartClick={handleMoveToCartClick} onDelete={handleDeleteClick} key={wishlistItem.wishlistItemId} />\n      )\n    })\n  }\n\n  // pagination stuff\n  const handlePaginationChange = (event: React.ChangeEvent<unknown>, value: number) => {\n\n    // need to decrement since we incremented when display\n    const nextPage = value - 1;\n\n    dispatch(wishlistItemPaginationPageActions.update(nextPage))\n  };\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Wishlist\"}\n      </Typography>\n      <WishlistItemSearchController />\n      {(curWishlistItems.length === 0 &&\n        <React.Fragment>\n          <Typography variant=\"body1\" component=\"p\" align=\"center\">\n            {\"Oops, Your wishlist is empty.\"}\n          </Typography>\n          <Box component=\"div\" className={classes.controllerBox}>\n            <Button>\n              {\"search\"}\n            </Button>\n          </Box>\n        </React.Fragment>\n      )}\n      {(curWishlistItems.length > 0 &&\n        <React.Fragment>\n          {renderWishlistItems()}\n          <Grid container justify=\"center\" className={classes.controllerBox}>\n            <Pagination\n              page={pagination.page + 1} // don't forget to increment when display\n              count={pagination.totalPages}\n              color=\"primary\"\n              showFirstButton\n              showLastButton\n              size={\"medium\"}\n              onChange={handlePaginationChange}\n            />\n          </Grid>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default Wishlist\n\n\n","import * as React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport SampleSelfImage from 'static/self.jpeg';\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { Link as RRLink } from \"react-router-dom\";\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { api } from 'configs/axiosConfig';\nimport { authActions } from 'reducers/slices/app';\nimport { useSnackbar } from 'notistack';\nimport { AxiosError } from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      background: \"rgba(255, 255, 255, 1)\",\n      color: theme.palette.text.primary,\n    },\n    gridItemRight: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n\n      '& > *': {\n      }\n    },\n    pointer: {\n      cursor: \"pointer\",\n    }\n  }),\n);\n\nconst AdminHeader: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  // auth\n  const auth = useSelector(mSelector.makeAuthSelector());\n\n  // cart icon click\n  const dispatch = useDispatch();\n  \n  // history \n  const history = useHistory();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  /**\n   * account menu stuff\n   **/\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleMenuOpenClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  // handle logout menu item click\n  const handleLogout = (e: React.MouseEvent<HTMLElement>) => {\n\n    // request\n    api.request({\n      method: 'post',\n      url: API1_URL + `/logout`,\n      data: null \n    }).then((data) => {\n\n      // fetch again\n      dispatch(authActions.logout())\n\n      history.push(\"/admin/login\");\n\n\n      enqueueSnackbar(\"logged out successfully.\", { variant: \"success\" })\n    }).catch((error: AxiosError) => {\n      enqueueSnackbar(error.message, { variant: \"error\" })\n    })\n\n    handleMenuClose()\n  }\n\n  return (\n    <AppBar position=\"sticky\" className={classes.appBar}>\n      <Toolbar >\n        <Grid\n          justify=\"space-between\"\n          alignItems=\"center\"\n          container\n        >\n          <Grid item>\n            <Link color=\"inherit\" component={RRLink} to=\"/\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"admin-logo\">\n                <SentimentSatisfiedOutlinedIcon />\n              </IconButton>\n            </Link>\n          </Grid>\n          <Grid item className={classes.gridItemRight}>\n            <Link color=\"inherit\" component={RRLink} to=\"/\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"admin-menu-search\">\n                <NotificationsIcon />\n              </IconButton>\n            </Link>\n            <Avatar \n              alt=\"Satoshi Iwao\" \n              className={classes.pointer}\n              src={auth.user.avatarImagePath ? API1_URL + auth.user.avatarImagePath : null} \n              onClick={handleMenuOpenClick}\n            />\n            <Menu\n              id=\"admin-account-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleMenuClose}\n            >\n              <MenuItem onClick={handleLogout}>Logout</MenuItem>\n            </Menu>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default AdminHeader\n\n\n","import Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport RateReviewIcon from '@material-ui/icons/RateReview';\nimport ShopIcon from '@material-ui/icons/Shop';\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\nimport * as React from 'react';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link as RRLink } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    /**\n     * parent component is div[display=\"flex\"] to display Nav and Content horizontally.\n     **/\n    drawer: {\n      width: 240,\n      flexShrink: 0,\n      zIndex: 0,\n    },\n    drawerPaper: {\n      width: 240,\n    },\n    toolbar: theme.mixins.toolbar,\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(1),\n      fontWeight: theme.typography.fontWeightBold,\n    },\n    toggleBtnBox: {\n      position: 'fixed',\n      bottom: '10px',\n      left: '10px',\n    },\n  }),\n);\n\nconst AdminNavDrawer: React.FunctionComponent<{}> = (props) => {\n\n  // used to switch 'permanent' or 'temporary' nav menu based on this screen size \n  const theme = useTheme();\n  const isDownSm = useMediaQuery(theme.breakpoints.down('sm'));\n\n\n  const navList = [\n    {\n      title: \"General\",\n      items: [\n        {\n          label: \"Dashboard\",\n          Icon: DashboardIcon,\n          link: \"/admin/\",\n        },\n        {\n          label: \"Account\",\n          Icon: AccountCircleIcon,\n          link: \"/admin/account\",\n        },\n      ],\n    },\n    {\n      title: \"Management\",\n      items: [\n        {\n          label: \"Products\",\n          Icon: FavoriteIcon,\n          link: \"/admin/products\",\n        },\n        {\n          label: \"Categories\",\n          Icon: CategoryIcon,\n          link: \"/admin/categories\",\n        },\n        {\n          label: \"Orders\",\n          Icon: ShopIcon,\n          link: \"/admin/orders\",\n        },\n        {\n          label: \"Reviews\",\n          Icon: RateReviewIcon,\n          link: \"/admin/reviews\",\n        },\n        {\n          label: \"Customers\",\n          Icon: SupervisedUserCircleIcon,\n          link: \"/admin/customers\",\n        },\n      ],\n    },\n  ]\n\n  const [curAdminNavOpen, setAdminNavOpen] = React.useState<boolean>(false);\n\n  const classes = useStyles();\n\n  const toggleDrawer = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n\n    if (\n      event &&\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setAdminNavOpen(nextOpen);\n  }\n\n  const handleNavToggleClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    setAdminNavOpen(!curAdminNavOpen);\n  }\n\n  // render function\n\n  // render nav items\n  const renderNavItems: () => React.ReactNode = () => {\n    return navList.map((navSection) => {\n      return (\n        <React.Fragment key={navSection.title}>\n          <Typography variant=\"body1\" component=\"p\" align=\"left\" className={classes.title} >\n            {navSection.title}\n          </Typography>\n          <List>\n            {navSection.items.map((navItem, index) => {\n              const NavIcon = navItem.Icon;\n              return (\n                <ListItem button key={navItem.link} component={RRLink} to={navItem.link}>\n                  <ListItemIcon><NavIcon /></ListItemIcon>\n                  <ListItemText primary={navItem.label} />\n                </ListItem>\n              )\n            })}\n          </List>\n        </React.Fragment>\n      )\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Drawer\n        className={classes.drawer}\n        variant={(isDownSm) ? 'temporary' : \"permanent\"}\n        anchor=\"left\"\n        open={curAdminNavOpen}\n        onClose={toggleDrawer(false)}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        {(!isDownSm &&\n          <div className={classes.toolbar} />\n        )}\n        {renderNavItems()}\n      </Drawer>\n      {(isDownSm &&\n        <Box\n          component=\"div\"\n          className={classes.toggleBtnBox}\n        >\n          <IconButton onClick={handleNavToggleClickEvent}>\n            <AppsIcon />\n          </IconButton>\n        </Box>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default AdminNavDrawer\n\n","import * as React from 'react';\nimport AdminHeader from '../Admin/AdminHeader';\nimport AdminNavDrawer from '../Admin/AdminNavDrawer';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    gridContainer: {\n      flexWrap: \"nowrap\", \n\n      /**\n       * make 'navDrawer' toggleable\n       **/\n      [theme.breakpoints.down(\"sm\")]: {\n      }\n    },\n  }),\n);\n\n\nconst AdminBasePage: React.FunctionComponent<{}> = (props) => {\n\n  /**\n   * TODO: add base component for admin pages\n   **/\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AdminHeader />\n      <Grid\n        container\n        justify=\"center\"\n        className={classes.gridContainer}\n      >\n        <AdminNavDrawer />\n        {props.children}\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport default AdminBasePage\n\n\n\n","import * as React from 'react';\nimport AdminBasePage from 'components/pages/BasePage/AdminBasePage';\n\nexport const withAdminBasePage: (WrappedComponent: React.FunctionComponent) => React.FunctionComponent = (WrappedComponent) => {\n  return () => (\n    <AdminBasePage>\n      <WrappedComponent /> \n    </AdminBasePage>\n  )\n}\n\n","import { createSlice, PayloadAction, createAction } from '@reduxjs/toolkit'\n/**\n * if use 'createSlice', you CAN mutate its state directly safely. this is because \n * the reducers are passed to 'createReducer' (builtin function by redux/toolkit). it create a new object using the state.\n **/\n\n/**\n *\n * an action to reset cache with no after effect (e.g., requestTracker, domains)\n *\n **/\nexport const toggleLeftNavMenuActionCreator = createAction(\"rs/ui/leftNavMenu/toggle\")\nexport const toggleLeftNavMenuActionTypeName = toggleLeftNavMenuActionCreator().type\n\n\n/**\n * ui.leftNavMenu state Slice\n **/\nexport const leftNavMenuSlice = createSlice({ \n  name: \"ui/leftNavMenu\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const leftNavMenuSliceReducer = leftNavMenuSlice.reducer\nexport const leftNavMenuActions = leftNavMenuSlice.actions\n\n\n/**\n * ui.rightNavMenu state Slice\n **/\nexport const rightNavMenuSlice = createSlice({ \n  name: \"ui/rightNavMenu\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const rightNavMenuSliceReducer = rightNavMenuSlice.reducer\nexport const rightNavMenuActions = rightNavMenuSlice.actions\n\n\n/**\n * ui.searchModal state Slice\n **/\nexport const searchModalSlice = createSlice({ \n  name: \"ui/searchModal\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const searchModalSliceReducer = searchModalSlice.reducer\nexport const searchModalActions = searchModalSlice.actions\n\n/**\n * ui.cartModal state Slice\n **/\nexport const cartModalSlice = createSlice({ \n  name: \"ui/cartModal\", // a name used in action type\n  initialState: false, \n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    open: (state: boolean) => true,\n    close: (state: boolean) => false,\n    update: (state: boolean, action: PayloadAction<boolean>) => action.payload,\n    toggle: (state: boolean) => !state,\n  }\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n}) \n\nexport const cartModalSliceReducer = cartModalSlice.reducer\nexport const cartModalActions = cartModalSlice.actions\n","import Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { Link as RRLink } from \"react-router-dom\";\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cartModalActions } from 'reducers/slices/ui';\nimport { constructLinkWrapper } from 'src/componentUtils';\nimport { mSelector } from 'src/selectors/selector';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuItem: {\n      margin: theme.spacing(0, 2, 0, 2),\n      fontWeight: theme.typography.fontWeightBold\n    },\n  }),\n);\n\nconst GuestHeaderMenuItems: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  /**\n   * TODO: create cart state in redux to keep track of products for guest users\n   *\n   *    - need to be persist in local storage/session storage otherwise, the data is vanished after refresh\n   *\n   **/\n\n  const dispatch = useDispatch();\n\n  // cur cart item #\n  const curNumberOfCartItems = useSelector(mSelector.makeNumberOfCartItemSelector());\n\n  const handleCartModalOpenClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(cartModalActions.toggle());\n  }\n\n  return (\n    <Grid item>\n      <Link color=\"inherit\" className={classes.menuItem} component={RRLink} to=\"/login\">\n        Log In\n      </Link>\n      <Link color=\"inherit\" className={classes.menuItem} component={RRLink} to=\"/signup\">\n        Sign Up\n      </Link>\n      <IconButton onClick={handleCartModalOpenClick}>\n        <Badge badgeContent={curNumberOfCartItems} color=\"error\">\n          <ShoppingCartIcon />\n        </Badge>\n      </IconButton>\n    </Grid>\n  )\n}\n\nexport default GuestHeaderMenuItems\n\n\n\n","import Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { authActions } from 'reducers/slices/app';\nimport { cartModalActions } from 'reducers/slices/ui';\nimport { mSelector } from 'src/selectors/selector';\n\ndeclare interface MenuItemType {\n  url: string\n  label: string\n  isLogout: boolean\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuItem: {\n      margin: theme.spacing(0, 2, 0, 2),\n      fontWeight: theme.typography.fontWeightBold\n    },\n  }),\n);\n\nconst MemberHeaderMenuItems: React.FunctionComponent<{}> = (props) => {\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // data\n  const menuItemList: MenuItemType[] = React.useMemo(() => [\n    {\n      url: \"/account\",\n      label: \"Accounts\",\n      isLogout: false,\n    },\n    {\n      url: \"/wishlist\",\n      label: \"Wish List\",\n      isLogout: false,\n    },\n    {\n      url: \"/orders\",\n      label: \"Orders\",\n      isLogout: false,\n    },\n    {\n      url: \"/\",\n      label: \"Log Out\",\n      isLogout: true,\n    },\n  ], []);\n\n  // styles\n  const classes = useStyles();\n\n  // cur cart item #\n  const curNumberOfCartItems = useSelector(mSelector.makeNumberOfCartItemSelector());\n\n  // responsive\n  const theme = useTheme();\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\n\n  // cart icon click\n  const dispatch = useDispatch();\n\n  const handleCartModalOpenClick: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n    dispatch(cartModalActions.toggle());\n  }\n\n  // drop menu stuff\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleDropDownMenuOpenClickEvent = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleDropDownMenuCloseClickEvent = () => {\n    setAnchorEl(null);\n  };\n\n  // logout event handler\n  const handleLogout: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = (e) => {\n\n    e.preventDefault()\n\n    // request\n    api.request({\n      method: 'post',\n      url: API1_URL + `/logout`,\n      data: null \n    }).then((data) => {\n\n      // fetch again\n      dispatch(authActions.logout())\n\n      enqueueSnackbar(\"logged out successfully.\", { variant: \"success\" })\n    }).catch((error: AxiosError) => {\n      enqueueSnackbar(error.message, { variant: \"error\" })\n    })\n  }\n\n  // rendering stuff\n  const renderMenuItemListForLargeScreen: () => React.ReactNode = () => {\n    return menuItemList.map((menuItem: MenuItemType) => {\n\n      const linkProps = {\n        className: classes.menuItem,\n        component: RRLink,\n        to: menuItem.url,\n      }\n\n      return (\n        <Link key={menuItem.url}\n          color=\"inherit\"\n          {...linkProps}\n        >\n          {menuItem.label}\n        </Link>\n      )\n    })\n  }\n\n  const renderMenuItemListForSmallScreen: () => React.ReactNode = () => {\n    return menuItemList.map((menuItem: MenuItemType) => {\n      return (\n        <MenuItem key={menuItem.url} onClick={handleDropDownMenuCloseClickEvent}>\n          <Link\n            color=\"inherit\"\n            className={classes.menuItem}\n            component={RRLink}\n            to={menuItem.url}\n          >\n            {menuItem.label}\n          </Link>\n        </MenuItem>\n      )\n    })\n  }\n\n  return (\n    <Grid item>\n      <IconButton onClick={handleCartModalOpenClick}>\n        <Badge badgeContent={curNumberOfCartItems} color=\"error\">\n          <ShoppingCartIcon />\n        </Badge>\n      </IconButton>\n      {(isMdUp &&\n        <React.Fragment>\n          {renderMenuItemListForLargeScreen()}\n          <Button onClick={handleLogout}>\n            Logout\n          </Button>\n        </React.Fragment>\n      )}\n      {(!isMdUp &&\n        <React.Fragment>\n          <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleDropDownMenuOpenClickEvent}>\n            Open Menu\n            </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleDropDownMenuCloseClickEvent}\n          >\n            {renderMenuItemListForSmallScreen()}\n            <Button onClick={handleLogout}>\n              Logout\n            </Button>\n          </Menu>\n        </React.Fragment>\n      )}\n    </Grid>\n  )\n}\n\nexport default MemberHeaderMenuItems\n","import AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AuthType, UserTypeEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport GuestHeaderMenuItems from './GuestHeaderMenuItem';\nimport MemberHeaderMenuItems from './MemberHeaderMenuItems';\nimport { Link as RRLink } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      background: \"rgba(255, 255, 255, 1)\",\n      color: theme.palette.text.primary,\n    },\n    menuItem: {\n      margin: theme.spacing(0, 2, 0, 2),\n      fontWeight: theme.typography.fontWeightBold\n    },\n  }),\n);\n\nconst Header: React.FunctionComponent<{}> = (props) => {\n\n  const auth: AuthType = useSelector(mSelector.makeAuthSelector())\n\n  const classes = useStyles();\n\n  /**\n   * TODO: need to use <Link> from 'react-router-dom' with <Link> from 'mui'. otherwise, all state is refreshed all the time you click a link\n   **/\n\n  return (\n    <AppBar position=\"sticky\" className={classes.appBar}>\n      <Toolbar >\n        <Grid\n          justify=\"space-between\"\n          alignItems=\"center\"\n          container\n        >\n          <Grid item>\n            <Link color=\"inherit\" component={RRLink} to=\"/\">\n              <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n                <SentimentSatisfiedOutlinedIcon />\n              </IconButton>\n            </Link>\n          </Grid>\n          {(auth.userType === UserTypeEnum.GUEST &&\n            <GuestHeaderMenuItems />\n          )}\n          {(auth.userType === UserTypeEnum.MEMBER &&\n            <MemberHeaderMenuItems />\n          )}\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { UserType } from 'domain/user/types';\nimport * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"relative\",\n    },\n    btnBox: {\n      position: \"absolute\",\n      top: \"50%\",\n      right: 0,\n      // '-50%' is not really center vertically\n      transform: 'translateY(-40%)',\n    }\n  }),\n);\n\n/**\n * member or admin account management component\n **/\nconst SearchForm: React.FunctionComponent<{}> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  // sample autocomplete list \n  const testItemList = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\",\n    \"ddd\",\n    \"eee\",\n    \"fff\",\n    \"ggg\",\n    \"hhh\",\n  ];\n\n  return (\n    <Box className={classes.root}>\n      <Autocomplete\n        color={\"secondary\"}\n        freeSolo\n        id=\"product-search-autocomplete-input\"\n        disableClearable\n        options={testItemList}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search Your Products\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n      />\n      <IconButton className={classes.btnBox}>\n        <SearchIcon fontSize={\"large\"}/>        \n      </IconButton>\n    </Box>\n  )\n}\n\nexport default SearchForm\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport SearchForm from 'components/common/SearchForm';\nimport * as React from 'react';\nimport { Link as RRLink } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    footer: {\n      backgroundColor: theme.palette.secondary.main,\n      color: \"#FFF\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(5),\n    },\n    gridBox: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n      maxWidth: \"1500px\",\n      margin: \"0 auto\",\n    },\n    columnOne: {\n      padding: theme.spacing(2),\n    },\n    columnTwo: {\n      padding: theme.spacing(2),\n    },\n    columnThree: {\n      padding: theme.spacing(2),\n    },\n    bottom: {\n      padding: theme.spacing(2),\n    },\n    title: {\n      margin: `${theme.spacing(1)}px 0`,\n    },\n    parag: {\n    },\n    linkBox: {\n      padding: theme.spacing(1),\n    },\n    policyLinkBox: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"center\",\n    },\n    policyLink: {\n      margin: `0 ${theme.spacing(2)}px`,\n    }\n  }),\n);\nconst Footer: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  return (\n    <footer className={classes.footer}>\n      <Grid\n        container\n        className={classes.gridBox}\n      >\n        <Grid\n          item\n          className={classes.columnOne}\n          xs={12}\n          md={4}\n        >\n          <Typography variant=\"h6\" component=\"h6\" className={classes.title} >\n            <SentimentSatisfiedOutlinedIcon />\n            {\"Compnay Name\"}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\" className={classes.parag} >\n            {\"company description here. it might be a long sentense so should be do something different than the other component.\"}\n          </Typography>\n          <Box className={classes.linkBox}>\n            <Link href=\"https://google.com\" target=\"_blank\">\n              <FacebookIcon fontSize=\"large\" />\n            </Link>\n            <Link href=\"https://google.com\" target=\"_blank\">\n              <InstagramIcon fontSize=\"large\" />\n            </Link>\n            <Link href=\"https://google.com\" target=\"_blank\">\n              <TwitterIcon fontSize=\"large\" />\n            </Link>\n            <Link href=\"https://google.com\" target=\"_blank\">\n              <YouTubeIcon fontSize=\"large\" />\n            </Link>\n            <Link component={RRLink} to=\"/contact\">\n              <AlternateEmailIcon fontSize=\"large\" />\n            </Link>\n          </Box>\n        </Grid>\n        <Grid\n          item\n          className={classes.columnTwo}\n          xs={12}\n          md={4}\n        >\n          <Typography variant=\"h6\" component=\"h6\" className={classes.title} >\n            {\"Links\"}\n          </Typography>\n          <List>\n            <ListItem button component={RRLink} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n            <ListItem button component={RRLink} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n            <ListItem button component={RRLink} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n            <ListItem button component={RRLink} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n            <ListItem button component={RRLink} to=\"/\">\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Home\" />\n            </ListItem>\n          </List>\n        </Grid>\n        <Grid\n          item\n          className={classes.columnThree}\n          xs={12}\n          md={4}\n        >\n          <Typography variant=\"h6\" component=\"h6\" className={classes.title} >\n            {\"Product Search\"}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\" className={classes.parag} >\n            {\"Let's explore our products.\"}\n          </Typography>\n          <SearchForm />\n        </Grid>\n      </Grid>\n      <Box className={classes.bottom}>\n        <Box className={classes.policyLinkBox}>\n          {/** might use this dialog rather than page **/}\n          <Link className={classes.policyLink} component={RRLink} to=\"/return-policy\">\n            {\"Return Policy\"}\n          </Link>\n          <Link className={classes.policyLink} component={RRLink} to=\"/privacy-policy\">\n            {\"Privacy Policy\"}\n          </Link>\n          <Link className={classes.policyLink} component={RRLink} to=\"/terms-and-conditions\">\n            {\"Terms and Conditions\"}\n          </Link>\n        </Box>\n        <Typography variant=\"body2\" component=\"p\" className={classes.title} >\n          {\"All Right Reserved by @Company Name 2021\"}\n        </Typography>\n      </Box>\n    </footer>\n  )\n}\n\nexport default Footer\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport CartItem from 'components/common/CartItem';\nimport { calcSubTotalPriceAmount, calcSubTotalProductNumbers, validateCartItemsForCheckout } from 'domain/cart';\nimport { CartItemType } from 'domain/cart/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { messageActions } from 'reducers/slices/app';\nimport { fetchCartItemActionCreator } from 'reducers/slices/domain/cartItem';\nimport { MessageTypeEnum, UserTypeEnum } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { cadCurrencyFormat, getNanoId } from 'src/utils';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    }\n  }),\n);\n\ndeclare type CartBoxPropsType = {\n  toggleDrawer?: (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => void\n}\n\n/**\n * member & guest\n *\n **/\nconst CartBox: React.FunctionComponent<CartBoxPropsType> = (props) => {\n\n  const classes = useStyles();\n\n  const auth = useSelector(mSelector.makeAuthSelector());\n\n  const dispatch = useDispatch()\n\n  const curCartItems = useSelector(mSelector.makeCartItemSelector())\n\n  const history = useHistory();\n  \n  // fetch cart item from api (member only)\n  React.useEffect(() => {\n    if (auth.userType === UserTypeEnum.MEMBER) {\n      dispatch(fetchCartItemActionCreator());\n    }\n  }, [\n  ])\n\n  const renderCartItems: () => React.ReactNode = () => {\n    return curCartItems.map((cartItem: CartItemType) => {\n      return (\n        <CartItem \n          value={cartItem} \n          key={cartItem.cartItemId} \n        />\n      )\n    })\n  }\n\n  const handleCheckoutClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (validateCartItemsForCheckout(curCartItems)) {\n      history.push(\"/checkout\");\n\n      if (props.toggleDrawer) {\n        props.toggleDrawer(false)(e);\n      }\n    } else {\n      dispatch(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: \"please select at least one product to buy.\",\n        }) \n      );\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {(curCartItems.length === 0 &&\n        <React.Fragment>\n        <Typography variant=\"body1\" component=\"p\" align=\"center\">\n          {\"Oops, Your cart is empty.\"}\n        </Typography>\n        <Box component=\"div\" className={classes.controllerBox}>\n          <Button>  \n            {\"go search\"}\n          </Button>\n        </Box>\n        </React.Fragment>\n      )}\n      {(curCartItems.length > 0 &&\n        <React.Fragment>\n          {renderCartItems()}\n          <Box component=\"div\" className={classes.subtotalBox}>\n            <Typography variant=\"subtitle1\" component=\"h3\" align=\"right\" >\n               Subtotal (<b>{calcSubTotalProductNumbers(curCartItems)}</b>  items): $<b>{cadCurrencyFormat(calcSubTotalPriceAmount(curCartItems))}</b>\n            </Typography>\n          </Box>\n          <Box component=\"div\" className={classes.controllerBox}>\n            <Button onClick={handleCheckoutClick}>\n              {\"Checkout\"}\n            </Button>\n          </Box>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default CartBox\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport CartBox from '../CartBox';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cartModalActions } from 'reducers/slices/ui';\nimport { mSelector } from 'src/selectors/selector';\nimport Typography from '@material-ui/core/Typography';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { IconButton } from '@material-ui/core';\n\n/**\n * TODO: enable scrollbar (vertical) on this drawer.\n *\n * i thought it is default, but not showing.\n *\n **/\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"relative\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    drawer: {\n      flexShrink: 0,\n      zIndex: 0,\n\n      [theme.breakpoints.down('xs')]: {\n        width: \"100%\",\n      }\n    },\n    drawerPaper: {\n\n      padding: `0 ${theme.spacing(1)}px`,\n      overflowY: \"scroll\",\n\n      [theme.breakpoints.down('xs')]: {\n        width: \"100%\",\n      }\n    },\n    toolbar: theme.mixins.toolbar,\n    closeBtn: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n    }\n  }),\n);\n\nconst CartDrawer: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const curCartOpen = useSelector(mSelector.makeCartModalSelector())\n\n  const toggleDrawer = (nextOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    dispatch(cartModalActions.update(nextOpen));\n  }\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      anchor=\"right\"\n      open={curCartOpen}\n      onClose={toggleDrawer(false)}\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      ModalProps={{\n        keepMounted: false, // make this false. otherwise, every time when page change, this send an api request to fetch current cart items. (keepMouted: true => Better open performance on mobile).\n      }}\n    >\n      {/**<div className={classes.toolbar} />**/}\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Cart\"}\n      </Typography>\n      <CartBox toggleDrawer={toggleDrawer}/>\n      <IconButton onClick={toggleDrawer(false)} className={classes.closeBtn}>\n        <CancelIcon />\n      </IconButton>\n    </Drawer>\n  )\n}\n\nexport default CartDrawer\n\n\n\n\n\n","import Header from 'components/common/Header';\nimport * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Footer from '../Footer';\nimport CartDrawer from 'components/common/CartDrawer';\n\nconst BasePage: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <React.Fragment>\n      <Header />\n      <Container\n        maxWidth={'lg'}\n        disableGutters={true}\n      >\n        {props.children}\n      </Container>\n      <Footer />\n      <CartDrawer />\n    </React.Fragment>\n  )\n}\n\nexport default BasePage\n\n\n","import * as React from 'react';\nimport BasePage from 'components/pages/BasePage';\n\nexport const withBasePage: (WrappedComponent: React.FunctionComponent) => React.FunctionComponent = (WrappedComponent) => {\n  return () => (\n    <BasePage>\n     <WrappedComponent /> \n    </BasePage>\n  )\n}\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { ContactFormDataType, ContactFormValidationDataType, defaultContactFormValidationData, generateDefaultContactFormData } from 'domain/user/types';\nimport { useValidation } from 'hooks/validation';\nimport { contactSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      margin: theme.spacing(2),\n      width: 300,\n    },\n    formEmail: {\n      margin: theme.spacing(2),\n      width: \"80%\",\n    },\n    formTitle: {\n      margin: theme.spacing(2),\n      width: \"80%\",\n    },\n    actionBox: {\n      textAlign: \"right\",\n      margin: `${theme.spacing(2)}px 0`,\n    },\n  }),\n);\n\n/**\n * guest & member contactform page\n *\n **/\nconst ContactForm: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n  \n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [curContactFormState, setContactFormState] = React.useState<ContactFormDataType>(generateDefaultContactFormData())\n\n  const [curContactFormValidationState, setContactFormValidationState] = React.useState<ContactFormValidationDataType>(defaultContactFormValidationData)\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curContactFormState,\n    curValidationDomain: curContactFormValidationState,\n    schema: contactSchema,\n    setValidationDomain: setContactFormValidationState,\n    defaultValidationDomain: defaultContactFormValidationData,\n  })\n\n  // event handlers\n  const handleFirstNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextFirstName = e.currentTarget.value\n    updateValidationAt(\"firstName\", e.currentTarget.value);\n    setContactFormState((prev: ContactFormDataType) => ({\n      ...prev,\n      firstName: nextFirstName\n    }));\n  }\n\n  const handleLastNameInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextLastName = e.currentTarget.value\n    updateValidationAt(\"lastName\", e.currentTarget.value);\n    setContactFormState((prev: ContactFormDataType) => ({\n      ...prev,\n      lastName: nextLastName\n    }));\n  }\n\n  const handleEmailInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextEmail = e.currentTarget.value\n    updateValidationAt(\"email\", e.currentTarget.value);\n    setContactFormState((prev: ContactFormDataType) => ({\n      ...prev,\n      email: nextEmail\n    }));\n  }\n\n  const handleTitleInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextTitle = e.currentTarget.value\n    updateValidationAt(\"title\", e.currentTarget.value);\n    setContactFormState((prev: ContactFormDataType) => ({\n      ...prev,\n      title: nextTitle\n    }));\n  }\n\n  const handleDescriptionInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextDescription = e.currentTarget.value\n    updateValidationAt(\"description\", e.currentTarget.value);\n    setContactFormState((prev: ContactFormDataType) => ({\n      ...prev,\n      description: nextDescription\n    }));\n  }\n\n  // event handler to submit\n  const handleContactSendClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curContactFormState)\n\n    console.log(isValid);\n\n    if (isValid) {\n\n      // pass \n      console.log(\"passed\")\n\n      console.log(\"new product creation\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/contact`,\n        data: curContactFormState, // application/json since object\n      }).then((data) => {\n\n        enqueueSnackbar(\"updated successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n\n    } else {\n      console.log(\"failed\")\n      updateAllValidation()\n    }\n  }\n\n\n  return (\n    <form className={classes.form} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"first-name\"\n        label=\"First Name\"\n        className={classes.formControl}\n        value={curContactFormState.firstName}\n        onChange={handleFirstNameInputChangeEvent}\n        helperText={curContactFormValidationState.firstName}\n        error={curContactFormValidationState.firstName !== \"\"}\n\n      />\n      <TextField\n        id=\"last-name\"\n        label=\"Last Name\"\n        className={classes.formControl}\n        value={curContactFormState.lastName}\n        onChange={handleLastNameInputChangeEvent}\n        helperText={curContactFormValidationState.lastName}\n        error={curContactFormValidationState.lastName !== \"\"}\n      />\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        className={`${classes.formControl}`}\n        value={curContactFormState.email}\n        onChange={handleEmailInputChangeEvent}\n        helperText={curContactFormValidationState.email}\n        error={curContactFormValidationState.email !== \"\"}\n      /><br />\n      <TextField\n        id=\"title\"\n        label=\"Title\"\n        className={`${classes.formTitle}`}\n        value={curContactFormState.title}\n        onChange={handleTitleInputChangeEvent}\n        helperText={curContactFormValidationState.title}\n        error={curContactFormValidationState.title !== \"\"}\n      /><br />\n      <TextField\n        id=\"description\"\n        label=\"Description\"\n        multiline\n        rows={10}\n        className={`${classes.formTitle}`}\n        value={curContactFormState.description}\n        onChange={handleDescriptionInputChangeEvent}\n        helperText={curContactFormValidationState.description}\n        error={curContactFormValidationState.description !== \"\"}\n      />\n      <Box component=\"div\" className={classes.actionBox}>\n        <Button onClick={handleContactSendClickEvent}>\n          Send\n        </Button>\n      </Box>\n    </form>\n  )\n}\n\nexport default ContactForm\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactForm from 'components/common/ContactForm';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    }\n  }),\n);\n\n/**\n * guest & member contact page\n *\n **/\nconst Contact: React.FunctionComponent<{}> = (props) => {\n\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Contact\"}\n      </Typography>\n      <Typography variant=\"body1\" component=\"p\" align=\"center\" >\n        {\"If you have any inquiry/feedback about my company, products, and your purchase, please use this contact form. We will respond your request as soon as possible.\"}\n      </Typography>\n      <ContactForm />\n    </React.Fragment>\n  )\n}\n\nexport default Contact\n\n\n","import Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport OrderTimeline from 'components/common/OrderTimeline';\nimport ProductHorizontalCard from 'components/common/ProductCard/ProductHorizontalCard';\nimport UserCard from 'components/common/UserCard';\nimport { OrderDetailType, OrderType } from 'domain/order/types';\nimport * as React from 'react';\nimport { UserTypeEnum } from 'src/app';\nimport OrderDetail from 'components/common/OrderDetail';\nimport PhoneCard from 'components/pages/Admin/AdminOrder/AdminOrderForm/PhoneCard';\nimport AddressCard from 'components/pages/Admin/AdminOrder/AdminOrderForm/AddressCard';\n\ninterface OrderFormPropsType {\n  order: OrderType\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    orderDetailBox: {\n\n    },\n    title: {\n      textAlign: \"center\",\n      fontWeight: theme.typography.fontWeightBold\n    },\n  }),\n);\n\n/**\n * member or admin account management component\n *\n * process:\n *\n *    - 1. request to grab information about this user\n *\n *    - 2. display the info to this component\n *\n *    - 3. the user modify the input\n *\n *    - 4. every time the user modify the input, validate each of them\n *\n *    - 5. the user click the save button\n *\n *    - 6. display result popup message\n **/\nconst OrderForm: React.FunctionComponent<OrderFormPropsType> = (props) => {\n\n  // mui: makeStyles\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n    >\n      <Grid\n        item\n        xs={12}\n        className={classes.orderDetailBox}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Basic Information\"}\n        </Typography>\n        <OrderDetail order={props.order} />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Customer\"}\n        </Typography>\n          <UserCard \n            firstName={props.order.orderFirstName}\n            lastName={props.order.orderLastName}\n            email={props.order.orderEmail}\n            userType={props.order.user ? props.order.user.userType.userType : UserTypeEnum.GUEST}\n            avatarImagePath={props.order.user ? props.order.user.avatarImagePath : null}\n          />\n        <Grid\n          container\n          justify=\"center\"\n        >\n          <Grid\n            item\n            xs={12}\n            md={4}\n\n          >\n            <PhoneCard phone={props.order.orderPhone} />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={4}\n          >\n            <AddressCard\n              address={props.order.shippingAddress}\n              headerIcon={<LocalShippingIcon />}\n              title={\"Shipping Address\"}\n            />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={4}\n          >\n            <AddressCard\n              address={props.order.billingAddress}\n              headerIcon={<ReceiptIcon />}\n              title={\"Billing Address\"}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Products\"}\n        </Typography>\n        {\n          props.order.orderDetails.map((orderDetail: OrderDetailType, index: number) => (\n            <ProductHorizontalCard orderDetail={orderDetail} key={index} />\n          ))\n        }\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"subtitle1\" component=\"h6\" className={classes.title}>\n          {\"Status\"}\n        </Typography>\n        <OrderTimeline order={props.order} />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default OrderForm\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { mSelector } from 'src/selectors/selector';\nimport OrderForm from './OrderForm';\nimport { fetchSingleAuthOrderActionCreator } from 'reducers/slices/app';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    }\n  }),\n);\n\n/**\n * guest & member orderdetail page\n *\n **/\nconst Order: React.FunctionComponent<{}> = (props) => {\n\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const { orderId } = useParams();\n\n  const auth = useSelector(mSelector.makeAuthSelector())\n  const curOrder = useSelector(mSelector.makeOrderByIdSelector(orderId))\n\n  React.useEffect(() => {\n\n    if (!curOrder) {\n      dispatch(\n        fetchSingleAuthOrderActionCreator({\n          orderId: orderId,\n          userId: auth.user.userId,\n        }) \n      )\n    }\n  }, [\n     \n  ])\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Order\"}\n      </Typography>\n      {(curOrder &&\n        <OrderForm order={curOrder} />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default Order\n\n\n\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      maxWidth: 300,\n      width: \"80%\",\n      margin: \"20px auto\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n    },\n    forgetPasswordBox: {\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(2, 0, 2, 0),\n    },\n    contentBox: {\n      textAlign: \"center\"\n    }\n  }),\n);\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nenum AccountVerifyStatusEnum {\n  PROCESSING,\n  SUCCEEDED,\n  FAILED_SINCE_NO_LOGIN,\n  FAILED_SINCE_INVALID_TOKEN,\n  FAILED_SINCE_OTHER_REASON\n}\n\n\n/**\n * member account verify page\n *\n * - a temp user visit this page when they click the link of a verification email.\n *\n * - make this available to member/guest user.\n *\n * - use cases:\n *\n *  - verified successfully.\n *\n *    - show success message\n *\n *    - redirect to home\n *\n *  - could not verified since the temp user does not log in.\n *\n *    - show error message \n *\n *    - display 'login' button.\n *\n *  - could not verified since the token is expired or invalid.\n *\n *    - show error message.\n *\n *    - display 're-issue' button\n *\n **/\nconst AccountVerify: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const query = useQuery()\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const verificationToken = query.get(\"account-verify-token\")\n\n  const [curStatus, setStatus] = React.useState<AccountVerifyStatusEnum>(AccountVerifyStatusEnum.PROCESSING)\n\n  /**\n   * verify with token.\n   *\n   * - only send once.\n   *\n   * - /account-verify (GET) \n   *\n   *\n   **/\n  React.useEffect(() => {\n\n    // make sure it is sent only once\n    if (curStatus === AccountVerifyStatusEnum.PROCESSING) {\n\n      console.log(\"make sure this only called once!\")\n\n      // request\n      api.request({\n        method: 'GET',\n        url: API1_URL + `/account-verify?account-verify-token=${verificationToken}`,\n      }).then((data) => {\n        /**\n         *  verification sueceeded.\n         **/\n        setStatus(AccountVerifyStatusEnum.SUCCEEDED)\n\n        /**\n         * TODO: return updated user so dispatch an action to update auth.user\n         **/\n        enqueueSnackbar(\"verified successfully.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n\n        /**\n         * if this can communicate with the backend, it will include response so don't worry about 'error.response is undefined' error at dev.\n         **/\n        if (error.response.status === 401) {\n          // authorization failed since not log in or try to verify other temp user.\n          setStatus(AccountVerifyStatusEnum.FAILED_SINCE_NO_LOGIN)\n        } else if (error.response.status === 400) {\n          // authorization failed since invalid token \n          setStatus(AccountVerifyStatusEnum.FAILED_SINCE_INVALID_TOKEN)\n        } else {\n          setStatus(AccountVerifyStatusEnum.FAILED_SINCE_OTHER_REASON)\n        }\n\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n\n    }\n  }, [])\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      direction=\"column\"\n      className={classes.box}\n    >\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"login-logo\">\n        <SentimentSatisfiedOutlinedIcon />\n      </IconButton>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Verify Your Account\"}\n      </Typography>\n      {(curStatus === AccountVerifyStatusEnum.PROCESSING &&\n        <Box className={classes.contentBox}>\n          <CircularProgress />\n          <Typography variant=\"subtitle1\" component=\"p\" align=\"center\" className={classes.title} >\n            {\"activating your account...\"}\n          </Typography>\n        </Box>\n      )}\n      {(curStatus === AccountVerifyStatusEnum.SUCCEEDED &&\n        <Box className={classes.contentBox}>\n          <Typography variant=\"subtitle1\" component=\"p\" align=\"center\" className={classes.title} >\n            {\"verified your account successfully.\"}\n          </Typography>\n          <Button>\n            {\"Visit Home\"}\n          </Button>\n        </Box>\n      )}\n      {(curStatus === AccountVerifyStatusEnum.FAILED_SINCE_NO_LOGIN &&\n        <Box className={classes.contentBox}>\n          <Typography variant=\"subtitle1\" component=\"p\" align=\"center\" className={classes.title} >\n            {\"seems like you are not logged in. please login first and click the link again.\"}\n          </Typography>\n          <Button>\n            {\"Go to Login Page\"}\n          </Button>\n        </Box>\n      )}\n      {(curStatus === AccountVerifyStatusEnum.FAILED_SINCE_INVALID_TOKEN &&\n        <Box className={classes.contentBox}>\n          <Typography variant=\"subtitle1\" component=\"p\" align=\"center\" className={classes.title} >\n            {\"your verification token is invalid (e.g., expired or wrong value). please re-issue the token again. we will send the verification email again.\"}\n          </Typography>\n          <Button>\n            {\"Issue the Token Again\"}\n          </Button>\n        </Box>\n      )}\n      {(curStatus === AccountVerifyStatusEnum.FAILED_SINCE_OTHER_REASON &&\n        <Box className={classes.contentBox}>\n          <Typography variant=\"subtitle1\" component=\"p\" align=\"center\" className={classes.title} >\n            {\"we failed to process your request. please contact to our customer service.\"}\n          </Typography>\n          <Button>\n            {\"Go to Contact Form\"}\n          </Button>\n        </Box>\n      )}\n    </Grid>\n  )\n}\n\nexport default AccountVerify\n\n\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { AxiosError } from 'axios';\nimport { api } from 'configs/axiosConfig';\nimport { useValidation } from 'hooks/validation';\nimport { resetPasswordSchema } from 'hooks/validation/rules';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router';\n\nexport declare type ResetPasswordDataType = {\n  confirm: string\n  password: string\n}\n\nconst defaultResetPasswordData: ResetPasswordDataType = {\n  confirm: \"\",\n  password: \"\",\n}\n\nexport declare type ResetPasswordValidationDataType = {\n  confirm?: string\n  password?: string\n}\n\nconst defaultResetPasswordValidationData: ResetPasswordValidationDataType = {\n  confirm: \"\",\n  password: \"\",\n}\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    box: {\n      maxWidth: 500,\n      width: \"80%\",\n      margin: \"20px auto\",\n    },\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(3)\n    },\n    form: {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    formControl: {\n      // need to be 'flex', otherwise, default animation (e.g., when click the input, the placeholder goes up to the left top) collapses.\n      width: \"80%\",\n      margin: theme.spacing(2),\n    },\n    forgetPasswordBox: {\n      margin: theme.spacing(1),\n    },\n    actionBox: {\n      textAlign: \"center\",\n      margin: theme.spacing(2, 0, 2, 0),\n    },\n    cursorLink: {\n      cursor: \"pointer\",\n    }\n  }),\n);\n\nconst ResetPassword: React.FunctionComponent<{}> = (props) => {\n\n  const classes = useStyles();\n\n  const query = useQuery()\n  \n  // reset password token (get from forgotten password link\n  const forgotPasswordToken = query.get(\"forgot-password-token\")\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar } = useSnackbar();\n\n  // temp user account state\n  const [curResetPasswordState, setResetPasswordState] = React.useState<ResetPasswordDataType>(defaultResetPasswordData);\n\n  // validation logic (should move to hooks)\n  const [curResetPasswordValidationState, setResetPasswordValidationState] = React.useState<ResetPasswordValidationDataType>(defaultResetPasswordValidationData);\n\n  const { updateValidationAt, updateAllValidation, isValidSync } = useValidation({\n    curDomain: curResetPasswordState,\n    curValidationDomain: curResetPasswordValidationState,\n    schema: resetPasswordSchema,\n    setValidationDomain: setResetPasswordValidationState,\n    defaultValidationDomain: defaultResetPasswordValidationData,\n  })\n\n  // event handlers\n  const handleConfirmInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextConfirm = e.currentTarget.value\n    updateValidationAt(\"confirm\", e.currentTarget.value);\n    setResetPasswordState((prev: ResetPasswordDataType) => ({\n      ...prev,\n      confirm: nextConfirm\n    }));\n  }\n\n  const handlePasswordInputChangeEvent: React.EventHandler<React.ChangeEvent<HTMLInputElement>> = (e) => {\n    const nextPassword = e.currentTarget.value\n    updateValidationAt(\"password\", e.currentTarget.value);\n    setResetPasswordState((prev: ResetPasswordDataType) => ({\n      ...prev,\n      password: nextPassword\n    }));\n  }\n\n  // event handler to submit\n  const handleUserAccountSaveClickEvent: React.EventHandler<React.MouseEvent<HTMLButtonElement>> = async (e) => {\n\n    const isValid: boolean = isValidSync(curResetPasswordState)\n\n    if (isValid) {\n      // pass \n      console.log(\"passed\")\n      // request\n      api.request({\n        method: 'POST',\n        url: API1_URL + `/reset-password`,\n        data: {\n          password: curResetPasswordState.password,\n          token: forgotPasswordToken,\n        },\n      }).then((data) => {\n        enqueueSnackbar(\"password was successfully reset.\", { variant: \"success\" })\n      }).catch((error: AxiosError) => {\n        enqueueSnackbar(error.message, { variant: \"error\" })\n      })\n    } else {\n      updateAllValidation()\n    }\n  }\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      direction=\"column\"\n      className={classes.box}\n    >\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"login-logo\">\n        <SentimentSatisfiedOutlinedIcon />\n      </IconButton>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Reset Password\"}\n      </Typography>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curResetPasswordState.password}\n          onChange={handlePasswordInputChangeEvent}\n          helperText={curResetPasswordValidationState.password}\n          error={curResetPasswordValidationState.password !== \"\"}\n        />\n        <TextField\n          id=\"confirm\"\n          label=\"Confirm\"\n          type=\"password\"\n          className={classes.formControl}\n          value={curResetPasswordState.confirm}\n          onChange={handleConfirmInputChangeEvent}\n          helperText={curResetPasswordValidationState.confirm}\n          error={curResetPasswordValidationState.confirm !== \"\"}\n        />\n        <Box component=\"div\" className={classes.actionBox}>\n          <Button onClick={handleUserAccountSaveClickEvent}>\n            Reset Password\n          </Button>\n        </Box>\n      </form>\n    </Grid>\n  )\n}\n\nexport default ResetPassword\n\n\n\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\nimport Pagination from '@material-ui/lab/Pagination/Pagination';\nimport { calcOrderTotalCost, calcOrderTotalItemNumber, getCurOrderStatus } from 'domain/order';\nimport { OrderType } from 'domain/order/types';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RRLink } from \"react-router-dom\";\nimport { fetchAuthOrderActionCreator } from 'reducers/slices/app';\nimport { fetchOrderActionCreator, orderPaginationPageActions } from 'reducers/slices/domain/order';\nimport { mSelector } from 'src/selectors/selector';\nimport { cadCurrencyFormat, toDateString } from 'src/utils';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    },\n    card: {\n    },\n    cardContent: {\n    },\n    media: {\n      // aspect ratio: 1:1\n      height: 0,\n      paddingTop: '100%',\n      marginTop: '30'\n    },\n    actions: {\n    },\n    gridBox: {\n      // need to set this. otherwise, <Grid spacing={x}> causes overflow horizontally.\n      // ref: https://material-ui.com/components/grid/#limitations\n      //\n      // still overflow!\n      //  - quit using <Grid spacing={x}>. \n      //  - use 'margin' on <Grid item> // it works\n      overflow: \"hidden\",\n      padding: theme.spacing(0, 1, 0, 1),\n      margin: theme.spacing(3, 0, 3, 0),\n      minHeight: \"100vh\",\n    },\n    gridItem: {\n      maxWidth: 200,\n      margin: theme.spacing(1)\n    }\n  }),\n);\n\n/**\n * guest & member orderlist page\n *\n **/\nconst OrderList: React.FunctionComponent<{}> = (props) => {\n\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch()\n\n  const auth = useSelector(mSelector.makeAuthSelector())\n\n  const curOrders = useSelector(mSelector.makeOrderSelector())\n\n  const curQueryString = useSelector(mSelector.makeOrderQueryStringSelector())\n  // fetch orders of this user.\n  React.useEffect(() => {\n    dispatch(fetchAuthOrderActionCreator({ userId: auth.user.userId }))\n  }, [\n      JSON.stringify(curQueryString)\n    ])\n\n  const pagination = useSelector(mSelector.makeOrderPaginationSelector())\n\n  // pagination\n  const handlePaginationChange = (event: React.ChangeEvent<unknown>, value: number) => {\n\n    // need to decrement since we incremented when display\n    const nextPage = value - 1;\n\n    dispatch(orderPaginationPageActions.update(nextPage))\n  };\n\n  // render functions\n  const renderOrders: () => React.ReactNode = () => {\n    return curOrders.map((order: OrderType) => {\n      return (\n        <Grid\n          key={order.orderId}\n          item\n          xs={12}\n          sm={6}\n          md={4}\n          className={classes.gridItem}\n        >\n          <Card className={classes.card}>\n            <CardHeader\n              avatar={\n                <ShoppingBasketIcon />\n              }\n              title={order.orderNumber}\n              subheader={toDateString(order.createdAt)}\n              //subheader={order.createdAt}\n            />\n            <CardMedia\n              className={classes.media}\n              // the first product image is the main one\n              image={(order.orderDetails[0].product && order.orderDetails[0].product.productImages.length > 0) ? order.orderDetails[0].product.productImages[0].productImagePath : \"\"}\n            />\n            <CardContent className={classes.cardContent}>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Total Cost: <b>{cadCurrencyFormat(calcOrderTotalCost(order))}</b>\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Total Items: <b>{calcOrderTotalItemNumber(order)}</b> items\n              </Typography>\n            </CardContent>\n            <CardActions className={classes.actions}>\n              <Button disabled>\n                {getCurOrderStatus(order)}\n              </Button>\n              <Button component={RRLink} to={`/orders/${order.orderId}`}>\n                Details\n            </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n      )\n    })\n  }\n\n  return (\n    <React.Fragment>\n      {(curOrders.length === 0 &&\n        <React.Fragment>\n          <Typography variant=\"body1\" component=\"p\" align=\"center\">\n            {\"Oops, Your order history is empty.\"}\n          </Typography>\n          <Box component=\"div\" className={classes.controllerBox}>\n            <Button>\n              {\"search your product\"}\n            </Button>\n          </Box>\n        </React.Fragment>\n      )}\n      {(curOrders.length > 0 &&\n        <Grid\n          container\n          className={classes.gridBox}\n          spacing={0}\n          justify=\"center\"\n        >\n          <React.Fragment>\n            {renderOrders()}\n            <Pagination\n              page={pagination.page + 1} // don't forget to increment when display\n              count={pagination.totalPages}\n              color=\"primary\"\n              showFirstButton\n              showLastButton\n              size={\"medium\"}\n              onChange={handlePaginationChange}\n            />\n          </React.Fragment>\n        </Grid>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default OrderList\n\n\n\n\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport OrderList from 'components/common/OrderList';\nimport * as React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textTransform: \"uppercase\",\n      margin: theme.spacing(6)\n    },\n    subtotalBox: {\n      padding: theme.spacing(1),\n    },\n    controllerBox: {\n      textAlign: \"center\"\n    }\n  }),\n);\n\n/**\n * guest & member order page\n *\n **/\nconst Orders: React.FunctionComponent<{}> = (props) => {\n\n\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" component=\"h5\" align=\"center\" className={classes.title} >\n        {\"Orders\"}\n      </Typography>\n      <OrderList />\n    </React.Fragment>\n  )\n}\n\nexport default Orders\n\n\n\n","import Account from 'components/pages/Account';\nimport Admin from 'components/pages/Admin';\nimport AdminAccount from 'components/pages/Admin/AdminAccount';\nimport AdminCategory from 'components/pages/Admin/AdminCategory';\nimport AdminCustomer from 'components/pages/Admin/AdminCustomer';\nimport AdminLogin from 'components/pages/Admin/AdminLogin';\nimport AdminOrder from 'components/pages/Admin/AdminOrder';\nimport AdminProduct from 'components/pages/Admin/AdminProduct';\nimport AdminProductVariant from 'components/pages/Admin/AdminProductVariant';\nimport AdminReview from 'components/pages/Admin/AdminReview';\nimport Checkout from 'components/pages/Checkout';\nimport Guest from 'components/pages/Guest';\nimport Home from 'components/pages/Home';\nimport Login from 'components/pages/Login';\nimport Product from 'components/pages/Product';\nimport ProductSearch from 'components/pages/ProductSearch';\nimport Signup from 'components/pages/Signup';\nimport Wishlist from 'components/pages/Wishlist';\nimport * as React from 'react';\nimport { UserTypeEnum } from 'src/app';\nimport { withAdminBasePage } from 'ui/hoc/withAdminBasePage';\nimport { withBasePage } from 'ui/hoc/withBasePage';\nimport Contact from 'components/pages/Contact';\nimport Order from 'components/pages/Order';\nimport AccountVerify from 'components/pages/AccountVerify';\nimport ResetPassword from 'components/pages/ResetPassword';\nimport Orders from 'components/pages/Orders';\n\n// route data\nexport declare type RouteDataType = {\n  url: string\n  component: React.FunctionComponent\n}\n\nexport declare type RoutesDataType = {\n  [key in UserTypeEnum]?: RouteDataType[]\n}\n\nexport declare type CommonRoutesDataType = RouteDataType[] \n\nexport const routesData: RoutesDataType = {\n  // define guest only page\n  [UserTypeEnum.GUEST]: [\n    {\n      url: \"/guest\",\n      component: withBasePage(Guest),\n    },\n    {\n      url: \"/login\",\n      component: withBasePage(Login),\n    },\n    {\n      url: \"/admin/login\",\n      component: AdminLogin,\n    },\n    {\n      url: \"/signup\",\n      component: withBasePage(Signup),\n    },\n    {\n      url: \"/account-verify\",\n      component: withBasePage(AccountVerify),\n    },\n    {\n      url: \"/reset-password\",\n      component: withBasePage(ResetPassword),\n    },\n  ],\n  // define member only page\n  [UserTypeEnum.MEMBER]: [\n    {\n      url: \"/account\",\n      component: withBasePage(Account),\n    },\n    {\n      url: \"/wishlist\",\n      component: withBasePage(Wishlist),\n    },\n    {\n      url: \"/orders\",\n      component: withBasePage(Orders),\n    },\n    {\n      url: \"/orders/:orderId\",\n      component: withBasePage(Order),\n    },\n    {\n      url: \"/account-verify\",\n      component: withBasePage(AccountVerify),\n    },\n  ],\n  // define admin only page\n  [UserTypeEnum.ADMIN]: [\n    {\n      url: \"/admin\",\n      component: withAdminBasePage(Admin),\n    },\n    {\n      url: \"/admin/account\",\n      component: withAdminBasePage(AdminAccount),\n    },\n    {\n      url: \"/admin/products\",\n      component: withAdminBasePage(AdminProduct),\n    },\n    {\n      url: \"/admin/product-variants\",\n      component: withAdminBasePage(AdminProductVariant),\n    },\n    {\n      url: \"/admin/categories\",\n      component: withAdminBasePage(AdminCategory),\n    },\n    {\n      url: \"/admin/orders\",\n      component: withAdminBasePage(AdminOrder),\n    },\n    {\n      url: \"/admin/reviews\",\n      component: withAdminBasePage(AdminReview),\n    },\n    {\n      url: \"/admin/customers\",\n      component: withAdminBasePage(AdminCustomer),\n    },\n  ],\n}\n\nexport const commonRoutesData: CommonRoutesDataType = [\n  // define common only page\n  {\n    url: '/',\n    component: withBasePage(Home)\n  },\n  {\n    url: '/search',\n    component: withBasePage(ProductSearch)\n  },\n  {\n    url: '/products/:productPath',\n    component: withBasePage(Product)\n  },\n  {\n    url: '/checkout',\n    component: withBasePage(Checkout)\n  },\n  {\n    url: '/contact',\n    component: withBasePage(Contact)\n  },\n]\n","import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\nconst Guest: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <div>Guest Page</div>\n  )\n}\n\nexport default Guest\n","import * as React from 'react';\n\nconst Admin: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <div>Admin Page</div>\n  )\n}\n\nexport default Admin\n","import Hero from 'components/common/Hero';\nimport * as React from 'react';\nimport BrandNewProduct from 'components/common/BrandNewProduct';\nimport CategoryList from 'components/common/CategoryList';\n\nconst Home: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <React.Fragment>\n     <Hero />\n     <BrandNewProduct />\n     {/** re-design this since category does not have its image **/}\n     <CategoryList />\n     {/** one more section like contact or aboutus **/}\n    </React.Fragment>\n  )\n}\n\nexport default Home\n\n","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\n\nconst NotFound: React.FunctionComponent<{}> = (props) => {\n\n  return (\n    <Container maxWidth=\"lg\">\n      <h1>Not Found</h1> \n    </Container>\n  )\n}\n\nexport default NotFound\n\n\n","import { UsePreviousInput } from \"./types\";\nimport * as React from \"react\";\n\nexport const usePrevious = <S extends any>(input: UsePreviousInput<S>): S => {\n\n  const ref = React.useRef<S>();\n\n  React.useEffect(() => {\n    ref.current = input.value\n  }, [input.value])\n\n  /**\n   * redux reducer complains about this if you return 'undefined'\n   **/\n  if (!ref.current) {\n    return null\n  }\n\n  return ref.current as S\n}\n\n\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router';\nimport { Route, Switch } from 'react-router-dom';\nimport { AuthType } from 'src/app';\nimport { mSelector } from 'src/selectors/selector';\nimport { commonRoutesData, RouteDataType, routesData } from '..';\nimport { withBasePage } from 'ui/hoc/withBasePage';\nimport NotFound from 'components/pages/NotFound';\nimport { usePrevious } from 'hooks/previous';\nimport { previousUrlActions } from 'reducers/slices/app';\n\nconst PageRoute: React.FunctionComponent<{}> = (props) => {\n\n\n  const location = useLocation()\n\n  /**\n   * auth redux state\n   **/\n  const auth: AuthType = useSelector(mSelector.makeAuthSelector())\n\n  const allRoutesData: RouteDataType[] = [\n    ...routesData[auth.userType],\n    ...commonRoutesData\n  ];\n\n  /**\n   * previousUrl: every time url has changed, we keep track of this for the sake of \"Redirect User After Login\"\n   *\n   * - use 'usePrevious' and 'history.listen' method together. \n   *\n   **/\n  const history = useHistory()\n  const [curUrl, setUrl] = React.useState<string>(\"\");\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n\n    return history.listen((location) => {\n      setUrl(location.pathname)\n    })\n\n  }, [history])\n\n  const previousValue = usePrevious<string>({ value: curUrl });\n  dispatch(previousUrlActions.update(previousValue))\n\n  /**\n   * Not Found Page Logic\n   *\n   *  - the order matters.\n   *\n   *    - must make 'not found' page route at the last\n   *  \n   *  - other route must include 'exact'\n   **/\n  return (\n    <Switch location={location}>\n      {allRoutesData.map((route: RouteDataType) => (\n        <Route\n          exact\n          key={route.url}\n          path={route.url}\n          component={route.component}\n        />\n      ))}\n      <Route component={withBasePage(NotFound)} /> \n    </Switch>\n  )\n}\n\nexport default PageRoute\n\n","import PageRoute from 'components/routes/PageRoute';\nimport * as React from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useSelector } from 'react-redux';\nimport { mSelector } from 'src/selectors/selector';\nimport { MessageTypeEnum } from 'src/app';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst Content: React.FunctionComponent<{}> = (props) => {\n\n  // snackbar notification\n  // usage: 'enqueueSnackbar(\"message\", { variant: \"error\" };\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const curMessage = useSelector(mSelector.makeMessageSelector())\n  React.useEffect(() => {\n    if (curMessage.type !== MessageTypeEnum.INITIAL) {\n      enqueueSnackbar(\n        curMessage.message, \n        { \n          variant: curMessage.type,\n          persist: curMessage.persist,\n          action: (key: any) => (\n            <IconButton onClick={() => { closeSnackbar(key) }}>\n             <HighlightOffIcon /> \n            </IconButton>\n          )\n        });\n    }\n  }, [curMessage.id])\n\n  return (\n    <React.Fragment>\n      <PageRoute />       \n    </React.Fragment>\n  )\n}\n\nexport default Content\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.cartItems.get state Slice\n **/\nexport type getCartItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getCartItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/cartItem/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getCartItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getCartItemFetchStatusSliceReducer = getCartItemFetchStatusSlice.reducer\nexport const getCartItemFetchStatusActions = getCartItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.cartItems.post state Slice\n **/\nexport type postCartItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postCartItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/cartItem/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postCartItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postCartItemFetchStatusSliceReducer = postCartItemFetchStatusSlice.reducer\nexport const postCartItemFetchStatusActions = postCartItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.cartItems.put state Slice\n **/\nexport type putCartItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putCartItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/cartItem/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putCartItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putCartItemFetchStatusSliceReducer = putCartItemFetchStatusSlice.reducer\nexport const putCartItemFetchStatusActions = putCartItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.cartItems.deleteSingle state Slice\n **/\nexport type deleteSingleCartItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleCartItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/cartItem/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleCartItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleCartItemFetchStatusSliceReducer = deleteSingleCartItemFetchStatusSlice.reducer\nexport const deleteSingleCartItemFetchStatusActions = deleteSingleCartItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.cartItems.delete state Slice\n **/\nexport type deleteCartItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteCartItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/cartItem/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteCartItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteCartItemFetchStatusSliceReducer = deleteCartItemFetchStatusSlice.reducer\nexport const deleteCartItemFetchStatusActions = deleteCartItemFetchStatusSlice.actions\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.category.get state Slice\n **/\nexport type getCategoryFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getCategoryFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/category/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getCategoryFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getCategoryFetchStatusSliceReducer = getCategoryFetchStatusSlice.reducer\nexport const getCategoryFetchStatusActions = getCategoryFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.category.post state Slice\n **/\nexport type postCategoryFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postCategoryFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/category/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postCategoryFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postCategoryFetchStatusSliceReducer = postCategoryFetchStatusSlice.reducer\nexport const postCategoryFetchStatusActions = postCategoryFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.category.put state Slice\n **/\nexport type putCategoryFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putCategoryFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/category/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putCategoryFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putCategoryFetchStatusSliceReducer = putCategoryFetchStatusSlice.reducer\nexport const putCategoryFetchStatusActions = putCategoryFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.category.deleteSingle state Slice\n **/\nexport type deleteSingleCategoryFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleCategoryFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/category/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleCategoryFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleCategoryFetchStatusSliceReducer = deleteSingleCategoryFetchStatusSlice.reducer\nexport const deleteSingleCategoryFetchStatusActions = deleteSingleCategoryFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.category.delete state Slice\n **/\nexport type deleteCategoryFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteCategoryFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/category/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteCategoryFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\nimport { resetCheckoutStateActionTypeName } from \"reducers/slices/common\";\n\n/**\n * app.fetchStatus.order.get state Slice\n **/\nexport type getOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getOrderFetchStatusSliceReducer = getOrderFetchStatusSlice.reducer\nexport const getOrderFetchStatusActions = getOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.getSingle state Slice\n **/\nexport type getSingleOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getSingleOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/getSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getSingleOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getSingleOrderFetchStatusSliceReducer = getSingleOrderFetchStatusSlice.reducer\nexport const getSingleOrderFetchStatusActions = getSingleOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.post state Slice\n **/\nexport type postOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: {\n    [resetCheckoutStateActionTypeName]: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n})\n\nexport const postOrderFetchStatusSliceReducer = postOrderFetchStatusSlice.reducer\nexport const postOrderFetchStatusActions = postOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.patch state Slice\n *\n *    - to temporarly delete order request\n **/\nexport type patchOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchOrderFetchStatusSliceReducer = patchOrderFetchStatusSlice.reducer\nexport const patchOrderFetchStatusActions = patchOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.put state Slice\n *\n *  - update order data of the same id\n **/\nexport type putOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putOrderFetchStatusSliceReducer = putOrderFetchStatusSlice.reducer\nexport const putOrderFetchStatusActions = putOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.deleteSingle state Slice\n **/\nexport type deleteSingleOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleOrderFetchStatusSliceReducer = deleteSingleOrderFetchStatusSlice.reducer\nexport const deleteSingleOrderFetchStatusActions = deleteSingleOrderFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.order.delete state Slice\n **/\nexport type deleteOrderFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteOrderFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteOrderFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteOrderFetchStatusSliceReducer = deleteOrderFetchStatusSlice.reducer\nexport const deleteOrderFetchStatusActions = deleteOrderFetchStatusSlice.actions\n\n\n\n/**\n * app.fetchStatus.orderEvent.post state Slice\n **/\nexport type postOrderEventFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postOrderEventFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/event/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postOrderEventFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postOrderEventFetchStatusSliceReducer = postOrderEventFetchStatusSlice.reducer\nexport const postOrderEventFetchStatusActions = postOrderEventFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.orderEvent.put state Slice\n *\n *  - update orderEvent data of the same id\n **/\nexport type putOrderEventFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putOrderEventFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/event/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putOrderEventFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putOrderEventFetchStatusSliceReducer = putOrderEventFetchStatusSlice.reducer\nexport const putOrderEventFetchStatusActions = putOrderEventFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.orderEvent.deleteSingle state Slice\n **/\nexport type deleteSingleOrderEventFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleOrderEventFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/event/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleOrderEventFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleOrderEventFetchStatusSliceReducer = deleteSingleOrderEventFetchStatusSlice.reducer\nexport const deleteSingleOrderEventFetchStatusActions = deleteSingleOrderEventFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.orderEvent.post state Slice\n **/\nexport type postSessionTimeoutOrderEventFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postSessionTimeoutOrderEventFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/order/event/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postSessionTimeoutOrderEventFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postSessionTimeoutOrderEventFetchStatusSliceReducer = postSessionTimeoutOrderEventFetchStatusSlice.reducer\nexport const postSessionTimeoutOrderEventFetchStatusActions = postSessionTimeoutOrderEventFetchStatusSlice.actions\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.product.get state Slice\n **/\nexport type getProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getProductFetchStatusSliceReducer = getProductFetchStatusSlice.reducer\nexport const getProductFetchStatusActions = getProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.getPublic state Slice\n **/\nexport type getPublicProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getPublicProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/getPublic\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getPublicProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getPublicProductFetchStatusSliceReducer = getPublicProductFetchStatusSlice.reducer\nexport const getPublicProductFetchStatusActions = getPublicProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.getSingle state Slice\n **/\nexport type getSingleProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getSingleProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/getSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getSingleProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getSingleProductFetchStatusSliceReducer = getSingleProductFetchStatusSlice.reducer\nexport const getSingleProductFetchStatusActions = getSingleProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.post state Slice\n **/\nexport type postProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postProductFetchStatusSliceReducer = postProductFetchStatusSlice.reducer\nexport const postProductFetchStatusActions = postProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.patch state Slice\n *\n *    - to temporarly delete product request\n **/\nexport type patchProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchProductFetchStatusSliceReducer = patchProductFetchStatusSlice.reducer\nexport const patchProductFetchStatusActions = patchProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.put state Slice\n *\n *  - update product data of the same id\n **/\nexport type putProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putProductFetchStatusSliceReducer = putProductFetchStatusSlice.reducer\nexport const putProductFetchStatusActions = putProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.deleteSingle state Slice\n **/\nexport type deleteSingleProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleProductFetchStatusSliceReducer = deleteSingleProductFetchStatusSlice.reducer\nexport const deleteSingleProductFetchStatusActions = deleteSingleProductFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.product.delete state Slice\n **/\nexport type deleteProductFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteProductFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteProductFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteProductFetchStatusSliceReducer = deleteProductFetchStatusSlice.reducer\nexport const deleteProductFetchStatusActions = deleteProductFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.productvariant.post state Slice\n **/\nexport type postProductVariantFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postProductVariantFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/variant/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postProductVariantFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postProductVariantFetchStatusSliceReducer = postProductVariantFetchStatusSlice.reducer\nexport const postProductVariantFetchStatusActions = postProductVariantFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.productvariant.put state Slice\n *\n *  - update productvariant data of the same id\n **/\nexport type putProductVariantFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putProductVariantFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/variant/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putProductVariantFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putProductVariantFetchStatusSliceReducer = putProductVariantFetchStatusSlice.reducer\nexport const putProductVariantFetchStatusActions = putProductVariantFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.productvariant.deleteSingle state Slice\n **/\nexport type deleteSingleProductVariantFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleProductVariantFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/product/variant/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleProductVariantFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleProductVariantFetchStatusSliceReducer = deleteSingleProductVariantFetchStatusSlice.reducer\nexport const deleteSingleProductVariantFetchStatusActions = deleteSingleProductVariantFetchStatusSlice.actions\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.review.get state Slice\n **/\nexport type getReviewFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getReviewFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/review/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getReviewFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getReviewFetchStatusSliceReducer = getReviewFetchStatusSlice.reducer\nexport const getReviewFetchStatusActions = getReviewFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.review.post state Slice\n **/\nexport type postReviewFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postReviewFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/review/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postReviewFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postReviewFetchStatusSliceReducer = postReviewFetchStatusSlice.reducer\nexport const postReviewFetchStatusActions = postReviewFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.review.put state Slice\n **/\nexport type putReviewFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putReviewFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/review/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putReviewFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putReviewFetchStatusSliceReducer = putReviewFetchStatusSlice.reducer\nexport const putReviewFetchStatusActions = putReviewFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.review.deleteSingle state Slice\n **/\nexport type deleteSingleReviewFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleReviewFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/review/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleReviewFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleReviewFetchStatusSliceReducer = deleteSingleReviewFetchStatusSlice.reducer\nexport const deleteSingleReviewFetchStatusActions = deleteSingleReviewFetchStatusSlice.actions\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.user.get state Slice\n **/\nexport type getUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getUserFetchStatusSliceReducer = getUserFetchStatusSlice.reducer\nexport const getUserFetchStatusActions = getUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.getSingle state Slice\n **/\nexport type getSingleUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getSingleUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/getSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getSingleUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getSingleUserFetchStatusSliceReducer = getSingleUserFetchStatusSlice.reducer\nexport const getSingleUserFetchStatusActions = getSingleUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.post state Slice\n **/\nexport type postUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postUserFetchStatusSliceReducer = postUserFetchStatusSlice.reducer\nexport const postUserFetchStatusActions = postUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.patch state Slice\n *\n *    - to temporarly delete user request\n **/\nexport type patchUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchUserFetchStatusSliceReducer = patchUserFetchStatusSlice.reducer\nexport const patchUserFetchStatusActions = patchUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type putUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putUserFetchStatusSliceReducer = putUserFetchStatusSlice.reducer\nexport const putUserFetchStatusActions = putUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.deleteSingle state Slice\n **/\nexport type deleteSingleUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleUserFetchStatusSliceReducer = deleteSingleUserFetchStatusSlice.reducer\nexport const deleteSingleUserFetchStatusActions = deleteSingleUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.delete state Slice\n **/\nexport type deleteUserFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteUserFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteUserFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteUserFetchStatusSliceReducer = deleteUserFetchStatusSlice.reducer\nexport const deleteUserFetchStatusActions = deleteUserFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.post state Slice\n *\n *  - update user data of the same id\n **/\nexport type postUserPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postUserPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/phone/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postUserPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postUserPhoneFetchStatusSliceReducer = postUserPhoneFetchStatusSlice.reducer\nexport const postUserPhoneFetchStatusActions = postUserPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type putUserPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putUserPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/phone/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putUserPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putUserPhoneFetchStatusSliceReducer = putUserPhoneFetchStatusSlice.reducer\nexport const putUserPhoneFetchStatusActions = putUserPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type patchUserPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchUserPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/phone/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchUserPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchUserPhoneFetchStatusSliceReducer = patchUserPhoneFetchStatusSlice.reducer\nexport const patchUserPhoneFetchStatusActions = patchUserPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.delete state Slice\n *\n *  - update user data of the same id\n **/\nexport type deleteUserPhoneFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteUserPhoneFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/phone/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteUserPhoneFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteUserPhoneFetchStatusSliceReducer = deleteUserPhoneFetchStatusSlice.reducer\nexport const deleteUserPhoneFetchStatusActions = deleteUserPhoneFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type postUserAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postUserAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/address/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postUserAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postUserAddressFetchStatusSliceReducer = postUserAddressFetchStatusSlice.reducer\nexport const postUserAddressFetchStatusActions = postUserAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type putUserAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const putUserAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/address/put\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: putUserAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const putUserAddressFetchStatusSliceReducer = putUserAddressFetchStatusSlice.reducer\nexport const putUserAddressFetchStatusActions = putUserAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.put state Slice\n *\n *  - update user data of the same id\n **/\nexport type patchUserAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchUserAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/address/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchUserAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchUserAddressFetchStatusSliceReducer = patchUserAddressFetchStatusSlice.reducer\nexport const patchUserAddressFetchStatusActions = patchUserAddressFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.user.delete state Slice\n *\n *  - update user data of the same id\n **/\nexport type deleteUserAddressFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteUserAddressFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/address/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteUserAddressFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteUserAddressFetchStatusSliceReducer = deleteUserAddressFetchStatusSlice.reducer\nexport const deleteUserAddressFetchStatusActions = deleteUserAddressFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.user.delete state Slice\n **/\nexport type postUserAvatarImageFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postUserAvatarImageFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/avatar-image/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postUserAvatarImageFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postUserAvatarImageFetchStatusSliceReducer = postUserAvatarImageFetchStatusSlice.reducer\nexport const postUserAvatarImageFetchStatusActions = postUserAvatarImageFetchStatusSlice.actions\n\n\n/**\n * app.fetchStatus.user.delete state Slice\n **/\nexport type deleteUserAvatarImageFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteUserAvatarImageFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/user/avatar-image/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteUserAvatarImageFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteUserAvatarImageFetchStatusSliceReducer = deleteUserAvatarImageFetchStatusSlice.reducer\nexport const deleteUserAvatarImageFetchStatusActions = deleteUserAvatarImageFetchStatusSlice.actions\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { FetchStatusEnum } from \"src/app\";\n\n/**\n * app.fetchStatus.wishlistItem.get state Slice\n **/\nexport type getWishlistItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const getWishlistItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/wishlistItem/get\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: getWishlistItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const getWishlistItemFetchStatusSliceReducer = getWishlistItemFetchStatusSlice.reducer\nexport const getWishlistItemFetchStatusActions = getWishlistItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.wishlistItem.post state Slice\n **/\nexport type postWishlistItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const postWishlistItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/wishlistItem/post\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: postWishlistItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const postWishlistItemFetchStatusSliceReducer = postWishlistItemFetchStatusSlice.reducer\nexport const postWishlistItemFetchStatusActions = postWishlistItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.wishlistItem.patch state Slice\n **/\nexport type patchWishlistItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const patchWishlistItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/wishlistItem/patch\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: patchWishlistItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const patchWishlistItemFetchStatusSliceReducer = patchWishlistItemFetchStatusSlice.reducer\nexport const patchWishlistItemFetchStatusActions = patchWishlistItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.wishlistItem.deleteSingle state Slice\n **/\nexport type deleteSingleWishlistItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteSingleWishlistItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/wishlistItem/deleteSingle\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteSingleWishlistItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteSingleWishlistItemFetchStatusSliceReducer = deleteSingleWishlistItemFetchStatusSlice.reducer\nexport const deleteSingleWishlistItemFetchStatusActions = deleteSingleWishlistItemFetchStatusSlice.actions\n\n/**\n * app.fetchStatus.wishlistItem.delete state Slice\n **/\nexport type deleteWishlistItemFetchStatusActionType = PayloadAction<FetchStatusEnum>\n\nexport const deleteWishlistItemFetchStatusSlice = createSlice({\n  name: \"app/fetchStatus/wishlistItem/delete\", // a name used in action type\n  initialState: {},\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: FetchStatusEnum, action: deleteWishlistItemFetchStatusActionType) => action.payload,\n    clear: (state: FetchStatusEnum) => FetchStatusEnum.INITIAL\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n})\n\nexport const deleteWishlistItemFetchStatusSliceReducer = deleteWishlistItemFetchStatusSlice.reducer\nexport const deleteWishlistItemFetchStatusActions = deleteWishlistItemFetchStatusSlice.actions\n\n","import { PayloadAction, createSlice, createAction } from \"@reduxjs/toolkit\";\nimport { resetCheckoutStateActionTypeName } from \"../common\";\n\n/**\n * IMPORTANT NOTE:\n *\n * - NEVER EVER store this redux state in persistent system (localstorage, persistent storage, any thing at front-end)\n *\n **/\n\n/**\n * redux-sage actions (side effects)\n *\n *  - use this in index.tsx at watchers\n *\n **/\n\n// for GET request\nexport const requestStripeClientSecretActionCreator = createAction(\"saga/sensitive/stripeClientSecret/request\")\nexport const requestStripeClientSecretActionTypeName = requestStripeClientSecretActionCreator().type\n\n\n/**\n * app.fetchStatus.cartItems.get state Slice (no side effects)\n **/\nexport type StripeClientSecretActionType = PayloadAction<string>\n\nexport const stripeClientSecretSlice = createSlice({\n  name: \"sensitive/stripeClientSecret\", // a name used in action type\n  initialState: \"\",\n  reducers: {\n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n    update: (state: string, action: StripeClientSecretActionType) => action.payload,\n    clear: (state: string) => \"\" \n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated.\n   **/\n  extraReducers: {\n    [resetCheckoutStateActionTypeName]: (state: string) => \"\", \n  },\n})\n\nexport const stripeClientSecretSliceReducer = stripeClientSecretSlice.reducer\nexport const stripeClientSecretActions = stripeClientSecretSlice.actions\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { OrderType } from \"domain/order/types\";\nimport { resetCheckoutStateActionTypeName } from \"../common\";\n\n/**\n *\n * domain.checkout.order state Slice (no side effects)\n *\n **/\n// action type             \nexport type CheckoutOrderActionType = PayloadAction<OrderType> \n\nexport const checkoutOrderSlice = createSlice({ \n  name: \"domain/checkout/order\", // a name used in action type\n  initialState: {},        \n  reducers: {              \n    /**\n     *\n     *  a property name gonna be the name of action\n     *  its value is the reduce\n     *\n     *  If you need to define the param of the action, use PayloadAction<X> to define its type.\n     *  In this use case, I need to an string param, so I define 'payloadAction<string' like below\n     *\n     **/\n\n    // use when you want to replace\n    update: (state: OrderType, action: CheckoutOrderActionType) => action.payload,\n    clear: (state: OrderType) => null, // start from 0, (not 1)\n  },\n  /**\n   * extraReducers property\n   *\n   * You can respond to other action types besides the types it has generated. \n   *\n   **/\n  extraReducers: {\n    [resetCheckoutStateActionTypeName]: (state: OrderType) => null \n  },\n}) \n\nexport const checkoutOrderSliceReducer = checkoutOrderSlice.reducer\nexport const checkoutOrderActions = checkoutOrderSlice.actions\n\n\n\n","import { combineReducers } from 'redux';\nimport { authSliceReducer, messageSliceReducer, previousUrlSliceReducer, requestTrackerSliceReducer, searchKeywordSliceReducer } from './slices/app';\nimport { deleteAuthAddressFetchStatusSliceReducer, deleteAuthAvatarImageFetchStatusSliceReducer, deleteAuthPhoneFetchStatusSliceReducer, getSingleAuthFetchStatusSliceReducer, patchAuthAddressFetchStatusSliceReducer, patchAuthPhoneFetchStatusSliceReducer, postAuthAddressFetchStatusSliceReducer, postAuthAvatarImageFetchStatusSliceReducer, postAuthPhoneFetchStatusSliceReducer, putAuthAddressFetchStatusSliceReducer, putAuthCompanyFetchStatusSliceReducer, putAuthFetchStatusSliceReducer, putAuthPhoneFetchStatusSliceReducer, fetchAuthOrderFetchStatusSliceReducer, postAuthOrderEventFetchStatusSliceReducer, fetchSingleAuthOrderFetchStatusSliceReducer } from './slices/app/fetchStatus/auth';\nimport { deleteCartItemFetchStatusSliceReducer, deleteSingleCartItemFetchStatusSliceReducer, getCartItemFetchStatusSliceReducer, postCartItemFetchStatusSliceReducer, putCartItemFetchStatusSliceReducer } from './slices/app/fetchStatus/cartItem';\nimport { deleteSingleCategoryFetchStatusSliceReducer, getCategoryFetchStatusSliceReducer, postCategoryFetchStatusSliceReducer, putCategoryFetchStatusSliceReducer } from './slices/app/fetchStatus/category';\nimport { deleteSingleOrderEventFetchStatusSliceReducer, deleteSingleOrderFetchStatusSliceReducer, getOrderFetchStatusSliceReducer, getSingleOrderFetchStatusSliceReducer, postOrderEventFetchStatusSliceReducer, postOrderFetchStatusSliceReducer, putOrderEventFetchStatusSliceReducer, putOrderFetchStatusSliceReducer, postSessionTimeoutOrderEventFetchStatusSliceReducer } from './slices/app/fetchStatus/order';\nimport { deleteSingleProductFetchStatusSliceReducer, deleteSingleProductVariantFetchStatusSliceReducer, getProductFetchStatusSliceReducer, getPublicProductFetchStatusSliceReducer, getSingleProductFetchStatusSliceReducer, postProductFetchStatusSliceReducer, postProductVariantFetchStatusSliceReducer, putProductFetchStatusSliceReducer, putProductVariantFetchStatusSliceReducer } from './slices/app/fetchStatus/product';\nimport { deleteSingleReviewFetchStatusSliceReducer, getReviewFetchStatusSliceReducer, postReviewFetchStatusSliceReducer, putReviewFetchStatusSliceReducer } from './slices/app/fetchStatus/review';\nimport { deleteSingleUserFetchStatusSliceReducer, deleteUserAddressFetchStatusSliceReducer, deleteUserAvatarImageFetchStatusSliceReducer, deleteUserPhoneFetchStatusSliceReducer, getSingleUserFetchStatusSliceReducer, getUserFetchStatusSliceReducer, patchUserAddressFetchStatusSliceReducer, patchUserFetchStatusSliceReducer, patchUserPhoneFetchStatusSliceReducer, postUserAddressFetchStatusSliceReducer, postUserAvatarImageFetchStatusSliceReducer, postUserFetchStatusSliceReducer, postUserPhoneFetchStatusSliceReducer, putUserAddressFetchStatusSliceReducer, putUserFetchStatusSliceReducer, putUserPhoneFetchStatusSliceReducer } from './slices/app/fetchStatus/user';\nimport { deleteSingleWishlistItemFetchStatusSliceReducer, deleteWishlistItemFetchStatusSliceReducer, getWishlistItemFetchStatusSliceReducer, patchWishlistItemFetchStatusSliceReducer, postWishlistItemFetchStatusSliceReducer } from './slices/app/fetchStatus/wishlistItem';\nimport { cartItemSliceReducer } from './slices/domain/cartItem';\nimport { categoryPaginationLimitSliceReducer, categoryPaginationPageSliceReducer, categoryPaginationTotalElementsSliceReducer, categoryPaginationTotalPagesSliceReducer, categorySliceReducer } from './slices/domain/category';\nimport { orderPaginationLimitSliceReducer, orderPaginationPageSliceReducer, orderPaginationTotalElementsSliceReducer, orderPaginationTotalPagesSliceReducer, orderQueryEndDateSliceReducer, orderQueryOrderStatusSliceReducer, orderQuerySearchQuerySliceReducer, orderQuerySortSliceReducer, orderQueryStartDateSliceReducer, orderSliceReducer } from './slices/domain/order';\nimport { productCurItemsSliceReducer, productPaginationLimitSliceReducer, productPaginationPageSliceReducer, productPaginationTotalElementsSliceReducer, productPaginationTotalPagesSliceReducer, productQueryCategoryIdSliceReducer, productQueryEndDateSliceReducer, productQueryIsDiscountSliceReducer, productQueryMaxPriceSliceReducer, productQueryMinPriceSliceReducer, productQueryReviewPointSliceReducer, productQuerySearchQuerySliceReducer, productQuerySortSliceReducer, productQueryStartDateSliceReducer, productSliceReducer } from './slices/domain/product';\nimport { reviewPaginationLimitSliceReducer, reviewPaginationPageSliceReducer, reviewPaginationTotalElementsSliceReducer, reviewPaginationTotalPagesSliceReducer, reviewQueryEndDateSliceReducer, reviewQueryIsVerifiedSliceReducer, reviewQueryProductIdSliceReducer, reviewQueryReviewPointSliceReducer, reviewQuerySearchQuerySliceReducer, reviewQuerySortSliceReducer, reviewQueryStartDateSliceReducer, reviewQueryUserIdSliceReducer, reviewSliceReducer } from './slices/domain/review';\nimport { userPaginationLimitSliceReducer, userPaginationPageSliceReducer, userPaginationTotalElementsSliceReducer, userPaginationTotalPagesSliceReducer, userQueryEndDateSliceReducer, userQuerySearchQuerySliceReducer, userQuerySortSliceReducer, userQueryStartDateSliceReducer, userSliceReducer } from './slices/domain/user';\nimport { wishlistItemPaginationLimitSliceReducer, wishlistItemPaginationPageSliceReducer, wishlistItemPaginationTotalElementsSliceReducer, wishlistItemPaginationTotalPagesSliceReducer, wishlistItemQueryEndDateSliceReducer, wishlistItemQueryIsDiscountSliceReducer, wishlistItemQueryMaxPriceSliceReducer, wishlistItemQueryMinPriceSliceReducer, wishlistItemQueryReviewPointSliceReducer, wishlistItemQuerySearchQuerySliceReducer, wishlistItemQuerySortSliceReducer, wishlistItemQueryStartDateSliceReducer, wishlistItemSliceReducer } from './slices/domain/wishlistItem';\nimport { stripeClientSecretSliceReducer } from './slices/sensitive';\nimport { cartModalSliceReducer, leftNavMenuSliceReducer, rightNavMenuSliceReducer, searchModalSliceReducer } from './slices/ui';\nimport { checkoutOrderSliceReducer } from './slices/domain/checkout';\n\n// ** REFACTOR to new approach **/\n\n/**\n * new rootReducer\n **/\nexport const rootReducer = combineReducers({\n\n  ui: combineReducers({\n    leftNavMenu: leftNavMenuSliceReducer,\n    rightNavMenu: rightNavMenuSliceReducer,\n    searchModal: searchModalSliceReducer,\n    cartModal: cartModalSliceReducer,\n  }),\n\n  app: combineReducers({\n    auth: authSliceReducer,\n    previousUrl: previousUrlSliceReducer,\n    message: messageSliceReducer,\n    searchKeyword: searchKeywordSliceReducer,\n    requestTracker: requestTrackerSliceReducer,\n    fetchStatus: combineReducers({\n      products: combineReducers({\n        get: getProductFetchStatusSliceReducer,\n        getPublic: getPublicProductFetchStatusSliceReducer,\n        getSingle: getSingleProductFetchStatusSliceReducer,\n        post: postProductFetchStatusSliceReducer,\n        put: putProductFetchStatusSliceReducer,\n        deleteSingle: deleteSingleProductFetchStatusSliceReducer,\n        postVariant: postProductVariantFetchStatusSliceReducer,\n        putVariant: putProductVariantFetchStatusSliceReducer,\n        deleteSingleVariant: deleteSingleProductVariantFetchStatusSliceReducer,\n      }),\n      orders: combineReducers({\n        get: getOrderFetchStatusSliceReducer,\n        getSingle: getSingleOrderFetchStatusSliceReducer,\n        post: postOrderFetchStatusSliceReducer,\n        put: putOrderFetchStatusSliceReducer,\n        deleteSingle: deleteSingleOrderFetchStatusSliceReducer,\n        postEvent: postOrderEventFetchStatusSliceReducer,\n        putEvent: putOrderEventFetchStatusSliceReducer,\n        deleteSingleEvent: deleteSingleOrderEventFetchStatusSliceReducer,\n        postSessionTimeoutEvent: postSessionTimeoutOrderEventFetchStatusSliceReducer,\n      }),\n      users: combineReducers({\n        get: getUserFetchStatusSliceReducer,\n        getSingle: getSingleUserFetchStatusSliceReducer,\n        post: postUserFetchStatusSliceReducer,\n        put: putUserFetchStatusSliceReducer,\n        deleteSingle: deleteSingleUserFetchStatusSliceReducer,\n        patch: patchUserFetchStatusSliceReducer,\n        postPhone: postUserPhoneFetchStatusSliceReducer,\n        putPhone: putUserPhoneFetchStatusSliceReducer,\n        patchPhone: patchUserPhoneFetchStatusSliceReducer,\n        deletePhone: deleteUserPhoneFetchStatusSliceReducer,\n        postAddress: postUserAddressFetchStatusSliceReducer,\n        putAddress: putUserAddressFetchStatusSliceReducer,\n        patchAddress: patchUserAddressFetchStatusSliceReducer,\n        deleteAddress: deleteUserAddressFetchStatusSliceReducer,\n        postAvatarImage: postUserAvatarImageFetchStatusSliceReducer,\n        deleteAvatarImage: deleteUserAvatarImageFetchStatusSliceReducer,\n      }),\n      categories: combineReducers({\n        get: getCategoryFetchStatusSliceReducer,\n        post: postCategoryFetchStatusSliceReducer,\n        put: putCategoryFetchStatusSliceReducer,\n        deleteSingle: deleteSingleCategoryFetchStatusSliceReducer,\n      }),\n      reviews: combineReducers({\n        get: getReviewFetchStatusSliceReducer,\n        post: postReviewFetchStatusSliceReducer,\n        put: putReviewFetchStatusSliceReducer,\n        deleteSingle: deleteSingleReviewFetchStatusSliceReducer,\n      }),\n      cartItems: combineReducers({\n        get: getCartItemFetchStatusSliceReducer,\n        post: postCartItemFetchStatusSliceReducer,\n        put: putCartItemFetchStatusSliceReducer,\n        deleteSingle: deleteSingleCartItemFetchStatusSliceReducer,\n        delete: deleteCartItemFetchStatusSliceReducer,\n      }),\n      wishlistItems: combineReducers({\n        get: getWishlistItemFetchStatusSliceReducer,\n        post: postWishlistItemFetchStatusSliceReducer,\n        patch: patchWishlistItemFetchStatusSliceReducer,\n        deleteSingle: deleteSingleWishlistItemFetchStatusSliceReducer,\n        delete: deleteWishlistItemFetchStatusSliceReducer,\n      }),\n      auth: combineReducers({\n        getSingle: getSingleAuthFetchStatusSliceReducer,\n        put: putAuthFetchStatusSliceReducer,\n        postPhone: postAuthPhoneFetchStatusSliceReducer,\n        putPhone: putAuthPhoneFetchStatusSliceReducer,\n        patchPhone: patchAuthPhoneFetchStatusSliceReducer,\n        deletePhone: deleteAuthPhoneFetchStatusSliceReducer,\n        postAddress: postAuthAddressFetchStatusSliceReducer,\n        putAddress: putAuthAddressFetchStatusSliceReducer,\n        patchAddress: patchAuthAddressFetchStatusSliceReducer,\n        deleteAddress: deleteAuthAddressFetchStatusSliceReducer,\n        postAvatarImage: postAuthAvatarImageFetchStatusSliceReducer,\n        deleteAvatarImage: deleteAuthAvatarImageFetchStatusSliceReducer,\n        putCompany: putAuthCompanyFetchStatusSliceReducer,\n        fetchOrder: fetchAuthOrderFetchStatusSliceReducer,\n        fetchSingleOrder: fetchSingleAuthOrderFetchStatusSliceReducer,\n        postOrderEvent: postAuthOrderEventFetchStatusSliceReducer,\n      }),\n    }),\n  }),\n  domain: combineReducers({\n    categories: combineReducers({\n      data: categorySliceReducer,\n      pagination: combineReducers({\n        page: categoryPaginationPageSliceReducer,\n        limit: categoryPaginationLimitSliceReducer,\n        totalPages: categoryPaginationTotalPagesSliceReducer,\n        totalElements: categoryPaginationTotalElementsSliceReducer,\n      })\n    }),\n    cartItems: cartItemSliceReducer,\n    wishlistItems: combineReducers({\n      data: wishlistItemSliceReducer,\n      pagination: combineReducers({\n        page: wishlistItemPaginationPageSliceReducer,\n        limit: wishlistItemPaginationLimitSliceReducer,\n        totalPages: wishlistItemPaginationTotalPagesSliceReducer,\n        totalElements: wishlistItemPaginationTotalElementsSliceReducer,\n      }),\n      query: combineReducers({\n        searchQuery: wishlistItemQuerySearchQuerySliceReducer,\n        minPrice: wishlistItemQueryMinPriceSliceReducer,\n        maxPrice: wishlistItemQueryMaxPriceSliceReducer,\n        reviewPoint: wishlistItemQueryReviewPointSliceReducer,\n        isDiscount: wishlistItemQueryIsDiscountSliceReducer,\n        startDate: wishlistItemQueryStartDateSliceReducer,\n        endDate: wishlistItemQueryEndDateSliceReducer,\n        sort: wishlistItemQuerySortSliceReducer,\n      }),\n    }),\n    users: combineReducers({\n      data: userSliceReducer,\n      query: combineReducers({\n        searchQuery: userQuerySearchQuerySliceReducer,\n        startDate: userQueryStartDateSliceReducer,\n        endDate: userQueryEndDateSliceReducer,\n        sort: userQuerySortSliceReducer,\n      }),\n      pagination: combineReducers({\n        page: userPaginationPageSliceReducer,\n        limit: userPaginationLimitSliceReducer,\n        totalPages: userPaginationTotalPagesSliceReducer,\n        totalElements: userPaginationTotalElementsSliceReducer,\n      }),\n    }),\n    orders: combineReducers({\n      data: orderSliceReducer,\n      query: combineReducers({\n        searchQuery: orderQuerySearchQuerySliceReducer,\n        orderStatus: orderQueryOrderStatusSliceReducer,\n        startDate: orderQueryStartDateSliceReducer,\n        endDate: orderQueryEndDateSliceReducer,\n        sort: orderQuerySortSliceReducer,\n      }),\n      pagination: combineReducers({\n        page: orderPaginationPageSliceReducer,\n        limit: orderPaginationLimitSliceReducer,\n        totalPages: orderPaginationTotalPagesSliceReducer,\n        totalElements: orderPaginationTotalElementsSliceReducer,\n      }),\n    }),\n    reviews: combineReducers({\n      data: reviewSliceReducer,\n      pagination: combineReducers({\n        page: reviewPaginationPageSliceReducer,\n        limit: reviewPaginationLimitSliceReducer,\n        totalPages: reviewPaginationTotalPagesSliceReducer,\n        totalElements: reviewPaginationTotalElementsSliceReducer,\n      }),\n      query: combineReducers({\n        searchQuery: reviewQuerySearchQuerySliceReducer,\n        reviewPoint: reviewQueryReviewPointSliceReducer,\n        isVerified: reviewQueryIsVerifiedSliceReducer,\n        startDate: reviewQueryStartDateSliceReducer,\n        endDate: reviewQueryEndDateSliceReducer,\n        userId: reviewQueryUserIdSliceReducer,\n        productId: reviewQueryProductIdSliceReducer,\n        sort: reviewQuerySortSliceReducer,\n      }),\n    }),\n    products: combineReducers({\n      data: productSliceReducer,\n      query: combineReducers({\n        searchQuery: productQuerySearchQuerySliceReducer,\n        categoryId: productQueryCategoryIdSliceReducer,\n        minPrice: productQueryMinPriceSliceReducer,\n        maxPrice: productQueryMaxPriceSliceReducer,\n        reviewPoint: productQueryReviewPointSliceReducer,\n        isDiscount: productQueryIsDiscountSliceReducer,\n        startDate: productQueryStartDateSliceReducer,\n        endDate: productQueryEndDateSliceReducer,\n        sort: productQuerySortSliceReducer,\n      }),\n      pagination: combineReducers({\n        page: productPaginationPageSliceReducer,\n        limit: productPaginationLimitSliceReducer,\n        totalPages: productPaginationTotalPagesSliceReducer,\n        totalElements: productPaginationTotalElementsSliceReducer,\n      }),\n      curItems: productCurItemsSliceReducer,\n    }),\n    checkout: combineReducers({\n      order: checkoutOrderSliceReducer\n    }),\n  }),\n  sensitive: combineReducers({\n    stripeClientSecret: stripeClientSecretSliceReducer,\n  })\n})\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, DeleteAuthAddressActionType, messageActions } from \"reducers/slices/app\";\nimport { deleteAuthAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* deleteAuthAddressWorker(action: PayloadAction<DeleteAuthAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for delete user data\n     **/\n    yield put(\n      deleteAuthAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteAuthAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.deleteAddress({ addressId: action.payload.addressId })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.deleteAddress({ addressId: action.payload.addressId })\n    )\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, messageActions, DeleteAuthAvatarImageActionType } from \"reducers/slices/app\";\nimport { deleteAuthAvatarImageFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete user avatar image \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK \n *      - (Admin): OK \n *\n *  - steps:\n *\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* deleteAuthAvatarImageWorker(action: PayloadAction<DeleteAuthAvatarImageActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      deleteAuthAvatarImageFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/avatar-image`\n\n    /**\n     * fetch data\n     **/\n\n      // start fetching\n      const response = yield call(() => api({\n        method: \"DELETE\",\n        url: apiUrl,\n      })\n        .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS }))\n        .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n      )\n\n      /**\n       * update fetch status sucess\n       **/\n      yield put(\n        deleteAuthAvatarImageFetchStatusActions.update(response.fetchStatus)\n      )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.updateAvatarImagePath(\"\")\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission defined: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, DeleteAuthPhoneActionType, messageActions } from \"reducers/slices/app\";\nimport { deleteAuthPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* deleteAuthPhoneWorker(action: PayloadAction<DeleteAuthPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for delete user data\n     **/\n    yield put(\n      deleteAuthPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteAuthPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.deletePhone({ phoneId: action.payload.phoneId })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.deletePhone({\n        phoneId: action.payload.phoneId\n      })\n    )\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, messageActions, PatchAuthAddressActionType } from \"reducers/slices/app\";\nimport { patchAuthAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - patch auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* patchAuthAddressWorker(action: PayloadAction<PatchAuthAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      patchAuthAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PATCH\",\n      url: apiUrl,\n      data: { type: action.payload.type }\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      patchAuthAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.replaceAddress(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"switched primary successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    if (action.payload.type === \"shipping\") {\n      yield put(\n        authActions.switchShippingAddress({\n          addressId: action.payload.addressId\n        })\n      )\n    } else {\n      yield put(\n        authActions.switchBillingAddress({\n          addressId: action.payload.addressId\n        })\n      )\n    }\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, messageActions, PatchAuthPhoneActionType } from \"reducers/slices/app\";\nimport { patchAuthPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - patch auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* patchAuthPhoneWorker(action: PayloadAction<PatchAuthPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      patchAuthPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PATCH\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      patchAuthPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.replacePhone(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"switched primary successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.switchPrimaryPhone({ \n        phoneId: action.payload.phoneId\n      })\n    )\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserAddressCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PostAuthAddressActionType } from \"reducers/slices/app\";\nimport { postAuthAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* postAuthAddressWorker(action: PayloadAction<PostAuthAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postAuthAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/addresses`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        // don't put addressId\n        address1: action.payload.address1,\n        address2: action.payload.address2,\n        city: action.payload.city,\n        province: action.payload.province,\n        country: action.payload.country,\n        postalCode: action.payload.postalCode,\n        isBillingAddress: action.payload.isBillingAddress,\n        isShippingAddress: action.payload.isShippingAddress,\n      } as UserAddressCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postAuthAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      console.log(\"added address from response\")\n      console.log(response.data)\n      yield put(\n        authActions.appendAddress(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postAuthAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.appendAddress(action.payload)\n    )\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { authActions, messageActions, PostAuthAvatarImageActionType } from \"reducers/slices/app\";\nimport { postAuthAvatarImageFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post user avatar image \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK \n *      - (Admin): OK \n *\n *  - steps:\n *\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* postAuthAvatarImageWorker(action: PayloadAction<PostAuthAvatarImageActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postAuthAvatarImageFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/avatar-image`\n\n    /**\n     * fetch data\n     **/\n\n    // prep form data\n    const formData = new FormData();\n    formData.append(\"avatarImage\", action.payload.avatarImage)\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: formData,\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, imagePath: response.data.imagePath }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postAuthAvatarImageFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.updateAvatarImagePath(response.imagePath)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else {\n    console.log(\"permission defined: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { UserPhoneCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PostAuthPhoneActionType } from \"reducers/slices/app\";\nimport { postAuthPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* postAuthPhoneWorker(action: PayloadAction<PostAuthPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postAuthPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/phones`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        // don't send phoneId when post\n        phoneNumber: action.payload.phoneNumber,\n        countryCode: action.payload.countryCode,\n        isSelected: action.payload.isSelected\n      } as UserPhoneCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postAuthPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      console.log(\"added phone from response\")\n      console.log(response.data)\n      yield put(\n        authActions.appendPhone(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postAuthPhoneFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.appendPhone(action.payload)\n    );\n\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserAddressCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PutAuthAddressActionType } from \"reducers/slices/app\";\nimport { putAuthAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* putAuthAddressWorker(action: PayloadAction<PutAuthAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putAuthAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        addressId: action.payload.addressId, \n        address1: action.payload.address1, \n        address2: action.payload.address2, \n        city: action.payload.city, \n        province: action.payload.province, \n        country: action.payload.country, \n        postalCode: action.payload.postalCode, \n        isBillingAddress: action.payload.isBillingAddress, \n        isShippingAddress: action.payload.isShippingAddress, \n      } as UserAddressCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putAuthAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.updateAddress(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putAuthAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.updateAddress(action.payload)\n    )\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserCompanyCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PutAuthCompanyActionType } from \"reducers/slices/app\";\nimport { putAuthCompanyFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* putAuthCompanyWorker(action: PayloadAction<PutAuthCompanyActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putAuthCompanyFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/companies/${action.payload.companyId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: action.payload as UserCompanyCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putAuthCompanyFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.updateCompany(response.data)\n      )\n\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putAuthCompanyFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserPhoneCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PutAuthPhoneActionType } from \"reducers/slices/app\";\nimport { putAuthPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* putAuthPhoneWorker(action: PayloadAction<PutAuthPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putAuthPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        phoneId: action.payload.phoneId,\n        phoneNumber: action.payload.phoneNumber,\n        countryCode: action.payload.countryCode,\n        isSelected: action.payload.isSelected\n      } as UserPhoneCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putAuthPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.updatePhone(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n          /**\n           * update auth only redux store\n           **/\n    yield put(\n      authActions.updatePhone(action.payload)\n    )\n\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserCriteria } from \"domain/user/types\";\nimport { authActions, messageActions, PutAuthActionType } from \"reducers/slices/app\";\nimport { putAuthFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put auth (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* putAuthWorker(action: PayloadAction<PutAuthActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putAuthFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: action.payload as UserCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putAuthFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        authActions.update({\n          ...curAuth,\n          user: response.data\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    yield put(\n      authActions.update({\n        ...curAuth,\n        user: {\n          ...curAuth.user,\n          firstName: action.payload.firstName,\n          lastName: action.payload.lastName,\n          email: action.payload.email,\n        },\n      })\n    );\n\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { deleteCartItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/cartItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - delete all cart items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): delete all entities \n *      - (Member): send api request to delete all entities and delete the entities from redux store \n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. delete all entities from redux store\n *\n *      (Member): \n *\n *        m1. send delete request to api to delete all entities\n *\n *        m2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteCartItemWorker(action: PayloadAction<CartItemType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteCartItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/cartItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteCartItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       *  - receive the updated data as response data\n       *\n       **/\n      yield put(\n        cartItemActions.clear()\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * delete the target entity from redux store\n     **/\n    yield put(\n      cartItemActions.delete()\n    )\n  }\n}\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { deleteSingleCartItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/cartItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single cart items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): delete a existing entity \n *      - (Member): send api request to delete a given entity and delete the entity from redux store \n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. delete the target entity from redux store\n *\n *      (Member): \n *\n *        m1. send delete request to api to delete the target entity \n *\n *        m2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleCartItemWorker(action: PayloadAction<CartItemType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleCartItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/cartItems/${action.payload.cartItemId}`\n\n    /**\n     * fetch data\n     **/\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleCartItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update categories domain in state\n       *\n       *  - receive the updated data as response data\n       *\n       **/\n      yield put(\n        cartItemActions.delete(action.payload)\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * delete the target entity from redux store\n     **/\n    yield put(\n      cartItemActions.delete(action.payload)\n    )\n  }\n}\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { getCartItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/cartItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch cart items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): send api request to grab data\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Member): \n *\n *        m1. send fetch request to api to grab data\n *\n *        m2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchCartItemWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getCartItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/cartItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getCartItemFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update cartItem domain in state\n       *\n       **/\n      console.log(\"recived cart items from api\")\n      console.log(response.data) // no pagination, use response.data.\n      yield put(\n        cartItemActions.update(response.data)\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  }\n}\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { postCartItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/cartItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getUuidv4 } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post cart items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): add a new data to redux saga \n *      - (Member): send api request to post a new data and assign response data to the redux saga\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. save the new data to redux store\n *\n *      (Member): \n *\n *        m1. send post request to api to post a new data \n *\n *        m2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - payload (e.g., CartItemType) does not have any id yet.\n *\n *      (Guest): \n *\n *        - need to assign the id temporarly (e.g., int, uuidv4). the id is not kept when the user create an account (e.g., member)\n *\n *      (Member):\n *\n *        - don't need to assign the id. the back-end takes care of that.\n *  \n **/\nexport function* postCartItemWorker(action: PayloadAction<CartItemType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      postCartItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/cartItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: action.payload\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postCartItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       *  - receive the newly added data as response data\n       *\n       **/\n      yield put(\n        cartItemActions.updateOne(response.data)\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * create temp id and assign it to the new entity\n     **/\n    const tempId = getUuidv4()\n    const newEntity = action.payload\n    newEntity.cartItemId = tempId\n\n    /**\n     * update categories domain in state\n     *\n     *  - receive the newly added data as response data\n     *\n     **/\n    yield put(\n      cartItemActions.updateOne(newEntity)\n    )\n\n\n  }\n}\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { CartItemType } from \"domain/cart/types\";\nimport { putCartItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/cartItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - put cart items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): replace a existing entity with a new one\n *      - (Member): send api request to put a new data and assign response data to the redux saga\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. update the new data to redux store\n *\n *      (Member): \n *\n *        m1. send put request to api to put a new data \n *\n *        m2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - keep the same id since it is replacement \n *\n **/\nexport function* putCartItemWorker(action: PayloadAction<CartItemType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      putCartItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/cartItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: action.payload\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putCartItemFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       *  - receive the updated data as response data\n       *\n       **/\n      yield put(\n        cartItemActions.updateOne(response.data)\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * update categories domain in state\n     *\n     *  - receive the newly added data as response data\n     *\n     **/\n    yield put(\n      cartItemActions.updateOne(action.payload)\n    )\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleCategoryFetchStatusActions } from \"reducers/slices/app/fetchStatus/category\";\nimport { categoryActions, DeleteSingleCategoryActionType } from \"reducers/slices/domain/category\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single category items \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleCategoryWorker(action: PayloadAction<DeleteSingleCategoryActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleCategoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/categories/${action.payload.categoryId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleCategoryFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        categoryActions.delete({\n          categoryId: action.payload.categoryId\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedCategoryType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { getCategoryFetchStatusActions } from \"reducers/slices/app/fetchStatus/category\";\nimport { categoryActions, categoryPaginationPageActions, categoryPaginationTotalElementsActions, categoryPaginationTotalPagesActions } from \"reducers/slices/domain/category\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { FetchStatusEnum } from \"src/app\";\nimport { mSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\nimport { categorySchemaArray } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch category items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *    - for  guest/member user, use 'fetchCategoryWorkerWithCache' to cache data instead.\n *\n *  - (UserType)\n *\n *      - (Guest): use 'fetchCategoryWorkerWithCache' to cache data instead. \n *      - (Member): use 'fetchCategoryWorkerWithCache' to cache data instead.\n *      - (Admin): send fetch request and receive data and save it  to redux store\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchCategoryWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   *  - disabled this. i don't think i need this.\n   **/\n  //const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  //if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n  /**\n   * update status for anime data\n   **/\n  yield put(\n    getCategoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n  )\n\n  /**\n   * prep query string\n   **/\n  const curQueryString = yield select(mSelector.makeCategoryQueryStringSelector())\n\n  console.log(curQueryString)\n  console.log(generateQueryString(curQueryString));\n\n  /**\n   * grab all domain\n   **/\n  const apiUrl = `${API1_URL}/categories${generateQueryString(curQueryString)}`\n\n  /**\n   * fetch data\n   **/\n\n  // prep keyword if necessary\n\n  // start fetching\n  const response = yield call(() => api({\n    method: \"GET\",\n    url: apiUrl,\n  })\n    .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n    .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n  )\n\n  /**\n   * update fetch status sucess\n   **/\n  yield put(\n    getCategoryFetchStatusActions.update(response.fetchStatus)\n  )\n\n  if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n    /**\n     * normalize response data\n     *\n     *  - TODO: make sure response structure with remote api\n     **/\n    console.log(response) // pageable response\n    const normalizedData = normalize(response.content, categorySchemaArray)\n\n    /**\n     * update categories domain in state\n     *\n     **/\n    yield put(\n      categoryActions.update(normalizedData.entities.categories as NormalizedCategoryType)\n    )\n\n\n    /**\n     * update pagination.\n     *\n     * sample response data:\n     * \n     * <PageImpl>\n     *  <content>\n     *    ... actual content\n     *  </content>\n     *  <pageable>\n     *   <sort>\n     *   <sorted>true</sorted>\n     *   <unsorted>false</unsorted>\n     *   <empty>false</empty>\n     *   </sort>\n     *   <pageNumber>1</pageNumber>\n     *   <pageSize>20</pageSize>\n     *   <offset>20</offset>\n     *   <paged>true</paged>\n     *   <unpaged>false</unpaged>\n     *  </pageable>\n     *  <totalPages>2</totalPages>\n     *  <totalElements>25</totalElements>\n     *  <last>true</last>\n     *  <sort>\n     *   <sorted>true</sorted>\n     *   <unsorted>false</unsorted>\n     *   <empty>false</empty>\n     *  </sort>\n     *  <first>false</first>\n     *  <number>1</number>\n     *  <numberOfElements>5</numberOfElements>\n     *  <size>20</size>\n     *  <empty>false</empty>\n     * </PageImpl>\n     **/\n\n\n    console.log(response.pageable)\n\n    console.log(\"total pages\")\n    console.log(response.totalPages)\n\n    yield all([\n      put(categoryPaginationPageActions.update(response.pageable.pageNumber)),\n      put(categoryPaginationTotalPagesActions.update(response.totalPages)),\n      put(categoryPaginationTotalElementsActions.update(response.totalElements)),\n    ])\n\n  } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n    console.log(response.message)\n\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { CategoryCriteria, NormalizedCategoryType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postCategoryFetchStatusActions } from \"reducers/slices/app/fetchStatus/category\";\nimport { categoryActions, PostCategoryActionType } from \"reducers/slices/domain/category\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\nimport { categorySchemaEntity } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - post category of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send post request to api to post a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - payload (e.g., CategoryType) does not have any id yet.\n *  \n **/\nexport function* postCategoryWorker(action: PayloadAction<PostCategoryActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      postCategoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/categories`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        categoryName: action.payload.categoryName,\n        categoryPath: action.payload.categoryPath,\n        categoryDescription: action.payload.categoryDescription,\n      } as CategoryCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postCategoryFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.data, categorySchemaEntity)\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        // be careful when normalized a single object, you need to append its domain name (plural) to 'entities'\n        categoryActions.merge(normalizedData.entities.categories as NormalizedCategoryType)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { CategoryCriteria, NormalizedCategoryType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putCategoryFetchStatusActions } from \"reducers/slices/app/fetchStatus/category\";\nimport { categoryActions, PutCategoryActionType } from \"reducers/slices/domain/category\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\nimport { categorySchemaEntity } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - put category items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send put request to api to put a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - keep the same id since it is replacement \n *\n **/\nexport function* putCategoryWorker(action: PayloadAction<PutCategoryActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      putCategoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/categories/${action.payload.categoryId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        categoryId: action.payload.categoryId,\n        categoryDescription: action.payload.categoryDescription,\n        categoryName: action.payload.categoryName,\n        categoryPath: action.payload.categoryPath\n      } as CategoryCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putCategoryFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.data, categorySchemaEntity)\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        categoryActions.merge(normalizedData.entities.categories as NormalizedCategoryType)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  }\n}\n\n\n\n","import { RequestTrackerType } from \"src/app\";\nimport { select } from \"redux-saga/effects\";\nimport { mSelector } from \"src/selectors/selector\";\n\n/**\n *\n * request url check worker. \n *\n *  - This worker is a nested worker. called by 'requestDomainWorker' and 'DomainFilterWorker'.\n *\n * \n *  - check the request url has requested in the past\n *    - if so, don't need to do anything since data exists in store \n *    - if no, prep for request to backend api\n *\n *  - should be used only for fetching (e.g., GET request), but not for any update (e.g., POST, PATCH, PUT, DELETE)\n *\n *\n * Issues:\n *\n *  #1: this logic does not work if two same request dispatched at the same time. (esp with takeEvery).\n *    - takeEvery pick every action and execute its worker. so if two same request (e.g., same endpoint) at the same time, 'requestList' state does not contain that url and allow to dispatch the two request. \n *\n *    - workaround: change 'takeEvery' to 'takeLatest'.\n *      - takeLatest pick the action and cancel the previous action if it hasn't done yet.\n **/\nexport function* requestUrlCheckWorker(targetUrl: string) {\n\n  // get requestList state from redux store \n  // * you need to use 'yield' with 'select'\n  // does this 'yield' pause code here??\n  const requestTrackerState: RequestTrackerType  = yield select(mSelector.makeRequestTrackerSelector())\n\n  // check the target url already exist in requestList state\n  // 'find' function return 'undefined' when it could not satisfied the condition.\n  \n  const isExist = Object.prototype.hasOwnProperty.call(requestTrackerState, targetUrl)\n\n  if (!isExist) {\n    // target url does not exist in requestUrl, so need to fetch from backend api\n    return null \n\n  } else {\n    // target url exists in requestUrl, so guide to cache (redux-store) because data already exist in it\n    // don't need to do anything.\n    return requestTrackerState[targetUrl]\n\n  }\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedCategoryType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { requestTrackerActions } from \"reducers/slices/app\";\nimport { getCategoryFetchStatusActions } from \"reducers/slices/app/fetchStatus/category\";\nimport { categoryActions } from \"reducers/slices/domain/category\";\nimport { call, put } from \"redux-saga/effects\";\nimport { FetchStatusEnum, RequestTrackerBaseType } from \"src/app\";\nimport { categorySchemaArray } from \"states/state\";\nimport { requestUrlCheckWorker } from \"./common/requestUrlCheckWorker\";\n\n/**\n * a worker (generator)    \n *\n *  - only run this once to get all categories and store it in the store.\n *\n *  - should be used by only member/guest. don't use this with admin user since it is easily get stale.\n *\n *  \n **/\nexport function* fetchCategoryWithCacheWorker(action: PayloadAction<{}>) {\n\n\n  /**\n   * update status for anime data\n   **/\n  yield put(\n    getCategoryFetchStatusActions.update(FetchStatusEnum.FETCHING)\n  )\n\n  /**\n   * grab all categories\n   *  - might be better way to do this category filtering #PERFORMANCE\n   **/\n  const apiUrl = `${API1_URL}/categories`\n\n  // return empty object if does not exist\n  const targetRequestTrackerBase: RequestTrackerBaseType = yield call(requestUrlCheckWorker, apiUrl)\n\n  if (targetRequestTrackerBase) {\n    // target url exists\n\n    // currently do nothing\n  } else {\n    // target url does not exist\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"get\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getCategoryFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.content, categorySchemaArray)\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        categoryActions.update(normalizedData.entities.categories as NormalizedCategoryType)\n      )\n\n      /**\n       * add the url to requestUrlTracker state\n       **/\n      yield put(\n        requestTrackerActions.update({\n          [apiUrl]: {\n            ids: normalizedData.result,\n            //pagination: ...\n          }\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n  }\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { requestTrackerActions } from \"reducers/slices/app\";\nimport { getProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { productActions, productCurItemsActions, productPaginationLimitActions, productPaginationPageActions, productPaginationTotalElementsActions, productPaginationTotalPagesActions } from \"reducers/slices/domain/product\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, RequestTrackerBaseType, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\nimport { productSchemaArray } from \"states/state\";\nimport { requestUrlCheckWorker } from \"./common/requestUrlCheckWorker\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch all of this domain with cache\n *\n *    - for member/guest user, use 'fetchProductWithCacheWorker' instead for caching feature.\n *\n *  - (ProductType)\n *\n *      - (Guest): send get request and receive all domain and save it to redux store with cache\n *      - (Member): send get request and receive all domain and save it to redux store with cache\n *      - (Admin): N/A \n *\n *  - steps:\n *\n *      (Guest/Member): \n *\n *        a1. check the url is requested before or not\n *\n *        a2. if yes, get data from redux store. \n *\n *        a3. if no, send a request and store it in redux store and also update 'requestUrlTracker' \n *  \n **/\nexport function* fetchProductWithCacheWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.GUEST || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeProductQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/products${generateQueryString(curQueryString)}`\n\n    // return empty object if does not exist\n    const targetRequestTrackerBase: RequestTrackerBaseType = yield call(requestUrlCheckWorker, apiUrl)\n\n    if (targetRequestTrackerBase) {\n      // target url exists\n\n      /**\n       * update cur pagination\n       **/\n      yield all([\n        put(productPaginationPageActions.update(targetRequestTrackerBase.pagination.page)),\n        put(productPaginationLimitActions.update(targetRequestTrackerBase.pagination.limit)),\n        put(productPaginationTotalPagesActions.update(targetRequestTrackerBase.pagination.totalPages)),\n      ])\n\n      /**\n       * update cur items\n       **/\n      yield put(\n        productCurItemsActions.update(targetRequestTrackerBase.ids)\n      )\n\n      // currently do nothing\n    } else {\n      // target url does not exist\n      /**\n       * fetch data\n       **/\n\n      // prep keyword if necessary\n\n      // start fetching\n      const response = yield call(() => api({\n        method: \"GET\",\n        url: apiUrl,\n      })\n        .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n        .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n      )\n\n      /**\n       * update fetch status sucess\n       **/\n      yield put(\n        getProductFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n      )\n      if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n        /**\n         * normalize response data\n         *\n         *  - TODO: make sure response structure with remote api\n         **/\n        console.log(response)\n        const normalizedData = normalize(response.content, productSchemaArray)\n\n        /**\n         * update product domain in state\n         *\n         **/\n        yield put(\n          productActions.merge(normalizedData.entities.products as NormalizedProductType)\n        )\n\n        /**\n         * update domain.curItems\n         **/\n        yield put(\n          productCurItemsActions.update(normalizedData.result)\n        )\n\n        /**\n         * update pagination.\n         *\n         * sample response data:\n         * \n         * <PageImpl>\n         *  <content>\n         *    ... actual content\n         *  </content>\n         *  <pageable>\n         *   <sort>\n         *   <sorted>true</sorted>\n         *   <unsorted>false</unsorted>\n         *   <empty>false</empty>\n         *   </sort>\n         *   <pageNumber>1</pageNumber>\n         *   <pageSize>20</pageSize>\n         *   <offset>20</offset>\n         *   <paged>true</paged>\n         *   <unpaged>false</unpaged>\n         *  </pageable>\n         *  <totalPages>2</totalPages>\n         *  <totalElements>25</totalElements>\n         *  <last>true</last>\n         *  <sort>\n         *   <sorted>true</sorted>\n         *   <unsorted>false</unsorted>\n         *   <empty>false</empty>\n         *  </sort>\n         *  <first>false</first>\n         *  <number>1</number>\n         *  <numberOfElements>5</numberOfElements>\n         *  <size>20</size>\n         *  <empty>false</empty>\n         * </PageImpl>\n         **/\n\n        console.log(response.pageable)\n\n        console.log(\"total pages\")\n        console.log(response.totalPages)\n\n        yield all([\n          put(productPaginationPageActions.update(response.pageable.pageNumber)),\n          put(productPaginationTotalPagesActions.update(response.totalPages)),\n          put(productPaginationTotalElementsActions.update(response.totalPages)),\n        ])\n\n        /**\n         * update requestUrlTracker\n         *\n         **/\n        yield put(\n          requestTrackerActions.update({\n            [apiUrl]: {\n              ids: normalizedData.result,\n              pagination: {\n                page: response.data.pageable.pageNumber,\n                limit: curQueryString.limit,\n                totalPages: response.data.totalPages,\n                totalElements: response.data.totalElements,\n              }\n            }\n          })\n        );\n\n      } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n        console.log(response.message)\n\n      }\n    }\n  } else {\n    console.log(\"permission denied. your product type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { leftNavMenuActions } from \"reducers/slices/ui\";\nimport { put } from \"redux-saga/effects\";\n\n/**\n * a worker (generator)    \n *  \n **/\nexport function* leftNavMenuWorkerWorker(action: PayloadAction<{}>) {\n\n  yield put(\n    leftNavMenuActions.toggle()\n  )\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleOrderEventFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { DeleteSingleOrderEventActionType, orderActions } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single order event \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleOrderEventWorker(action: PayloadAction<DeleteSingleOrderEventActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      deleteSingleOrderEventFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}/events/${action.payload.orderEventId}`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleOrderEventFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update product domain in state\n       *\n       * NOTE: be careful. this is different from usually 'delete' response.\n       *\n       *  - we received OrderDTO from the api and replace with old one since deleting an order event affects the other properties of the order.\n       *\n       **/\n      yield put(\n        orderActions.replace({\n          order: response.data,\n          orderId: action.payload.orderId\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { getOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions, orderPaginationPageActions, orderPaginationTotalElementsActions, orderPaginationTotalPagesActions } from \"reducers/slices/domain/order\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch all of this domain \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (OrderType)\n *\n *      - (Guest): N/A  \n *      - (Member): N/A \n *      - (Admin): send get request and receive all domain and save it to redux store \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchOrderWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeOrderQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/orders${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update order domain in state\n       *\n       **/\n      yield put(\n        orderActions.update(response.content)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(orderPaginationPageActions.update(response.pageNumber)),\n        put(orderPaginationTotalPagesActions.update(response.totalPages)),\n        put(orderPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your order type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { getOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch this single domain \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (OrderType)\n *\n *      - (Guest): N/A  \n *      - (Member): N/A \n *      - (Admin): send get request and receive this single domain and save it to redux store \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchSingleOrderWorker(action: PayloadAction<{ orderId: string }>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update order domain in state\n       *\n       **/\n      yield put(\n        orderActions.concat(response.data)\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your order type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { OrderEventCriteria } from \"domain/order/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postOrderEventFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions, PostOrderEventActionType } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single order event \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* postOrderEventWorker(action: PayloadAction<PostOrderEventActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      postOrderEventFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}/events`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        orderStatus: action.payload.orderStatus,\n        note: action.payload.note,\n        userId: action.payload.userId\n      } as OrderEventCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postOrderEventFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        orderActions.replace({\n          order: response.data,\n          orderId: action.payload.orderId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { OrderType, OrderCriteria } from \"domain/order/types\";\nimport { postOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions, PostOrderActionType } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum, MessageTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { getNanoId } from \"src/utils\";\nimport { stripeClientSecretActions } from \"reducers/slices/sensitive\";\nimport { checkoutOrderActions } from \"reducers/slices/domain/checkout\";\n\n/**\n * a worker (generator)    \n *\n *  - post this domain to create new\n *\n *  - NOT gonna use caching since it might be stale soon and the order can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): send post request to create new and receive data from api and save it to redux store\n *      - (Member): send post request to create new and receive data from api and save it to redux store\n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Guest & Member): \n *\n *        a1. send post request to api to post a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - this domain does not have its id yet.\n *\n *    - dont' send back the sensitive information about this order\n *\n **/\nexport function* postOrderWorker(action: PayloadAction<PostOrderActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.GUEST || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for post order data\n     **/\n    yield put(\n      postOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/orders`\n\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: action.payload as OrderCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, order: response.data.order, clientSecret: response.data.clientSecret }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       * - NOTE: TO checkout/order (not domain/orders)\n       *\n       **/\n\n      console.log(\"order and clientSecret in response\")\n\n      console.log(response);\n      \n\n\n      yield put(\n        checkoutOrderActions.update(response.order)\n      )\n\n      yield put(\n        stripeClientSecretActions.update(response.clientSecret)\n      )\n\n      /**\n       * update fetch status sucess\n       **/\n      yield put(\n        postOrderFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"we confirmed your request.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message,\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { SessionTimeoutOrderEventCriteria } from \"domain/order/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postSessionTimeoutOrderEventFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { checkoutOrderActions } from \"reducers/slices/domain/checkout\";\nimport { PostSessionTimeoutOrderEventActionType } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single order event \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): OK\n *      - (Member): OK\n *      - (Admin): N/A \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* postSessionTimeoutOrderEventWorker(action: PayloadAction<PostSessionTimeoutOrderEventActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.GUEST || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      postSessionTimeoutOrderEventFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}/events/session-timeout`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        orderNumber: action.payload.orderNumber\n      } as SessionTimeoutOrderEventCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postSessionTimeoutOrderEventFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        checkoutOrderActions.update(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: \"sorry, your session is timeout. please start over again.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. you are \" + curAuth.userType)\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { OrderEventCriteria } from \"domain/order/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putOrderEventFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions, PutOrderEventActionType } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single order event \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* putOrderEventWorker(action: PayloadAction<PutOrderEventActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      putOrderEventFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}/events/${action.payload.orderEventId}`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        orderEventId: action.payload.orderEventId,\n        note: action.payload.note,\n        userId: curAuth.user.userId,\n      } as OrderEventCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putOrderEventFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update product domain in state\n       *\n       **/\n\n      console.log(\"response from PUT order event update.\")\n      console.log(response.data)\n\n      yield put(\n        orderActions.updateEvent({\n          orderId: action.payload.orderId,\n          event: response.data\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.fetchStatus)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.fetchStatus\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { OrderType } from \"domain/order/types\";\nimport { putOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { orderActions } from \"reducers/slices/domain/order\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - put this domain to replace\n *\n *  - NOT gonna use caching since it might be stale soon and the order can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send put request to api to put a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - keep the same id since it is replacement \n *\n **/\nexport function* putOrderWorker(action: PayloadAction<OrderType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put order data\n     **/\n    yield put(\n      putOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/orders/${action.payload.orderId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: action.payload\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        orderActions.concat(response.data)\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleProductVariantFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { DeleteSingleProductVariantActionType, productActions } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single product items \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleProductVariantWorker(action: PayloadAction<DeleteSingleProductVariantActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      deleteSingleProductVariantFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}/variants/${action.payload.variantId}`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleProductVariantFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      console.log(\"puted product\")\n      console.log(response.data)\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        productActions.deleteVariant({\n          productId: action.payload.productId,\n          variantId: action.payload.variantId\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteSingleProductVariantFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { DeleteSingleProductActionType, productActions } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single product items \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleProductWorker(action: PayloadAction<DeleteSingleProductActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        productActions.delete({\n          productId: action.payload.productId\n        })\n      )\n\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteSingleProductFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n\n    }\n  }\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { getProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { productActions, productPaginationPageActions, productPaginationTotalElementsActions, productPaginationTotalPagesActions } from \"reducers/slices/domain/product\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\nimport { productSchemaArray } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch all of this domain \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *    - for member/guest user, use 'fetchProductWithCacheWorker' instead for caching feature.\n *\n *  - (ProductType)\n *\n *      - (Guest): N/A  \n *      - (Member): N/A \n *      - (Admin): send get request and receive all domain and save it to redux store \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchProductWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeProductQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/products${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      console.log(response) // pageable response\n      const normalizedData = normalize(response.content, productSchemaArray)\n\n      /**\n       * update product domain in state\n       *\n       * - use 'update' instead of 'merge' since no cache\n       *\n       **/\n      yield put(\n        productActions.update(normalizedData.entities.products as NormalizedProductType)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(productPaginationPageActions.update(response.pageable.pageNumber)),\n        put(productPaginationTotalPagesActions.update(response.totalPages)),\n        put(productPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.fetchStatus)\n    }\n  } else {\n    console.log(\"permission denied. your product type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { getPublicProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { productActions, productPaginationPageActions, productPaginationTotalElementsActions, productPaginationTotalPagesActions } from \"reducers/slices/domain/product\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\nimport { productSchemaArray } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch all of this domain (public only)\n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *    - for member/guest user, use 'fetchProductWithCacheWorker' instead for caching feature.\n *\n *  - (ProductType)\n *\n *      - (Guest): OK  \n *      - (Member): OK \n *      - (Admin): N/A \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchPublicProductWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.GUEST || curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getPublicProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeProductQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/products/public${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getPublicProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      console.log(response) // pageable response\n      const normalizedData = normalize(response.content, productSchemaArray)\n\n      /**\n       * update product domain in state\n       *\n       * - use 'update' instead of 'merge' since no cache\n       *\n       **/\n      yield put(\n        productActions.update(normalizedData.entities.products as NormalizedProductType)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(productPaginationPageActions.update(response.pageable.pageNumber)),\n        put(productPaginationTotalPagesActions.update(response.totalPages)),\n        put(productPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your product type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { getProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { FetchSingleProductActionType, productActions } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\nimport { productSchemaEntity } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch this single domain \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (ProductType)\n *\n *      - (Guest): N/A  \n *      - (Member): N/A \n *      - (Admin): send get request and receive this single domain and save it to redux store \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchSingleProductWorker(action: PayloadAction<FetchSingleProductActionType>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.data, productSchemaEntity)\n\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        // be careful when normalized a single object, you need to append its domain name (plural) to 'entities'\n        productActions.merge(normalizedData.entities.products as NormalizedProductType)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"fetched successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. your product type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { ProductVariantCriteria } from \"domain/product/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postProductVariantFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { PostProductVariantActionType, productActions } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post this domain to create new\n *\n *  - NOT gonna use caching since it might be stale soon and the product can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): N/A \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send post request to api to post a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - this domain does not have its id yet.\n *\n **/\nexport function* postProductVariantWorker(action: PayloadAction<PostProductVariantActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for post product data\n     **/\n    yield put(\n      postProductVariantFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}/variants`\n\n    /**\n     * fetch data\n     **/\n\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        variantColor: action.payload.variantColor,\n        productSize: action.payload.productSize,\n        variantUnitPrice: action.payload.variantUnitPrice,\n        isDiscount: action.payload.isDiscount,\n        variantDiscountPrice: action.payload.variantDiscountPrice,\n        variantDiscountStartDate: action.payload.variantDiscountStartDate,\n        variantDiscountEndDate: action.payload.variantDiscountEndDate,\n        variantWeight: action.payload.variantWeight,\n        variantHeight: action.payload.variantHeight,\n        variantLength: action.payload.variantLength,\n        variantWidth: action.payload.variantWidth,\n        note: action.payload.note,\n        variantStock: action.payload.variantStock,\n      } as ProductVariantCriteria,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postProductVariantFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      console.log(\"posted product\")\n      console.log(response.data)\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        productActions.appendVariant({\n          productId: action.payload.productId,\n          variant: response.data\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n\n\n\n\n\n","import { ProductCriteria } from \"./types\";\n\nexport const productFormDataGenerator = (input: ProductCriteria) => {\n\n  const formData = new FormData();\n\n  /**\n   * extract 'productImageFiles' (e.g., array of File) and make the rest of data json string and send the two data as form data.\n   *\n   * 1. files: File[] (files)\n   * 2. criteria: string (application/json)\n   *\n   **/\n\n  // save files to form data\n  const productImageFiles = input.productImageFiles;\n\n  productImageFiles.forEach((file: File) => {\n    formData.append(\"files\", file)\n  })\n\n  // remove 'productImageFiles' from input\n  delete input.productImageFiles\n\n  // make the rest of data json and save it to form data\n\n  /**\n   * you need to make this file to prevent below error.\n   *\n   * Spring: 415: ContentType: application/octet-stream is not supported.\n   *\n   **/\n  formData.append(\"criteria\", new Blob([JSON.stringify(input)], { type: 'application/json' }));\n  \n  return formData\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { productFormDataGenerator } from \"domain/product/formData\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { PostProductActionType, productActions } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\nimport { productSchemaEntity } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - post this domain to create new\n *\n *  - NOT gonna use caching since it might be stale soon and the product can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): N/A \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send post request to api to post a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - this domain does not have its id yet.\n *\n **/\nexport function* postProductWorker(action: PayloadAction<PostProductActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for post product data\n     **/\n    yield put(\n      postProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/products`\n\n    /**\n     * fetch data\n     **/\n\n    // prep form data\n    const formData = productFormDataGenerator(action.payload)\n\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: formData,\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      console.log(\"posted product\")\n      console.log(response.data)\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.data, productSchemaEntity)\n\n      console.log(\"normalized product\")\n      console.log(normalizedData)\n\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        // be careful when normalized a single object, you need to append its domain name (plural) to 'entities'\n        productActions.merge(normalizedData.entities.products as NormalizedProductType)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { ProductVariantCriteria } from \"domain/product/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putProductVariantFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { productActions, PutProductVariantActionType } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put this domain to create new\n *\n *  - NOT gonna use caching since it might be stale soon and the product can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): N/A \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send post request to api to post a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - this domain does not have its id yet.\n *\n **/\nexport function* putProductVariantWorker(action: PayloadAction<PutProductVariantActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      putProductVariantFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}/variants/${action.payload.variantId}`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        variantId: action.payload.variantId,\n        variantColor: action.payload.variantColor,\n        productSize: action.payload.productSize,\n        variantUnitPrice: action.payload.variantUnitPrice,\n        isDiscount: action.payload.isDiscount,\n        variantDiscountPrice: action.payload.variantDiscountPrice,\n        variantDiscountStartDate: action.payload.variantDiscountStartDate,\n        variantDiscountEndDate: action.payload.variantDiscountEndDate,\n        variantWeight: action.payload.variantWeight,\n        variantHeight: action.payload.variantHeight,\n        variantLength: action.payload.variantLength,\n        variantWidth: action.payload.variantWidth,\n        note: action.payload.note,\n        variantStock: action.payload.variantStock,\n      } as ProductVariantCriteria,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putProductVariantFetchStatusActions.update(response.fetchStatus)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      console.log(\"puted product\")\n      console.log(response.data)\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        productActions.updateVariant({\n          productId: action.payload.productId,\n          targetVariant: response.data\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.fetchStatus)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putProductVariantFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { productFormDataGenerator } from \"domain/product/formData\";\nimport { NormalizedProductType } from \"domain/product/types\";\nimport { normalize } from \"normalizr\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putProductFetchStatusActions } from \"reducers/slices/app/fetchStatus/product\";\nimport { productActions, PutProductActionType } from \"reducers/slices/domain/product\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\nimport { productSchemaEntity } from \"states/state\";\n\n/**\n * a worker (generator)    \n *\n *  - put this domain to replace\n *\n *  - NOT gonna use caching since it might be stale soon and the product can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send put request to api to put a new data \n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - keep the same id since it is replacement \n *\n **/\nexport function* putProductWorker(action: PayloadAction<PutProductActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put product data\n     **/\n    yield put(\n      putProductFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/products/${action.payload.productId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep form data\n    const formData = productFormDataGenerator(action.payload)\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: formData,\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putProductFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * normalize response data\n       *\n       *  - TODO: make sure response structure with remote api\n       **/\n      const normalizedData = normalize(response.data, productSchemaEntity)\n\n      /**\n       * update product domain in state\n       *\n       **/\n      yield put(\n        // be careful when normalized a single object, you need to append its domain name (plural) to 'entities'\n        productActions.merge(normalizedData.entities.products as NormalizedProductType)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putProductFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleReviewFetchStatusActions } from \"reducers/slices/app/fetchStatus/review\";\nimport { DeleteSingleReviewActionType, reviewActions } from \"reducers/slices/domain/review\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - deleteSingle review items of current review \n *\n *  - NOT gonna use caching since it might be stale soon and the review can update any time.\n *\n *  - (ReviewType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK  \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - currently, only member can create a review.\n *  \n **/\nexport function* deleteSingleReviewWorker(action: PayloadAction<DeleteSingleReviewActionType>) {\n\n  /**\n   * get cur review type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER || curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleReviewFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/reviews/${action.payload.reviewId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleReviewFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update review domain in state\n       *\n       **/\n      yield put(\n        reviewActions.delete({\n          reviewId: action.payload.reviewId\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteSingleReviewFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. your review type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { AxiosPromise, AxiosRequestConfig } from 'axios';\nimport { api } from \"configs/axiosConfig\";\nimport { getReviewFetchStatusActions } from \"reducers/slices/app/fetchStatus/review\";\nimport { reviewActions, reviewPaginationPageActions, reviewPaginationTotalPagesActions, reviewPaginationTotalElementsActions } from \"reducers/slices/domain/review\";\nimport { call, put, select, all } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector, mSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch review items of current review \n *\n *  - NOT gonna use caching since it might be stale soon and the review can update any time.\n *\n *  - (ReviewType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): send fetch request and receive data and save it  to redux store\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchReviewWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur review type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getReviewFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeReviewQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/reviews${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n      // prep keyword if necessary\n\n      // start fetching\n    const response = yield call(() => api({\n        method: \"GET\",\n        url: apiUrl,\n      })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n      /**\n       * update fetch status sucess\n       **/\n      yield put(\n        getReviewFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n      )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update review domain in state\n       *\n       **/\n      yield put(\n        reviewActions.update(response.content)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(reviewPaginationPageActions.update(response.pageable.pageNumber)),\n        put(reviewPaginationTotalPagesActions.update(response.totalPages)),\n        put(reviewPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your review type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { ReviewCriteria } from \"domain/review/type\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postReviewFetchStatusActions } from \"reducers/slices/app/fetchStatus/review\";\nimport { PostReviewActionType, reviewActions } from \"reducers/slices/domain/review\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post review items of current review \n *\n *  - NOT gonna use caching since it might be stale soon and the review can update any time.\n *\n *  - (ReviewType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK  \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - currently, only member can create a review.\n *  \n **/\nexport function* postReviewWorker(action: PayloadAction<PostReviewActionType>) {\n\n  /**\n   * get cur review type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER || curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      postReviewFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/reviews`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        reviewTitle: action.payload.reviewTitle,\n        reviewDescription: action.payload.reviewDescription,\n        isVerified: false, // when creating, always false\n        note: action.payload.note,\n        userId: action.payload.userId,\n        productId: action.payload.productId,\n        reviewPoint: action.payload.reviewPoint,\n      } as ReviewCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postReviewFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update review domain in state\n       *\n       **/\n      yield put(\n        reviewActions.append(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postReviewFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. your review type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { ReviewCriteria } from \"domain/review/type\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putReviewFetchStatusActions } from \"reducers/slices/app/fetchStatus/review\";\nimport { PutReviewActionType, reviewActions } from \"reducers/slices/domain/review\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put review items of current review \n *\n *  - NOT gonna use caching since it might be stale soon and the review can update any time.\n *\n *  - (ReviewType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK  \n *      - (Admin): OK \n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - currently, only member can create a review.\n *  \n **/\nexport function* putReviewWorker(action: PayloadAction<PutReviewActionType>) {\n\n  /**\n   * get cur review type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER || curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      putReviewFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/reviews/${action.payload.reviewId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        reviewId: action.payload.reviewId,\n        reviewTitle: action.payload.reviewTitle,\n        reviewDescription: action.payload.reviewDescription,\n        isVerified: action.payload.isVerified, // when member, this should be false. and when admin, this should be true \n        note: action.payload.note, // this should be only displayed on admin page\n        reviewPoint: action.payload.reviewPoint,\n      } as ReviewCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putReviewFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update review domain in state\n       *\n       **/\n      yield put(\n        reviewActions.updateOne(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied. your review type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserType } from \"domain/user/types\";\nimport { deleteSingleUserFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single user items \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): OK\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send delete request to api to delete the target entity \n *\n *        a2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleUserWorker(action: PayloadAction<UserType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleUserFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/categories/${action.payload.userId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleUserFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update categories domain in state\n       *\n       **/\n      yield put(\n        userActions.delete(action.payload)\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteUserAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { DeleteUserAddressActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete the other's address \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to the other member's userid \n *\n **/\nexport function* deleteUserAddressWorker(action: PayloadAction<DeleteUserAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for delete user data\n     **/\n    yield put(\n      deleteUserAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteUserAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.removeAddress({\n          addressId: action.payload.addressId,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteUserAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteUserAvatarImageFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { DeleteUserAvatarImageActionType } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete user avatar image \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *\n *  - note:\n *\n *    - this is to update other's avatar image (not for your own like auth)\n *\n *\n **/\nexport function* deleteUserAvatarImageWorker(action: PayloadAction<DeleteUserAvatarImageActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      deleteUserAvatarImageFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/avatar-image`\n\n    /**\n     * fetch data\n     **/\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteUserAvatarImageFetchStatusActions.update(response.fetchStatus)\n    )\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       * TODO: fix this at admin customer management\n       *\n       **/\n      //yield put(\n      //  authActions.updateAvatarImagePath(\"\")\n      //)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteUserAvatarImageFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission defined: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteUserPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { DeleteUserPhoneActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete the other memebr's phone \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to other member's userid \n *\n **/\nexport function* deleteUserPhoneWorker(action: PayloadAction<DeleteUserPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for delete user data\n     **/\n    yield put(\n      deleteUserPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteUserPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.removePhone({\n          phoneId: action.payload.phoneId,\n          userId: action.payload.userId\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        deleteUserPhoneFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { getUserFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch single user items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): send fetch request and receive data and save it  to redux store\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchSingleUserWorker(action: PayloadAction<{ userId: string }>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getUserFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab single domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getUserFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update user domain in state\n       *\n       **/\n      yield put(\n        userActions.concat([response.data])\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your user type: \" + curAuth.userType)\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { getUserFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { userActions, userPaginationPageActions, userPaginationTotalElementsActions, userPaginationTotalPagesActions } from \"reducers/slices/domain/user\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch user items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied) \n *      - (Admin): send fetch request and receive data and save it  to redux store\n *\n *  - steps:\n *\n *      (Admin): \n *\n *        a1. send fetch request to api to grab data\n *\n *        a2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchUserWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   *\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getUserFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeUserQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getUserFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update user domain in state\n       *\n       **/\n      yield put(\n        userActions.update(response.content)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(userPaginationPageActions.update(response.pageable.pageNumber)),\n        put(userPaginationTotalPagesActions.update(response.totalPages)),\n        put(userPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n  } else {\n    console.log(\"permission denied. your user type: \" + curAuth.userType)\n  }\n}\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { patchUserAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PatchUserAddressActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - patch the other member's address \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to the other member's userid \n *\n **/\nexport function* patchUserAddressWorker(action: PayloadAction<PatchUserAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      patchUserAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PATCH\",\n      url: apiUrl,\n      data: { type: action.payload.type }\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      patchUserAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.replaceAddresses({\n          addresses: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"switched primary successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        patchUserAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { patchUserPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PatchUserPhoneActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - patch the other memebr's phone \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to the other member's userid \n *\n **/\nexport function* patchUserPhoneWorker(action: PayloadAction<PatchUserPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      patchUserPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PATCH\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      patchUserPhoneFetchStatusActions.update(FetchStatusEnum.SUCCESS)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.replacePhones({\n          phones: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"switched primary successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        patchUserPhoneFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserAddressCriteria } from \"domain/user/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postUserAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PostUserAddressActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post the other user's address \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to auth userid \n *\n *      - don't refer to other userId \n *\n **/\nexport function* postUserAddressWorker(action: PayloadAction<PostUserAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postUserAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/addresses`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        address1: action.payload.address1,\n        address2: action.payload.address2,\n        city: action.payload.city,\n        province: action.payload.province,\n        country: action.payload.country,\n        postalCode: action.payload.postalCode,\n        isBillingAddress: action.payload.isBillingAddress,\n        isShippingAddress: action.payload.isShippingAddress,\n      } as UserAddressCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postUserAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      console.log(\"added address from response\")\n      console.log(response.data)\n      yield put(\n        userActions.appendAddress({\n          address: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postUserAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postUserAvatarImageFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PostUserAvatarImageActionType } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post user avatar image \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): OK \n *      - (Admin): OK \n *\n *  - steps:\n *\n *\n *  - note:\n *\n *    - this is to update other's avatar image (not for your own like auth)\n *\n **/\nexport function* postUserAvatarImageWorker(action: PayloadAction<PostUserAvatarImageActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postUserAvatarImageFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/avatar-image`\n\n    /**\n     * fetch data\n     **/\n\n    // prep form data\n    const formData = new FormData();\n    formData.append(\"avatarImage\", action.payload.avatarImage)\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: formData,\n      headers: { \"Content-Type\": \"multipart/form-data\" },\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postUserAvatarImageFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n\n      // TODO: fix this at admin customer\n      //yield put(\n      //  userActions.update(response.data.imagePath)\n      //)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postUserAvatarImageFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission defined: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserPhoneCriteria } from \"domain/user/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postUserPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PostUserPhoneActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put user (its own) data (not others) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to the other member's userid \n *\n *\n **/\nexport function* postUserPhoneWorker(action: PayloadAction<PostUserPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      postUserPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/phones`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        phoneNumber: action.payload.phoneNumber,\n        countryCode: action.payload.countryCode,\n        isSelected: action.payload.isSelected,\n      } as UserPhoneCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postUserPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      console.log(\"added phone from response\")\n      console.log(response.data)\n      yield put(\n        userActions.appendPhone({\n          phone: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserAddressCriteria } from \"domain/user/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putUserAddressFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PutUserAddressActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put the other member's address \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId always refers to the other member's userId \n *\n **/\nexport function* putUserAddressWorker(action: PayloadAction<PutUserAddressActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putUserAddressFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/addresses/${action.payload.addressId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        addressId: action.payload.addressId,\n        address1: action.payload.address1,\n        address2: action.payload.address2,\n        city: action.payload.city,\n        province: action.payload.province,\n        country: action.payload.country,\n        postalCode: action.payload.postalCode,\n        isBillingAddress: action.payload.isBillingAddress,\n        isShippingAddress: action.payload.isShippingAddress,\n      } as UserAddressCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putUserAddressFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.updateAddress({\n          address: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putUserAddressFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserPhoneCriteria } from \"domain/user/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putUserPhoneFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PutUserPhoneActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put user's phone of the other member (not for auth) \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId: the other member\n *\n **/\nexport function* putUserPhoneWorker(action: PayloadAction<PutUserPhoneActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putUserPhoneFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/phones/${action.payload.phoneId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: {\n        phoneNumber: action.payload.phoneNumber,\n        countryCode: action.payload.countryCode,\n        isSelected: action.payload.isSelected,\n        phoneId: action.payload.phoneId\n      } as UserPhoneCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putUserPhoneFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.updatePhone({\n          phone: response.data,\n          userId: action.payload.userId,\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        putUserPhoneFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { UserCriteria } from \"domain/user/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { putUserFetchStatusActions } from \"reducers/slices/app/fetchStatus/user\";\nimport { PutUserActionType, userActions } from \"reducers/slices/domain/user\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - put user item to replace\n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A (permission denied) \n *      - (Member): N/A (permission denied)\n *      - (Admin): OK \n *\n *  - steps:\n *\n *  - note:\n *\n *    - userId must be the other member (not for auth) \n *\n **/\nexport function* putUserWorker(action: PayloadAction<PutUserActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Admin User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.ADMIN) {\n\n    /**\n     * update status for put user data\n     **/\n    yield put(\n      putUserFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab this  domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PUT\",\n      url: apiUrl,\n      data: action.payload as UserCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      putUserFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update this domain in state\n       *\n       **/\n      yield put(\n        userActions.updateUser({\n          userId: action.payload.userId,\n          user: response.data\n        })\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"updated successfully.\",\n        })\n      )\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  } else {\n    console.log(\"permission denied: you are \" + curAuth.userType)\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { deleteSingleWishlistItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/wishlistItem\";\nimport { DeleteSingleWishlistItemActionType, wishlistItemActions } from \"reducers/slices/domain/wishlistItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - delete single wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): delete a existing entity \n *      - (Member): send api request to delete a given entity and delete the entity from redux store \n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. delete the target entity from redux store\n *\n *      (Member): \n *\n *        m1. send delete request to api to delete the target entity \n *\n *        m2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteSingleWishlistItemWorker(action: PayloadAction<DeleteSingleWishlistItemActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteSingleWishlistItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/wishlistItems/${action.payload.wishlistItemId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteSingleWishlistItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update categories domain in state\n       *\n       *  - receive the updated data as response data\n       *\n       **/\n      yield put(\n        wishlistItemActions.delete(action.payload.wishlistItemId)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"deleted successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * delete the target entity from redux store\n     **/\n    yield put(\n      wishlistItemActions.delete(action.payload.wishlistItemId)\n    )\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { WishlistItemType } from \"domain/wishlist/types\";\nimport { deleteWishlistItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/wishlistItem\";\nimport { wishlistItemActions } from \"reducers/slices/domain/wishlistItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\n\n/**\n * a worker (generator)    \n *\n *  - delete all wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): delete all entities \n *      - (Member): send api request to delete all entities and delete the entities from redux store \n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. delete all entities from redux store\n *\n *      (Member): \n *\n *        m1. send delete request to api to delete all entities\n *\n *        m2. receive the response and delete it from redux store if success\n *\n *  - note:\n *\n **/\nexport function* deleteWishlistItemWorker(action: PayloadAction<WishlistItemType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      deleteWishlistItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/wishlistItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"DELETE\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      deleteWishlistItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update categories domain in state\n       *\n       *  - receive the updated data as response data\n       *\n       **/\n      yield put(\n        wishlistItemActions.clear()\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n    }\n\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * delete the target entity from redux store\n     **/\n    yield put(\n      wishlistItemActions.delete()\n    )\n  }\n}\n\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { getWishlistItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/wishlistItem\";\nimport { wishlistItemActions, wishlistItemPaginationPageActions, wishlistItemPaginationTotalElementsActions, wishlistItemPaginationTotalPagesActions } from \"reducers/slices/domain/wishlistItem\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString, getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): send api request to grab data\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Member): \n *\n *        m1. send fetch request to api to grab data\n *\n *        m2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchWishlistItemWorker(action: PayloadAction<{}>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      getWishlistItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeWishlistItemQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/wishlistItems${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      getWishlistItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update domain in state\n       *\n       * don't use 'merge' since no cache\n       **/\n      console.log(\"wishlist item dto response data\")\n      console.log(response.data)\n      yield put(\n        wishlistItemActions.update(response.content)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(wishlistItemPaginationPageActions.update(response.pageable.pageNumber)),\n        put(wishlistItemPaginationTotalPagesActions.update(response.totalPages)),\n        put(wishlistItemPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"fetched successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { createCartItem } from \"domain/cart\";\nimport { WishlistItemType } from \"domain/wishlist/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { patchWishlistItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/wishlistItem\";\nimport { cartItemActions } from \"reducers/slices/domain/cartItem\";\nimport { PatchWishlistItemActionType, wishlistItemActions } from \"reducers/slices/domain/wishlistItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - patch (move to cart) wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): add a new data to redux saga \n *      - (Member): send api request to patch a new data and assign response data to the redux saga\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. save the new data to redux store\n *\n *      (Member): \n *\n *        m1. send patch request to api to patch a new data \n *\n *        m2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - payload (e.g., WishlistItemType) does not have any id yet.\n *\n *      (Guest): \n *\n *        - need to assign the id temporarly (e.g., int, uuidv4). the id is not kept when the user create an account (e.g., member)\n *\n *      (Member):\n *\n *        - don't need to assign the id. the back-end takes care of that.\n *  \n **/\nexport function* patchWishlistItemWorker(action: PayloadAction<PatchWishlistItemActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      patchWishlistItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/wishlistItems/${action.payload.wishlistItemId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"PATCH\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      patchWishlistItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update categories domain in state\n       *\n       *  - receive the newly added data as response data\n       *\n       **/\n      yield put(\n        wishlistItemActions.delete(action.payload.wishlistItemId)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"moved to cart successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        patchWishlistItemFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     *\n     **/\n    /**\n     * delete wishlist item and create new one \n     *\n     *\n     **/\n    yield put(\n      wishlistItemActions.delete(action.payload.wishlistItemId)\n    )\n\n    /**\n     *  get target wishlistItem\n     **/\n    const targetWishlistItem: WishlistItemType = yield select(mSelector.makeSingleWishlistItemSelector(action.payload.wishlistItemId))\n\n    /**\n     * move to cart\n     **/\n    yield put(\n      cartItemActions.append(createCartItem(action.payload.wishlistItemId, targetWishlistItem.product))\n    )\n\n    /**\n     * update message\n     **/\n    yield put(\n      messageActions.update({\n        id: getNanoId(),\n        type: MessageTypeEnum.SUCCESS,\n        message: \"moved to cart successfully.\",\n      })\n    )\n  }\n}\n\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { filterSingleVariant } from \"domain/product\";\nimport { WishlistItemCriteria, WishlistItemType } from \"domain/wishlist/types\";\nimport { messageActions } from \"reducers/slices/app\";\nimport { postWishlistItemFetchStatusActions } from \"reducers/slices/app/fetchStatus/wishlistItem\";\nimport { PostWishlistItemActionType, wishlistItemActions } from \"reducers/slices/domain/wishlistItem\";\nimport { call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { rsSelector } from \"src/selectors/selector\";\nimport { getNanoId } from \"src/utils\";\n\n/**\n * a worker (generator)    \n *\n *  - post wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): add a new data to redux saga \n *      - (Member): send api request to post a new data and assign response data to the redux saga\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Guest):\n *        \n *        g1. save the new data to redux store\n *\n *      (Member): \n *\n *        m1. send post request to api to post a new data \n *\n *        m2. receive the response and save it to redux store\n *\n *  - note:\n *\n *    - payload (e.g., WishlistItemType) does not have any id yet.\n *\n *      (Guest): \n *\n *        - need to assign the id temporarly (e.g., int, uuidv4). the id is not kept when the user create an account (e.g., member)\n *\n *      (Member):\n *\n *        - don't need to assign the id. the back-end takes care of that.\n *  \n **/\nexport function* postWishlistItemWorker(action: PayloadAction<PostWishlistItemActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n  /**\n   *\n   * Member User Type\n   *\n   **/\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      postWishlistItemFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/wishlistItems`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        variantId: action.payload.variantId,\n      } as WishlistItemCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postWishlistItemFetchStatusActions.update(response.fetchStatus)\n    )\n\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update categories domain in state\n       *\n       *  - receive the newly added data as response data\n       *\n       **/\n      yield put(\n        wishlistItemActions.updateOne(response.data.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"added successfully.\",\n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update fetch status failed\n       **/\n      yield put(\n        postWishlistItemFetchStatusActions.update(FetchStatusEnum.FAILED)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n\n\n  } else if (curAuth.userType === UserTypeEnum.GUEST) {\n\n    /**\n     * Guest User Type\n     **/\n\n    /**\n     * create temp id and assign it to the new entity\n     **/\n    const newEntity = {\n      createdAt: new Date(Date.now()),\n      product: filterSingleVariant(action.payload.variantId, action.payload.product),\n      wishlistItemId: getNanoId(), // temp. don't send to backend.\n    } as WishlistItemType\n\n    /**\n     * update categories domain in state\n     *\n     *  - receive the newly added data as response data\n     *\n     **/\n    yield put(\n      wishlistItemActions.updateOne(newEntity)\n    )\n\n\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions, FetchAuthOrderActionType } from \"reducers/slices/app\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString, getNanoId } from \"src/utils\";\nimport { fetchAuthOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { orderActions, orderPaginationPageActions, orderPaginationTotalPagesActions, orderPaginationTotalElementsActions } from \"reducers/slices/domain/order\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): send api request to grab data\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Member): \n *\n *        m1. send fetch request to api to grab data\n *\n *        m2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchAuthOrderWorker(action: PayloadAction<FetchAuthOrderActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      fetchAuthOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n    /**\n     * prep query string\n     **/\n    const curQueryString = yield select(mSelector.makeOrderQueryStringSelector())\n\n    console.log(curQueryString)\n    console.log(generateQueryString(curQueryString));\n\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${curAuth.user.userId}/orders${generateQueryString(curQueryString)}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, content: response.data.content, pageable: response.data.pageable, totalPages: response.data.totalPages, totalElements: response.data.totalElements }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      fetchAuthOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update domain in state\n       *\n       * don't use 'merge' since no cache\n       **/\n      console.log(\"auth order item dto response data\")\n      console.log(response.data)\n      yield put(\n        orderActions.update(response.content)\n      )\n\n      /**\n       * update pagination.\n       *\n       * sample response data:\n       * \n       * <PageImpl>\n       *  <content>\n       *    ... actual content\n       *  </content>\n       *  <pageable>\n       *   <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *   </sort>\n       *   <pageNumber>1</pageNumber>\n       *   <pageSize>20</pageSize>\n       *   <offset>20</offset>\n       *   <paged>true</paged>\n       *   <unpaged>false</unpaged>\n       *  </pageable>\n       *  <totalPages>2</totalPages>\n       *  <totalElements>25</totalElements>\n       *  <last>true</last>\n       *  <sort>\n       *   <sorted>true</sorted>\n       *   <unsorted>false</unsorted>\n       *   <empty>false</empty>\n       *  </sort>\n       *  <first>false</first>\n       *  <number>1</number>\n       *  <numberOfElements>5</numberOfElements>\n       *  <size>20</size>\n       *  <empty>false</empty>\n       * </PageImpl>\n       **/\n\n\n      console.log(response.pageable)\n\n      console.log(\"total pages\")\n      console.log(response.totalPages)\n\n      yield all([\n        put(orderPaginationPageActions.update(response.pageable.pageNumber)),\n        put(orderPaginationTotalPagesActions.update(response.totalPages)),\n        put(orderPaginationTotalElementsActions.update(response.totalElements)),\n      ])\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions, FetchAuthOrderActionType, PostAuthOrderEventActionType } from \"reducers/slices/app\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString, getNanoId } from \"src/utils\";\nimport { fetchAuthOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { orderActions, orderPaginationPageActions, orderPaginationTotalPagesActions, orderPaginationTotalElementsActions } from \"reducers/slices/domain/order\";\nimport { postOrderEventFetchStatusActions } from \"reducers/slices/app/fetchStatus/order\";\nimport { OrderEventCriteria } from \"domain/order/types\";\n\n/**\n * a worker (generator)    \n *\n *  - fetch wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): send api request to grab data\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Member): \n *\n *        m1. send fetch request to api to grab data\n *\n *        m2. receive the response and save it to redux store\n *  \n **/\nexport function* postAuthOrderEventWorker(action: PayloadAction<PostAuthOrderEventActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      postOrderEventFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/orders/${action.payload.orderId}/events`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"POST\",\n      url: apiUrl,\n      data: {\n        orderStatus: action.payload.orderStatus,\n        note: action.payload.note,\n        userId: action.payload.userId\n      } as OrderEventCriteria\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      postOrderEventFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update domain in state\n       *\n       * don't use 'merge' since no cache\n       **/\n      console.log(\"order dto in resposne\")\n      console.log(response.data)\n      yield put(\n        orderActions.updateOne(response.data)\n      )\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.SUCCESS,\n          message: \"we received your request.\" \n        })\n      )\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { PayloadAction } from \"@reduxjs/toolkit\";\nimport { api } from \"configs/axiosConfig\";\nimport { messageActions, FetchAuthOrderActionType, FetchSingleAuthOrderActionType } from \"reducers/slices/app\";\nimport { all, call, put, select } from \"redux-saga/effects\";\nimport { AuthType, FetchStatusEnum, MessageTypeEnum, UserTypeEnum } from \"src/app\";\nimport { mSelector, rsSelector } from \"src/selectors/selector\";\nimport { generateQueryString, getNanoId } from \"src/utils\";\nimport { fetchAuthOrderFetchStatusActions, fetchSingleAuthOrderFetchStatusActions } from \"reducers/slices/app/fetchStatus/auth\";\nimport { orderActions, orderPaginationPageActions, orderPaginationTotalPagesActions, orderPaginationTotalElementsActions } from \"reducers/slices/domain/order\";\n\n/**\n * a worker (generator)    \n *\n *  - fetchSingle wishlist items of current user \n *\n *  - NOT gonna use caching since it might be stale soon and the user can update any time.\n *\n *  - (UserType)\n *\n *      - (Guest): N/A \n *      - (Member): send api request to grab data\n *      - (Admin): N/A\n *\n *  - steps:\n *\n *      (Member): \n *\n *        m1. send fetchSingle request to api to grab data\n *\n *        m2. receive the response and save it to redux store\n *  \n **/\nexport function* fetchSingleAuthOrderWorker(action: PayloadAction<FetchSingleAuthOrderActionType>) {\n\n  /**\n   * get cur user type\n   **/\n  const curAuth: AuthType = yield select(rsSelector.app.getAuth)\n\n\n  if (curAuth.userType === UserTypeEnum.MEMBER) {\n\n    /**\n     * update status for anime data\n     **/\n    yield put(\n      fetchSingleAuthOrderFetchStatusActions.update(FetchStatusEnum.FETCHING)\n    )\n    /**\n     * grab all domain\n     **/\n    const apiUrl = `${API1_URL}/users/${action.payload.userId}/orders/${action.payload.orderId}`\n\n    /**\n     * fetch data\n     **/\n\n    // prep keyword if necessary\n\n    // start fetching\n    const response = yield call(() => api({\n      method: \"GET\",\n      url: apiUrl,\n    })\n      .then(response => ({ fetchStatus: FetchStatusEnum.SUCCESS, data: response.data }))\n      .catch(e => ({ fetchStatus: FetchStatusEnum.FAILED, message: e.response.data.message }))\n    )\n\n    /**\n     * update fetch status sucess\n     **/\n    yield put(\n      fetchSingleAuthOrderFetchStatusActions.update(response.fetchStatus)\n    )\n\n    if (response.fetchStatus === FetchStatusEnum.SUCCESS) {\n      /**\n       * update domain in state\n       *\n       * don't use 'merge' since no cache\n       **/\n      console.log(\"auth order item dto response data\")\n      console.log(response.data)\n      yield put(\n        orderActions.update([response.data])\n      )\n\n\n    } else if (response.fetchStatus === FetchStatusEnum.FAILED) {\n\n      console.log(response.message)\n\n      /**\n       * update message\n       **/\n      yield put(\n        messageActions.update({\n          id: getNanoId(),\n          type: MessageTypeEnum.ERROR,\n          message: response.message\n        })\n      )\n    }\n  }\n}\n\n\n","import { deleteAuthAddressActionTypeName, deleteAuthAvatarImageActionTypeName, deleteAuthPhoneActionTypeName, patchAuthAddressActionTypeName, patchAuthPhoneActionTypeName, postAuthAddressActionTypeName, postAuthAvatarImageActionTypeName, postAuthPhoneActionTypeName, putAuthActionTypeName, putAuthAddressActionTypeName, putAuthCompanyActionTypeName, putAuthPhoneActionTypeName, fetchAuthOrderActionTypeName, postAuthOrderEventActionTypeName, fetchSingleAuthOrderActionTypeName } from 'reducers/slices/app';\nimport { deleteCartItemActionTypeName, deleteSingleCartItemActionTypeName, fetchCartItemActionTypeName, postCartItemActionTypeName, putCartItemActionTypeName } from 'reducers/slices/domain/cartItem';\nimport { deleteSingleCategoryActionTypeName, fetchCategoryActionTypeName, fetchCategoryWithCacheActionTypeName, postCategoryActionTypeName, putCategoryActionTypeName } from 'reducers/slices/domain/category';\nimport { deleteSingleOrderEventActionTypeName, fetchOrderActionTypeName, fetchSingleOrderActionTypeName, postOrderActionTypeName, postOrderEventActionTypeName, postSessionTimeoutOrderEventActionTypeName, putOrderActionTypeName, putOrderEventActionTypeName } from 'reducers/slices/domain/order';\nimport { deleteSingleProductActionTypeName, deleteSingleProductVariantActionTypeName, fetchProductActionTypeName, fetchProductWithCacheActionTypeName, fetchPublicProductActionTypeName, fetchSingleProductActionTypeName, postProductActionTypeName, postProductVariantActionTypeName, putProductActionTypeName, putProductVariantActionTypeName } from 'reducers/slices/domain/product';\nimport { deleteSingleReviewActionTypeName, fetchReviewActionTypeName, postReviewActionTypeName, putReviewActionTypeName } from 'reducers/slices/domain/review';\nimport { deleteSingleUserActionTypeName, deleteUserAddressActionTypeName, deleteUserAvatarImageActionTypeName, deleteUserPhoneActionTypeName, fetchSingleUserActionTypeName, fetchUserActionTypeName, patchUserAddressActionTypeName, patchUserPhoneActionTypeName, postUserAddressActionTypeName, postUserAvatarImageActionTypeName, postUserPhoneActionTypeName, putUserActionTypeName, putUserAddressActionTypeName, putUserPhoneActionTypeName } from 'reducers/slices/domain/user';\nimport { deleteSingleWishlistItemActionTypeName, deleteWishlistItemActionTypeName, fetchWishlistItemActionTypeName, patchWishlistItemActionTypeName, postWishlistItemActionTypeName } from 'reducers/slices/domain/wishlistItem';\nimport { toggleLeftNavMenuActionTypeName } from 'reducers/slices/ui';\nimport { takeEvery, takeLatest } from 'redux-saga/effects';\nimport { deleteAuthAddressWorker } from 'sideEffects/workers/auth/deleteAuthAddressWorker';\nimport { deleteAuthAvatarImageWorker } from 'sideEffects/workers/auth/deleteAuthAvatarImageWorker';\nimport { deleteAuthPhoneWorker } from 'sideEffects/workers/auth/deleteAuthPhoneWorker';\nimport { patchAuthAddressWorker } from 'sideEffects/workers/auth/patchAuthAddressWorker';\nimport { patchAuthPhoneWorker } from 'sideEffects/workers/auth/patchAuthPhoneWorker';\nimport { postAuthAddressWorker } from 'sideEffects/workers/auth/postAuthAddressWorker';\nimport { postAuthAvatarImageWorker } from 'sideEffects/workers/auth/postAuthAvatarImageWorker';\nimport { postAuthPhoneWorker } from 'sideEffects/workers/auth/postAuthPhoneWorker';\nimport { putAuthAddressWorker } from 'sideEffects/workers/auth/putAuthAddressWorker';\nimport { putAuthCompanyWorker } from 'sideEffects/workers/auth/putAuthCompanyWorker';\nimport { putAuthPhoneWorker } from 'sideEffects/workers/auth/putAuthPhoneWorker';\nimport { putAuthWorker } from 'sideEffects/workers/auth/putAuthWorker';\nimport { deleteCartItemWorker } from 'sideEffects/workers/cartItem/deleteCartItemWorker';\nimport { deleteSingleCartItemWorker } from 'sideEffects/workers/cartItem/deleteSingleCartItemWorker';\nimport { fetchCartItemWorker } from 'sideEffects/workers/cartItem/fetchCartItemWorker';\nimport { postCartItemWorker } from 'sideEffects/workers/cartItem/postCartItemWorker';\nimport { putCartItemWorker } from 'sideEffects/workers/cartItem/putCartItemWorker';\nimport { deleteSingleCategoryWorker } from 'sideEffects/workers/category/deleteSingleCategoryWorker';\nimport { fetchCategoryWorker } from 'sideEffects/workers/category/fetchCategoryWorker';\nimport { postCategoryWorker } from 'sideEffects/workers/category/postCategoryWorker';\nimport { putCategoryWorker } from 'sideEffects/workers/category/putCategoryWorker';\nimport { fetchCategoryWithCacheWorker } from 'sideEffects/workers/fetchCategoryWithCacheWorker';\nimport { fetchProductWithCacheWorker } from 'sideEffects/workers/fetchProductWithCacheWorker';\nimport { leftNavMenuWorkerWorker } from 'sideEffects/workers/leftNavMenuWorker';\nimport { deleteSingleOrderEventWorker } from 'sideEffects/workers/order/deleteSingleOrderEventWorker';\nimport { fetchOrderWorker } from 'sideEffects/workers/order/fetchOrderWorker';\nimport { fetchSingleOrderWorker } from 'sideEffects/workers/order/fetchSingleOrderWorker';\nimport { postOrderEventWorker } from 'sideEffects/workers/order/postOrderEventWorker';\nimport { postOrderWorker } from 'sideEffects/workers/order/postOrderWorker';\nimport { postSessionTimeoutOrderEventWorker } from 'sideEffects/workers/order/postSessionTimeoutOrderEventWorker';\nimport { putOrderEventWorker } from 'sideEffects/workers/order/putOrderEventWorker';\nimport { putOrderWorker } from 'sideEffects/workers/order/putOrderWorker';\nimport { deleteSingleProductVariantWorker } from 'sideEffects/workers/product/deleteSingleProductVariantWorker';\nimport { deleteSingleProductWorker } from 'sideEffects/workers/product/deleteSingleProductWorker';\nimport { fetchProductWorker } from 'sideEffects/workers/product/fetchProductWorker';\nimport { fetchPublicProductWorker } from 'sideEffects/workers/product/fetchPublicProductWorker';\nimport { fetchSingleProductWorker } from 'sideEffects/workers/product/fetchSingleProductWorker';\nimport { postProductVariantWorker } from 'sideEffects/workers/product/postProductVariantWorker';\nimport { postProductWorker } from 'sideEffects/workers/product/postProductWorker';\nimport { putProductVariantWorker } from 'sideEffects/workers/product/putProductVariantWorker';\nimport { putProductWorker } from 'sideEffects/workers/product/putProductWorker';\nimport { deleteSingleReviewWorker } from 'sideEffects/workers/review/deleteSingleReviewWorker';\nimport { fetchReviewWorker } from 'sideEffects/workers/review/fetchReviewWorker';\nimport { postReviewWorker } from 'sideEffects/workers/review/postReviewWorker';\nimport { putReviewWorker } from 'sideEffects/workers/review/putReviewWorker';\nimport { deleteSingleUserWorker } from 'sideEffects/workers/user/deleteSingleUserWorker';\nimport { deleteUserAddressWorker } from 'sideEffects/workers/user/deleteUserAddressWorker';\nimport { deleteUserAvatarImageWorker } from 'sideEffects/workers/user/deleteUserAvatarImageWorker';\nimport { deleteUserPhoneWorker } from 'sideEffects/workers/user/deleteUserPhoneWorker';\nimport { fetchSingleUserWorker } from 'sideEffects/workers/user/fetchSingleUserWorker';\nimport { fetchUserWorker } from 'sideEffects/workers/user/fetchUserWorker';\nimport { patchUserAddressWorker } from 'sideEffects/workers/user/patchUserAddressWorker';\nimport { patchUserPhoneWorker } from 'sideEffects/workers/user/patchUserPhoneWorker';\nimport { postUserAddressWorker } from 'sideEffects/workers/user/postUserAddressWorker';\nimport { postUserAvatarImageWorker } from 'sideEffects/workers/user/postUserAvatarImageWorker';\nimport { postUserPhoneWorker } from 'sideEffects/workers/user/postUserPhoneWorker';\nimport { putUserAddressWorker } from 'sideEffects/workers/user/putUserAddressWorker';\nimport { putUserPhoneWorker } from 'sideEffects/workers/user/putUserPhoneWorker';\nimport { putUserWorker } from 'sideEffects/workers/user/putUserWorker';\nimport { deleteSingleWishlistItemWorker } from 'sideEffects/workers/wishlistItems/deleteSingleWishlistItemWorker';\nimport { deleteWishlistItemWorker } from 'sideEffects/workers/wishlistItems/deleteWishlistItemWorker';\nimport { fetchWishlistItemWorker } from 'sideEffects/workers/wishlistItems/fetchWishlistItemWorker';\nimport { patchWishlistItemWorker } from 'sideEffects/workers/wishlistItems/patchWishlistItemWorker';\nimport { postWishlistItemWorker } from 'sideEffects/workers/wishlistItems/postWishlistItemWorker';\nimport { fetchAuthOrderWorker } from 'sideEffects/workers/auth/fetchAuthOrderWorker';\nimport { postAuthOrderEventWorker } from 'sideEffects/workers/auth/postAuthOrderEventWorker';\nimport { fetchSingleAuthOrderWorker } from 'sideEffects/workers/auth/fetchSingleAuthOrderWorker';\n\n/**\n * takeEvery: allows multiple worker instances to be started CONCURRENTLY.\n * takeLatest: cancel pending when there is a new one.\n * throttle: type ahead stuff.\n/**\n *  watcher\n **/\nexport function* leftNavMenuWatcher() {\n  yield takeEvery(\n    toggleLeftNavMenuActionTypeName,\n    leftNavMenuWorkerWorker,\n  )\n}\n\n// review\nexport function* fetchReviewWatcher() {\n  yield takeLatest(\n    fetchReviewActionTypeName,\n    fetchReviewWorker,\n  )\n}\n\nexport function* postReviewWatcher() {\n  yield takeLatest(\n    postReviewActionTypeName,\n    postReviewWorker,\n  )\n}\n\nexport function* putReviewWatcher() {\n  yield takeLatest(\n    putReviewActionTypeName,\n    putReviewWorker,\n  )\n}\n\nexport function* deleteSingleReviewWatcher() {\n  yield takeLatest(\n    deleteSingleReviewActionTypeName,\n    deleteSingleReviewWorker,\n  )\n}\n\n// cartItem\nexport function* fetchCartItemWatcher() {\n  yield takeLatest(\n    fetchCartItemActionTypeName,\n    fetchCartItemWorker,\n  )\n}\n\nexport function* postCartItemWatcher() {\n  yield takeLatest(\n    postCartItemActionTypeName,\n    postCartItemWorker,\n  )\n}\n\nexport function* putCartItemWatcher() {\n  yield takeLatest(\n    putCartItemActionTypeName,\n    putCartItemWorker,\n  )\n}\n\nexport function* deleteSingleCartItemWatcher() {\n  yield takeLatest(\n    deleteSingleCartItemActionTypeName,\n    deleteSingleCartItemWorker,\n  )\n}\n\nexport function* deleteCartItemWatcher() {\n  yield takeLatest(\n    deleteCartItemActionTypeName,\n    deleteCartItemWorker,\n  )\n}\n\n// wishlist\nexport function* fetchWishlistItemWatcher() {\n  yield takeLatest(\n    fetchWishlistItemActionTypeName,\n    fetchWishlistItemWorker,\n  )\n}\n\nexport function* postWishlistItemWatcher() {\n  yield takeLatest(\n    postWishlistItemActionTypeName,\n    postWishlistItemWorker,\n  )\n}\n\nexport function* patchWishlistItemWatcher() {\n  yield takeLatest(\n    patchWishlistItemActionTypeName,\n    patchWishlistItemWorker,\n  )\n}\n\nexport function* deleteSingleWishlistItemWatcher() {\n  yield takeLatest(\n    deleteSingleWishlistItemActionTypeName,\n    deleteSingleWishlistItemWorker,\n  )\n}\n\nexport function* deleteWishlistItemWatcher() {\n  yield takeLatest(\n    deleteWishlistItemActionTypeName,\n    deleteWishlistItemWorker,\n  )\n}\n\n// category\nexport function* fetchCategoryWatcher() {\n  yield takeLatest(\n    fetchCategoryActionTypeName,\n    fetchCategoryWorker,\n  )\n}\n\nexport function* postCategoryWatcher() {\n  yield takeLatest(\n    postCategoryActionTypeName,\n    postCategoryWorker,\n  )\n}\n\nexport function* putCategoryWatcher() {\n  yield takeLatest(\n    putCategoryActionTypeName,\n    putCategoryWorker,\n  )\n}\n\nexport function* deleteSingleCategoryWatcher() {\n  yield takeLatest(\n    deleteSingleCategoryActionTypeName,\n    deleteSingleCategoryWorker,\n  )\n}\n\n// user\nexport function* fetchUserWatcher() {\n  yield takeLatest(\n    fetchUserActionTypeName,\n    fetchUserWorker,\n  )\n}\n\nexport function* fetchSingleUserWatcher() {\n  yield takeLatest(\n    fetchSingleUserActionTypeName,\n    fetchSingleUserWorker,\n  )\n}\n\nexport function* putUserWatcher() {\n  yield takeLatest(\n    putUserActionTypeName,\n    putUserWorker,\n  )\n}\n\nexport function* deleteSingleUserWatcher() {\n  yield takeLatest(\n    deleteSingleUserActionTypeName,\n    deleteSingleUserWorker,\n  )\n}\n\nexport function* postUserAvatarImageWatcher() {\n  yield takeLatest(\n    postUserAvatarImageActionTypeName,\n    postUserAvatarImageWorker,\n  )\n}\n\nexport function* deleteUserAvatarImageWatcher() {\n  yield takeLatest(\n    deleteUserAvatarImageActionTypeName,\n    deleteUserAvatarImageWorker,\n  )\n}\n\nexport function* postUserPhoneWatcher() {\n  yield takeLatest(\n    postUserPhoneActionTypeName,\n    postUserPhoneWorker,\n  )\n}\n\nexport function* putUserPhoneWatcher() {\n  yield takeLatest(\n    putUserPhoneActionTypeName,\n    putUserPhoneWorker,\n  )\n}\n\nexport function* patchUserPhoneWatcher() {\n  yield takeLatest(\n    patchUserPhoneActionTypeName,\n    patchUserPhoneWorker,\n  )\n}\n\nexport function* deleteUserPhoneWatcher() {\n  yield takeLatest(\n    deleteUserPhoneActionTypeName,\n    deleteUserPhoneWorker,\n  )\n}\n\nexport function* postUserAddressWatcher() {\n  yield takeLatest(\n    postUserAddressActionTypeName,\n    postUserAddressWorker,\n  )\n}\n\nexport function* putUserAddressWatcher() {\n  yield takeLatest(\n    putUserAddressActionTypeName,\n    putUserAddressWorker,\n  )\n}\n\nexport function* patchUserAddressWatcher() {\n  yield takeLatest(\n    patchUserAddressActionTypeName,\n    patchUserAddressWorker,\n  )\n}\n\nexport function* deleteUserAddressWatcher() {\n  yield takeLatest(\n    deleteUserAddressActionTypeName,\n    deleteUserAddressWorker,\n  )\n}\n\n\n// order\nexport function* fetchOrderWatcher() {\n  yield takeLatest(\n    fetchOrderActionTypeName,\n    fetchOrderWorker,\n  )\n}\n\nexport function* fetchSingleOrderWatcher() {\n  yield takeLatest(\n    fetchSingleOrderActionTypeName,\n    fetchSingleOrderWorker,\n  )\n}\n\nexport function* postOrderWatcher() {\n  yield takeLatest(\n    postOrderActionTypeName,\n    postOrderWorker,\n  )\n}\n\nexport function* putOrderWatcher() {\n  yield takeLatest(\n    putOrderActionTypeName,\n    putOrderWorker,\n  )\n}\n\nexport function* postOrderEventWatcher() {\n  yield takeLatest(\n    postOrderEventActionTypeName,\n    postOrderEventWorker,\n  )\n}\n\nexport function* putOrderEventWatcher() {\n  yield takeLatest(\n    putOrderEventActionTypeName,\n    putOrderEventWorker,\n  )\n}\n\nexport function* deleteSingleOrderEventWatcher() {\n  yield takeLatest(\n    deleteSingleOrderEventActionTypeName,\n    deleteSingleOrderEventWorker,\n  )\n}\n\nexport function* postSessionTimeoutOrderEventWatcher() {\n  yield takeLatest(\n    postSessionTimeoutOrderEventActionTypeName,\n    postSessionTimeoutOrderEventWorker,\n  )\n}\n\n// product\nexport function* fetchProductWatcher() {\n  yield takeLatest(\n    fetchProductActionTypeName,\n    fetchProductWorker,\n  )\n}\n\nexport function* fetchPublicProductWatcher() {\n  yield takeLatest(\n    fetchPublicProductActionTypeName,\n    fetchPublicProductWorker,\n  )\n}\n\nexport function* fetchSingleProductWatcher() {\n  yield takeLatest(\n    fetchSingleProductActionTypeName,\n    fetchSingleProductWorker,\n  )\n}\n\nexport function* postProductWatcher() {\n  yield takeLatest(\n    postProductActionTypeName,\n    postProductWorker,\n  )\n}\n\nexport function* putProductWatcher() {\n  yield takeLatest(\n    putProductActionTypeName,\n    putProductWorker,\n  )\n}\n\nexport function* deleteSingleProductWatcher() {\n  yield takeLatest(\n    deleteSingleProductActionTypeName,\n    deleteSingleProductWorker,\n  )\n}\n\nexport function* postProductVariantWatcher() {\n  yield takeLatest(\n    postProductVariantActionTypeName,\n    postProductVariantWorker,\n  )\n}\n\nexport function* putProductVariantWatcher() {\n  yield takeLatest(\n    putProductVariantActionTypeName,\n    putProductVariantWorker,\n  )\n}\n\nexport function* deleteSingleProductVariantWatcher() {\n  yield takeLatest(\n    deleteSingleProductVariantActionTypeName,\n    deleteSingleProductVariantWorker,\n  )\n}\n\n// auth\nexport function* putAuthWatcher() {\n  yield takeLatest(\n    putAuthActionTypeName,\n    putAuthWorker,\n  )\n}\n\nexport function* postAuthAvatarImageWatcher() {\n  yield takeLatest(\n    postAuthAvatarImageActionTypeName,\n    postAuthAvatarImageWorker,\n  )\n}\n\nexport function* deleteAuthAvatarImageWatcher() {\n  yield takeLatest(\n    deleteAuthAvatarImageActionTypeName,\n    deleteAuthAvatarImageWorker,\n  )\n}\n\nexport function* postAuthPhoneWatcher() {\n  yield takeLatest(\n    postAuthPhoneActionTypeName,\n    postAuthPhoneWorker,\n  )\n}\n\nexport function* putAuthPhoneWatcher() {\n  yield takeLatest(\n    putAuthPhoneActionTypeName,\n    putAuthPhoneWorker,\n  )\n}\n\nexport function* patchAuthPhoneWatcher() {\n  yield takeLatest(\n    patchAuthPhoneActionTypeName,\n    patchAuthPhoneWorker,\n  )\n}\n\nexport function* deleteAuthPhoneWatcher() {\n  yield takeLatest(\n    deleteAuthPhoneActionTypeName,\n    deleteAuthPhoneWorker,\n  )\n}\n\nexport function* postAuthAddressWatcher() {\n  yield takeLatest(\n    postAuthAddressActionTypeName,\n    postAuthAddressWorker,\n  )\n}\n\nexport function* putAuthAddressWatcher() {\n  yield takeLatest(\n    putAuthAddressActionTypeName,\n    putAuthAddressWorker,\n  )\n}\n\nexport function* patchAuthAddressWatcher() {\n  yield takeLatest(\n    patchAuthAddressActionTypeName,\n    patchAuthAddressWorker,\n  )\n}\n\nexport function* deleteAuthAddressWatcher() {\n  yield takeLatest(\n    deleteAuthAddressActionTypeName,\n    deleteAuthAddressWorker,\n  )\n}\n\nexport function* putAuthCompanyWatcher() {\n  yield takeLatest(\n    putAuthCompanyActionTypeName,\n    putAuthCompanyWorker,\n  )\n}\n\nexport function* fetchAuthOrderWatcher() {\n  yield takeLatest(\n    fetchAuthOrderActionTypeName,\n    fetchAuthOrderWorker,\n  )\n}\n\nexport function* fetchSingleAuthOrderWatcher() {\n  yield takeLatest(\n    fetchSingleAuthOrderActionTypeName,\n    fetchSingleAuthOrderWorker,\n  )\n}\n\nexport function* postAuthOrderEventWatcher() {\n  yield takeLatest(\n    postAuthOrderEventActionTypeName,\n    postAuthOrderEventWorker,\n  )\n}\n\n// cache\nexport function* fetchProductWithCacheWatcher() {\n  yield takeLatest(\n    fetchProductWithCacheActionTypeName,\n    fetchProductWithCacheWorker,\n  )\n}\n\nexport function* fetchCategoryWithCacheWatcher() {\n  yield takeLatest(\n    fetchCategoryWithCacheActionTypeName,\n    fetchCategoryWithCacheWorker,\n  )\n}\n\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { rootReducer } from 'reducers/rootReducer';\nimport { initialState } from 'states/state';\nimport { StateType } from 'states/types';\nimport createSagaMiddleware from 'redux-saga'\nimport { rootSaga } from 'sideEffects/rootSaga'\n\n/**\n * middleware config\n **/\n// saga\nconst sagaMiddleware = createSagaMiddleware()\n\n// store middleware to array\nexport const middleware: any[] = [\n  sagaMiddleware  \n]\n\nconst composeEnhancers = (<any>window).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, initialState as StateType, composeEnhancers(\n    applyMiddleware(...middleware)\n));\n\n/**\n * register any listeners...\n **/\n\n// persist to localstorage\nstore.subscribe(() => {\n\n  // for guest users\n  const auth = store.getState().app.auth\n  localStorage.setItem(\"auth\", JSON.stringify(auth));\n\n  // for guest users\n  const cartItems = store.getState().domain.cartItems\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n\n})\n\n// run saga\n/**\n * you have to run sage AFTER 'createStore'\n **/\nsagaMiddleware.run(rootSaga)\n","import { all, call, spawn } from 'redux-saga/effects';\nimport { deleteAuthAddressWatcher, deleteAuthAvatarImageWatcher, deleteAuthPhoneWatcher, deleteCartItemWatcher, deleteSingleCartItemWatcher, deleteSingleCategoryWatcher, deleteSingleOrderEventWatcher, deleteSingleProductVariantWatcher, deleteSingleProductWatcher, deleteSingleReviewWatcher, deleteSingleUserWatcher, deleteSingleWishlistItemWatcher, deleteUserAddressWatcher, deleteUserAvatarImageWatcher, deleteUserPhoneWatcher, deleteWishlistItemWatcher, fetchCartItemWatcher, fetchCategoryWatcher, fetchCategoryWithCacheWatcher, fetchOrderWatcher, fetchProductWatcher, fetchProductWithCacheWatcher, fetchPublicProductWatcher, fetchReviewWatcher, fetchSingleOrderWatcher, fetchSingleProductWatcher, fetchSingleUserWatcher, fetchUserWatcher, fetchWishlistItemWatcher, leftNavMenuWatcher, patchAuthAddressWatcher, patchAuthPhoneWatcher, patchUserAddressWatcher, patchUserPhoneWatcher, patchWishlistItemWatcher, postAuthAddressWatcher, postAuthAvatarImageWatcher, postAuthPhoneWatcher, postCartItemWatcher, postCategoryWatcher, postOrderEventWatcher, postOrderWatcher, postProductVariantWatcher, postProductWatcher, postReviewWatcher, postUserAddressWatcher, postUserAvatarImageWatcher, postUserPhoneWatcher, postWishlistItemWatcher, putAuthAddressWatcher, putAuthCompanyWatcher, putAuthPhoneWatcher, putAuthWatcher, putCartItemWatcher, putCategoryWatcher, putOrderEventWatcher, putOrderWatcher, putProductVariantWatcher, putProductWatcher, putReviewWatcher, putUserAddressWatcher, putUserPhoneWatcher, putUserWatcher, postSessionTimeoutOrderEventWatcher, fetchAuthOrderWatcher, postAuthOrderEventWatcher, fetchSingleAuthOrderWatcher } from './watchers';\n\nexport function* rootSaga() {\n\n  /**\n   *\n   * register watchers\n   *\n   **/\n  const sagas: any[] = [\n    // app\n    leftNavMenuWatcher,\n\n    // ui\n    \n\n    // domain\n\n    /// review\n    fetchReviewWatcher,\n    postReviewWatcher,\n    putReviewWatcher,\n    deleteSingleReviewWatcher,\n    \n    /// cartItem\n    fetchCartItemWatcher,\n    postCartItemWatcher,\n    putCartItemWatcher,\n    deleteSingleCartItemWatcher,\n    deleteCartItemWatcher,\n    \n    /// wishlistItem\n    fetchWishlistItemWatcher,\n    postWishlistItemWatcher,\n    patchWishlistItemWatcher,\n    deleteSingleWishlistItemWatcher,\n    deleteWishlistItemWatcher,\n    \n    /// category\n    fetchCategoryWatcher,\n    postCategoryWatcher,\n    putCategoryWatcher,\n    deleteSingleCategoryWatcher,\n\n    /// user\n    fetchUserWatcher,\n    fetchSingleUserWatcher,\n    putUserWatcher,\n    deleteSingleUserWatcher,\n    postUserAvatarImageWatcher,\n    deleteUserAvatarImageWatcher,\n    postUserPhoneWatcher,\n    putUserPhoneWatcher,\n    patchUserPhoneWatcher,\n    deleteUserPhoneWatcher,\n    postUserAddressWatcher,\n    putUserAddressWatcher,\n    patchUserAddressWatcher,\n    deleteUserAddressWatcher,\n\n    // auth\n    postAuthAvatarImageWatcher,\n    deleteAuthAvatarImageWatcher,\n    putAuthWatcher,\n    postAuthPhoneWatcher,\n    putAuthPhoneWatcher,\n    patchAuthPhoneWatcher,\n    deleteAuthPhoneWatcher,\n    postAuthAddressWatcher,\n    putAuthAddressWatcher,\n    patchAuthAddressWatcher,\n    deleteAuthAddressWatcher,\n    putAuthCompanyWatcher,\n    fetchAuthOrderWatcher,\n    fetchSingleAuthOrderWatcher,\n    postAuthOrderEventWatcher,\n\n    /// order\n    fetchOrderWatcher,\n    fetchSingleOrderWatcher,\n    postOrderWatcher,\n    putOrderWatcher,\n    postOrderEventWatcher,\n    putOrderEventWatcher,\n    deleteSingleOrderEventWatcher,\n    postSessionTimeoutOrderEventWatcher,\n   \n    /// product\n    fetchProductWatcher,\n    fetchSingleProductWatcher,\n    fetchPublicProductWatcher,\n    postProductWatcher,\n    putProductWatcher,\n    deleteSingleProductWatcher,\n    postProductVariantWatcher,\n    putProductVariantWatcher,\n    deleteSingleProductVariantWatcher,\n\n    /// cache\n    fetchProductWithCacheWatcher,\n    fetchCategoryWithCacheWatcher,\n\n  ]\n\n  /**\n   * keep everything (e.g., child tasks) alive \n   *   - disconnect all children watchers with this rootSaga \n   **/\n  yield all(sagas.map((saga) =>\n    spawn(function*() {\n      while (true) {\n        try {\n          yield call(saga)\n          break\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    }))\n  );\n\n}\n","import { ThemeProvider } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Content from 'components/pages/Content';\nimport { store } from 'configs/storeConfig';\nimport { SnackbarProvider } from 'notistack';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { theme } from 'ui/css/theme';\n\n/**\n * dev env only\n **/\n//const RoleSwitch = (NODE_ENV === \"development\") ? loadable(() => import(\"tests/debug/compoments/RoleSwitch\")) : null\n\nconst Index = (props: any) => {\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        {/** SnackbarProvider must be a child of ThemeProvider **/}\n        <SnackbarProvider maxSnack={3}>\n          <CssBaseline>\n            <Provider store={store}>\n              <Router>\n                <Content />\n                {/**(RoleSwitch &&\n                  <RoleSwitch />\n                )**/}\n              </Router>\n            </Provider>\n          </CssBaseline>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n};\n\nReactDOM.render(\n  <Index />\n  , document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"images/fb31e293b44b82a65c76047e4b9c582f.jpg\";","module.exports = __webpack_public_path__ + \"images/18209f2975d4a36e23fd25ee3761b73a.jpg\";","module.exports = __webpack_public_path__ + \"images/f654c681272fedb5c0550618080c0805.jpeg\";"],"sourceRoot":""}